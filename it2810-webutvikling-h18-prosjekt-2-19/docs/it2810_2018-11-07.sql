# ************************************************************
# Sequel Pro SQL dump
# Version 4529
#
# http://www.sequelpro.com/
# https://github.com/sequelpro/sequelpro
#
# Host: 127.0.0.1 (MySQL 5.7.20)
# Database: it2810
# Generation Time: 2018-11-07 11:33:13 +0000
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table readme
# ------------------------------------------------------------

DROP TABLE IF EXISTS `readme`;

CREATE TABLE `readme` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `author` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT '',
  `url` varchar(511) DEFAULT NULL,
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `content` longtext,
  `content_html` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=utf8;

LOCK TABLES `readme` WRITE;
/*!40000 ALTER TABLE `readme` DISABLE KEYS */;

INSERT INTO `readme` (`id`, `author`, `name`, `url`, `timestamp`, `content`, `content_html`)
VALUES
	(1,'rosvik','248.no','https://raw.githubusercontent.com/rosvik/248.no/master/README.md','2018-11-07 12:30:29','![qore logo](https://qore.no/res/logo-text-100.png)\n\n# Webpage for 248\nhttps://248.no\n\n## Credits\n\n### setTimeout with a shorter delay\nMost browsers don\'t support a delay shorter than 10 milliseconds, so by using some magic hack with `window.postMessage()`, you can get a shorter delay that can run around 50 times faster. On my page it makes the cursor run about twice as fast as `setTimeout(func, 0)` would.\n\nhttps://dbaron.org/log/20100309-faster-timeouts\n\nHTML5 Boilerplate\nhttps://html5boilerplate.com\n\njQuery\nhttp://jquery.com\n\nLettering.js\nhttp://letteringjs.com\n','<p><img src=\"https://qore.no/res/logo-text-100.png\" alt=\"qore logo\" /></p>\n<h1 id=\"webpagefor248\">Webpage for 248</h1>\n<p>https://248.no</p>\n<h2 id=\"credits\">Credits</h2>\n<h3 id=\"settimeoutwithashorterdelay\">setTimeout with a shorter delay</h3>\n<p>Most browsers don\'t support a delay shorter than 10 milliseconds, so by using some magic hack with <code>window.postMessage()</code>, you can get a shorter delay that can run around 50 times faster. On my page it makes the cursor run about twice as fast as <code>setTimeout(func, 0)</code> would.</p>\n<p>https://dbaron.org/log/20100309-faster-timeouts</p>\n<p>HTML5 Boilerplate\nhttps://html5boilerplate.com</p>\n<p>jQuery\nhttp://jquery.com</p>\n<p>Lettering.js\nhttp://letteringjs.com</p>'),
	(2,'rosvik','dotfiles','https://raw.githubusercontent.com/rosvik/dotfiles/master/README.md','2018-11-07 12:30:29','# Dotfiles\n\nMy own dotfile repo for keeping track of configs across systems. I try to keep the OS specific settings seperate, while sharing what\'s possible.\n\n## Installation\n_Disclaimer: **Don\'t**. These config files contain lots of settings that will only work for me. They are meant to replace the ones already on your computer, so your things will probably break. Please use the files for for inspiration, and if you want to create your own dotfile repo, you should read [this](https://www.anishathalye.com/2014/08/03/managing-your-dotfiles/)._\n\n1. The dotfiles will be placed at `~/`, so make sure you are logged in with the right user, or change the `clean` value in the `install-[OS].conf.yaml` file.\n\n2. Clone this repo to a place where you want to keep it permanently. A symlink to the folder will be placed at `~/.dotfiles`.\n\n3. Run `./install-[OS]`\n\n### Sublime Text 3\nTo install the config files for Sublime Text 3, a few additional steps is required.\n\n1. Install Sublime Text 3\n2. Remove the `User` folder (Located at `~/Library/Application Support/Sublime Text 3/Packages/User` on macOS).\n3. Run `./install-[OS]`\n4. Install Package Control\n5. Restart Sublime Text\n\n## Credits\nI use Dotbot by Anish Athalye to handle installation: \nhttps://github.com/anishathalye/dotbot\n','<h1 id=\"dotfiles\">Dotfiles</h1>\n<p>My own dotfile repo for keeping track of configs across systems. I try to keep the OS specific settings seperate, while sharing what\'s possible.</p>\n<h2 id=\"installation\">Installation</h2>\n<p><em>Disclaimer: <strong>Don\'t</strong>. These config files contain lots of settings that will only work for me. They are meant to replace the ones already on your computer, so your things will probably break. Please use the files for for inspiration, and if you want to create your own dotfile repo, you should read <a href=\"https://www.anishathalye.com/2014/08/03/managing-your-dotfiles/\">this</a>.</em></p>\n<ol>\n<li><p>The dotfiles will be placed at <code>~/</code>, so make sure you are logged in with the right user, or change the <code>clean</code> value in the <code>install-[OS].conf.yaml</code> file.</p></li>\n<li><p>Clone this repo to a place where you want to keep it permanently. A symlink to the folder will be placed at <code>~/.dotfiles</code>.</p></li>\n<li><p>Run <code>./install-[OS]</code></p></li>\n</ol>\n<h3 id=\"sublimetext3\">Sublime Text 3</h3>\n<p>To install the config files for Sublime Text 3, a few additional steps is required.</p>\n<ol>\n<li>Install Sublime Text 3</li>\n<li>Remove the <code>User</code> folder (Located at <code>~/Library/Application Support/Sublime Text 3/Packages/User</code> on macOS).</li>\n<li>Run <code>./install-[OS]</code></li>\n<li>Install Package Control</li>\n<li>Restart Sublime Text</li>\n</ol>\n<h2 id=\"credits\">Credits</h2>\n<p>I use Dotbot by Anish Athalye to handle installation: \nhttps://github.com/anishathalye/dotbot</p>'),
	(3,'rosvik','ntnu-proglab-arduino-zumo','https://raw.githubusercontent.com/rosvik/ntnu-proglab-arduino-zumo/master/README.md','2018-11-07 12:30:30','![NTNU logo](https://qore.no/res/ntnu-logo-100.png)\n\n# ProgLab, Øving 4, Gruppe14\nhttps://github.com/rosvik/ntnu-proglab-arduino-zumo\n\n## Øving:\n[Øving PDF](https://ntnu.download/TDT4112/Øvinger/Øving%204_2017%20Robotkonkurranse.pdf), [Regler PDF](https://ntnu.download/TDT4112/Øvinger/Øving%204_2017%20Regelverk%20for%20Zumo%20robotkonkurranse.pdf)\n\n## Useful links:\nProgLab GitHub:\nhttps://github.com/IDI-PLab/Lecture-examples/,\nhttps://github.com/IDI-PLab/plab-library/\n\nBluetooth and Processing:\nhttps://www.ntnu.no/wiki/pages/viewpage.action?pageId=78024129\n','<p><img src=\"https://qore.no/res/ntnu-logo-100.png\" alt=\"NTNU logo\" /></p>\n<h1 id=\"proglabving4gruppe14\">ProgLab, Øving 4, Gruppe14</h1>\n<p>https://github.com/rosvik/ntnu-proglab-arduino-zumo</p>\n<h2 id=\"ving\">Øving:</h2>\n<p><a href=\"https://ntnu.download/TDT4112/Øvinger/Øving%204_2017%20Robotkonkurranse.pdf\">Øving PDF</a>, <a href=\"https://ntnu.download/TDT4112/Øvinger/Øving%204_2017%20Regelverk%20for%20Zumo%20robotkonkurranse.pdf\">Regler PDF</a></p>\n<h2 id=\"usefullinks\">Useful links:</h2>\n<p>ProgLab GitHub:\nhttps://github.com/IDI-PLab/Lecture-examples/,\nhttps://github.com/IDI-PLab/plab-library/</p>\n<p>Bluetooth and Processing:\nhttps://www.ntnu.no/wiki/pages/viewpage.action?pageId=78024129</p>'),
	(4,'rosvik','ntnu-tdt4113-rpi-zumo','https://raw.githubusercontent.com/rosvik/ntnu-tdt4113-rpi-zumo/master/README.md','2018-11-07 12:30:30','![NTNU logo](https://qore.no/res/ntnu-logo-100.png)\n\n# ProgLab 2, Øving 6, Gruppe 16\nhttps://github.com/rosvik/ntnu-proglab2-rpi-zumo\n\nConnecting:\n```\nssh robot@rpi-16.idi.ntnu.no\n```\n\nDownloading files:\n```\nscp robot@rpi-16.idi.ntnu.no:file.txt ~/local/path\n```\n\nTO DO:\n- Fikse active_behaviors i BBCON/Arbitrator\n- Johannes tar med ny Ultralydsensor\n- Fikse behaviors til å returnere en liste med triplets av motoranbefalinger.\n- Lage motoranbefalinger til kamera-behavior\n- Lage Plan B hvis Ultralyd ikkje funker\n','<p><img src=\"https://qore.no/res/ntnu-logo-100.png\" alt=\"NTNU logo\" /></p>\n<h1 id=\"proglab2ving6gruppe16\">ProgLab 2, Øving 6, Gruppe 16</h1>\n<p>https://github.com/rosvik/ntnu-proglab2-rpi-zumo</p>\n<p>Connecting:</p>\n<pre><code>ssh robot@rpi-16.idi.ntnu.no\n</code></pre>\n<p>Downloading files:</p>\n<pre><code>scp robot@rpi-16.idi.ntnu.no:file.txt ~/local/path\n</code></pre>\n<p>TO DO:</p>\n<ul>\n<li>Fikse active_behaviors i BBCON/Arbitrator</li>\n<li>Johannes tar med ny Ultralydsensor</li>\n<li>Fikse behaviors til å returnere en liste med triplets av motoranbefalinger.</li>\n<li>Lage motoranbefalinger til kamera-behavior</li>\n<li>Lage Plan B hvis Ultralyd ikkje funker</li>\n</ul>'),
	(5,'rosvik','ntnu-tdt4145-database-project','https://raw.githubusercontent.com/rosvik/ntnu-tdt4145-database-project/master/README.md','2018-11-07 12:30:30','<!-- ---\ntitle: \"Innlevering 2 - Gruppe 40\"\nsubtitle: \"TDT4145 - Datamodellering og databasesystemer\"\nauthor: \"Johannes Tomren Røsvik, Dennis Jianbin Liang, Pål Fossnes, Fredrik Jenssen\"\ndate: \"18.03.18\"\noutput: \"pdf_document\"\n--- -->\n\n![NTNU logo](https://qore.no/res/ntnu-logo-100.png)\n\n# Prosjekt - TDT4145, Gruppe 40\nhttps://github.com/rosvik/ntnu-tdt4145-database-project\n\n# Installation\n\n## How to add test-data to database\n1. Open MySQL Workbench\n2. Find the file named \"workoutdiary.sql\" locally on your computer\n3. Open the file in MySQL Workbench\n4. Execute the file\n5. Make sure that the workoutdiary database has appeared\n\n## Update database credentials\n1. Open the file named config.conf\n2. Replace \'username\' on line 1 and \'password\' on line 2 with the credentials to your database\n3. If your database\'s location isn\'t local, replace the url with an appropriate url\n\n# Running\n\n## MacOS or Linux:\n1. Open Terminal.app\n2. Navigate to the project folder\n	```\n	cd location/of/workoutdiary/project\n	```\n3. Run `./workout-diary [data]` where [data] is replaced by one of the examples below.\n4. Run `./workout-diary help` to get a list of possible commands\n\n## Windows\n1. Open cmd.exe\n2. Navigate to the project folder\n	```\n	cd location/of/workoutdiary/project\n	```\n3. Run `workout-diary.bat [data]` where [data] is replaced by one of the examples below.\n4. Run `workout-diary.bat help` to get a list of possible commands\n\n# Examples\nAdd any of these examples to the commands explained above. `./workout-diary [example]` on Mac or Linux and `workout-diary.bat [example]` on Windows.\n\n## List\n**List the 5 latest workouts**\n```\nlist workout 5\n\n```\n\n**List all exercises from 2012 to 2020**\n```\nlist exercise 2012-01-01 2020-01-01\n\n```\n\n**List all exercises in the Bulking group**\n```\nlist group \"Bulking\"\n\n```\n\n**List exercises that have an equipment**\n```\nlist equipment 2012-04-25 2018-04-27\n\n```\n\n## Add\n**Add a workout with in April 2018 at 11:45AM with shape 8 and description \"Fin tur i skogen\"**\n```\nadd workout 2018-04-25 11:45:23 8 \"Fin tur i skogen\"\n\n```\n\n**Add an exercise named Fjelltur with description \"Gå en tur i fjellet\"**\n```\nadd exercise \"Fjelltur\" \"Gå en tur i fjellet\"\n\n```\n\n**Add an equipment named Spaserstokk with the description \"Stav som gir stabilitet\"**\n```\nadd equipment \"Spaserstokk\" \"Stav som gir stabilitet\"\n\n```\n\n**Make a new group with name \"Rolig beilmuskulaturvedlikehold\"**\n```\nadd group \"Rolig beilmuskulaturvedlikehold\"\n\n```\n\n## Connect\n**Add exercise with id 1 to workout with id 3 with a duration of 23 minutes and 9 performance**\n```\nconnect exercise 3 1 23 9\n\n```\n\n**Add equipment with id 1 to exercise id 1 that is 50 kilos and has 10 sets**\n```\nconnect equipment 1 1 50 10\n\n```\n\n**Add equipment with id 3 to exercise with id 2**\n```\nconnect group 2 3\n\n```\n\n\n# Overview of classes:\n\nOur classes are:\n- ConnectionConfiguration\n- ConnectionCredentials\n- MainController\n- Add\n- Connect\n- List\n- ConnectionApp\n\n## MainController\nHandles command line input, finds the appropriate function for given parameters, passes information on to the other classes, and displays help information to the user.\n\n## ConnectionCredentials\nReads the contents of the config.conf file, and finds the password, username and url for the database.\n\n## ConnectionConfiguration\nEstablishes a connection to a database with the given credentials.\n\n## Add\nHandles all cases where information needs to be added to the database. This class satisfies requirement number 1, and parts of 4. The class is able to add workouts, exercises, equipment and groups.\n\n## Connect\nHandles all cases where there needs to be created a relation between two entities. This includes\n- Adding an exercise to a workout\n- Adding an exercise to a exercise group\n- Adding equipment to an exercise\n\n## List\nHandles all cases where there needs to be displayed a list to the user. This class satisfies the requirement 2,3,5 and the remaining parts of 4. The class is able to display:\n- The n latest workouts\n- Workouts with a given exercise within a time period\n- All exercises that are part of a group\n- All exercises that uses an equipment\n\n## ConnectionApp\nUsed for testing the application during development\n\n# Use cases:\n1. Registrere apparater, øvelser og treningsøkter med tilhørende data.\n	- Løses ved å kjøre addEquipment(), addExercise(), addWorkout(), som legger inn en ny rad i databasen, med den informasjonen fremstilt av brukeren\n2. Få opp informasjon om et antall  n  sist gjennomførte treningsøkter med notater, der n\nspesifiseres av brukeren.\n	- Løses ved å kjøre listWorkouts(), som gjennomfører spørringer som filtrerer ut ønsket data, og viser denne til brukere.\n3. For hver enkelt øvelse skal det være mulig å se en resultatlogg i et gitt tidsintervall spesifisert av brukeren.\n	- Løses ved å kjøre listExercises(), som gjennomfører spørringer som filtrerer ut ønsket data gitt ved tidsintervall spesifisert av brukeren, og viser dette.\n4. Lage øvelsegrupper og finne øvelser som er i samme gruppe.\n	- Løses ved å kjøre addExerciseGroup() og listExerciseInGroup(), som lager en ny excercise gruppe og viser alle exercises som er klassifisert i en gruppe\n5. Et valgfritt use case som dere selv bestemmer.\n	- Løses ved å kjøre listExercisesWithEquipment(). Denne metoden gjennomfører spørring som viser hvilke exercise som bruker hvilke equipment, i et gitt tidsintervall.\n','<!-- ---\ntitle: \"Innlevering 2 - Gruppe 40\"\nsubtitle: \"TDT4145 - Datamodellering og databasesystemer\"\nauthor: \"Johannes Tomren Røsvik, Dennis Jianbin Liang, Pål Fossnes, Fredrik Jenssen\"\ndate: \"18.03.18\"\noutput: \"pdf_document\"\n--- -->\n<p><img src=\"https://qore.no/res/ntnu-logo-100.png\" alt=\"NTNU logo\" /></p>\n<h1 id=\"prosjekttdt4145gruppe40\">Prosjekt - TDT4145, Gruppe 40</h1>\n<p>https://github.com/rosvik/ntnu-tdt4145-database-project</p>\n<h1 id=\"installation\">Installation</h1>\n<h2 id=\"howtoaddtestdatatodatabase\">How to add test-data to database</h2>\n<ol>\n<li>Open MySQL Workbench</li>\n<li>Find the file named \"workoutdiary.sql\" locally on your computer</li>\n<li>Open the file in MySQL Workbench</li>\n<li>Execute the file</li>\n<li>Make sure that the workoutdiary database has appeared</li>\n</ol>\n<h2 id=\"updatedatabasecredentials\">Update database credentials</h2>\n<ol>\n<li>Open the file named config.conf</li>\n<li>Replace \'username\' on line 1 and \'password\' on line 2 with the credentials to your database</li>\n<li>If your database\'s location isn\'t local, replace the url with an appropriate url</li>\n</ol>\n<h1 id=\"running\">Running</h1>\n<h2 id=\"macosorlinux\">MacOS or Linux:</h2>\n<ol>\n<li>Open Terminal.app</li>\n<li>Navigate to the project folder\n<code>\ncd location/of/workoutdiary/project\n</code></li>\n<li>Run <code>./workout-diary [data]</code> where [data] is replaced by one of the examples below.</li>\n<li>Run <code>./workout-diary help</code> to get a list of possible commands</li>\n</ol>\n<h2 id=\"windows\">Windows</h2>\n<ol>\n<li>Open cmd.exe</li>\n<li>Navigate to the project folder\n<code>\ncd location/of/workoutdiary/project\n</code></li>\n<li>Run <code>workout-diary.bat [data]</code> where [data] is replaced by one of the examples below.</li>\n<li>Run <code>workout-diary.bat help</code> to get a list of possible commands</li>\n</ol>\n<h1 id=\"examples\">Examples</h1>\n<p>Add any of these examples to the commands explained above. <code>./workout-diary [example]</code> on Mac or Linux and <code>workout-diary.bat [example]</code> on Windows.</p>\n<h2 id=\"list\">List</h2>\n<p><strong>List the 5 latest workouts</strong></p>\n<pre><code>list workout 5\n</code></pre>\n<p><strong>List all exercises from 2012 to 2020</strong></p>\n<pre><code>list exercise 2012-01-01 2020-01-01\n</code></pre>\n<p><strong>List all exercises in the Bulking group</strong></p>\n<pre><code>list group \"Bulking\"\n</code></pre>\n<p><strong>List exercises that have an equipment</strong></p>\n<pre><code>list equipment 2012-04-25 2018-04-27\n</code></pre>\n<h2 id=\"add\">Add</h2>\n<p><strong>Add a workout with in April 2018 at 11:45AM with shape 8 and description \"Fin tur i skogen\"</strong></p>\n<pre><code>add workout 2018-04-25 11:45:23 8 \"Fin tur i skogen\"\n</code></pre>\n<p><strong>Add an exercise named Fjelltur with description \"Gå en tur i fjellet\"</strong></p>\n<pre><code>add exercise \"Fjelltur\" \"Gå en tur i fjellet\"\n</code></pre>\n<p><strong>Add an equipment named Spaserstokk with the description \"Stav som gir stabilitet\"</strong></p>\n<pre><code>add equipment \"Spaserstokk\" \"Stav som gir stabilitet\"\n</code></pre>\n<p><strong>Make a new group with name \"Rolig beilmuskulaturvedlikehold\"</strong></p>\n<pre><code>add group \"Rolig beilmuskulaturvedlikehold\"\n</code></pre>\n<h2 id=\"connect\">Connect</h2>\n<p><strong>Add exercise with id 1 to workout with id 3 with a duration of 23 minutes and 9 performance</strong></p>\n<pre><code>connect exercise 3 1 23 9\n</code></pre>\n<p><strong>Add equipment with id 1 to exercise id 1 that is 50 kilos and has 10 sets</strong></p>\n<pre><code>connect equipment 1 1 50 10\n</code></pre>\n<p><strong>Add equipment with id 3 to exercise with id 2</strong></p>\n<pre><code>connect group 2 3\n</code></pre>\n<h1 id=\"overviewofclasses\">Overview of classes:</h1>\n<p>Our classes are:</p>\n<ul>\n<li>ConnectionConfiguration</li>\n<li>ConnectionCredentials</li>\n<li>MainController</li>\n<li>Add</li>\n<li>Connect</li>\n<li>List</li>\n<li>ConnectionApp</li>\n</ul>\n<h2 id=\"maincontroller\">MainController</h2>\n<p>Handles command line input, finds the appropriate function for given parameters, passes information on to the other classes, and displays help information to the user.</p>\n<h2 id=\"connectioncredentials\">ConnectionCredentials</h2>\n<p>Reads the contents of the config.conf file, and finds the password, username and url for the database.</p>\n<h2 id=\"connectionconfiguration\">ConnectionConfiguration</h2>\n<p>Establishes a connection to a database with the given credentials.</p>\n<h2 id=\"add-1\">Add</h2>\n<p>Handles all cases where information needs to be added to the database. This class satisfies requirement number 1, and parts of 4. The class is able to add workouts, exercises, equipment and groups.</p>\n<h2 id=\"connect-1\">Connect</h2>\n<p>Handles all cases where there needs to be created a relation between two entities. This includes</p>\n<ul>\n<li>Adding an exercise to a workout</li>\n<li>Adding an exercise to a exercise group</li>\n<li>Adding equipment to an exercise</li>\n</ul>\n<h2 id=\"list-1\">List</h2>\n<p>Handles all cases where there needs to be displayed a list to the user. This class satisfies the requirement 2,3,5 and the remaining parts of 4. The class is able to display:</p>\n<ul>\n<li>The n latest workouts</li>\n<li>Workouts with a given exercise within a time period</li>\n<li>All exercises that are part of a group</li>\n<li>All exercises that uses an equipment</li>\n</ul>\n<h2 id=\"connectionapp\">ConnectionApp</h2>\n<p>Used for testing the application during development</p>\n<h1 id=\"usecases\">Use cases:</h1>\n<ol>\n<li>Registrere apparater, øvelser og treningsøkter med tilhørende data.<ul>\n<li>Løses ved å kjøre addEquipment(), addExercise(), addWorkout(), som legger inn en ny rad i databasen, med den informasjonen fremstilt av brukeren</li></ul></li>\n<li>Få opp informasjon om et antall  n  sist gjennomførte treningsøkter med notater, der n\nspesifiseres av brukeren.<ul>\n<li>Løses ved å kjøre listWorkouts(), som gjennomfører spørringer som filtrerer ut ønsket data, og viser denne til brukere.</li></ul></li>\n<li>For hver enkelt øvelse skal det være mulig å se en resultatlogg i et gitt tidsintervall spesifisert av brukeren.<ul>\n<li>Løses ved å kjøre listExercises(), som gjennomfører spørringer som filtrerer ut ønsket data gitt ved tidsintervall spesifisert av brukeren, og viser dette.</li></ul></li>\n<li>Lage øvelsegrupper og finne øvelser som er i samme gruppe.<ul>\n<li>Løses ved å kjøre addExerciseGroup() og listExerciseInGroup(), som lager en ny excercise gruppe og viser alle exercises som er klassifisert i en gruppe</li></ul></li>\n<li>Et valgfritt use case som dere selv bestemmer.<ul>\n<li>Løses ved å kjøre listExercisesWithEquipment(). Denne metoden gjennomfører spørring som viser hvilke exercise som bruker hvilke equipment, i et gitt tidsintervall.</li></ul></li>\n</ol>'),
	(6,'rosvik','ntnu-tfe4102-rapport-lab4','https://raw.githubusercontent.com/rosvik/ntnu-tfe4102-rapport-lab4/master/README.md','2018-11-07 12:30:30','![NTNU logo](https://qore.no/res/ntnu-logo-100.png)\n\n# Rapport i Krets og Digitalteknikk, vår 2017\n\nBasert på Lab nr. 4: 4-bits absoluttverdikrets\n\nSammarbeid mellom Jon Ryfetten og Johannes Røsvik\n\n## Sammendrag\nRapporten beskriver design og oppkobling av en 4-bit absoluttverdi krets. Kretsen er basert på XOR og AND porter. Formålet med kretsen var å kunne ta inn 4-bit i parallel. Tallet utgjorde et 4-bit binært tall på toerkomplement form. Kretsen skulle finne ut om dette var negativt og om det var skulle den konvertere det negative tallet til et positivt tall på toerkomplement form.\n\nDen første delen av raporten omhandler teorien bak designet av absoluttverdikretsen. Den påfølgende delen omhandler hvordan vi utførte den praktiske delen som å koblet opp kretsen labben. Deretter diskuter vi resultatene og gir en konklusjon.\n\nRapporten er basert på hva som ble gjort i lab 4 den 15. mars 2017 og forarbeidet før labben.\n','<p><img src=\"https://qore.no/res/ntnu-logo-100.png\" alt=\"NTNU logo\" /></p>\n<h1 id=\"rapportikretsogdigitalteknikkvr2017\">Rapport i Krets og Digitalteknikk, vår 2017</h1>\n<p>Basert på Lab nr. 4: 4-bits absoluttverdikrets</p>\n<p>Sammarbeid mellom Jon Ryfetten og Johannes Røsvik</p>\n<h2 id=\"sammendrag\">Sammendrag</h2>\n<p>Rapporten beskriver design og oppkobling av en 4-bit absoluttverdi krets. Kretsen er basert på XOR og AND porter. Formålet med kretsen var å kunne ta inn 4-bit i parallel. Tallet utgjorde et 4-bit binært tall på toerkomplement form. Kretsen skulle finne ut om dette var negativt og om det var skulle den konvertere det negative tallet til et positivt tall på toerkomplement form.</p>\n<p>Den første delen av raporten omhandler teorien bak designet av absoluttverdikretsen. Den påfølgende delen omhandler hvordan vi utførte den praktiske delen som å koblet opp kretsen labben. Deretter diskuter vi resultatene og gir en konklusjon.</p>\n<p>Rapporten er basert på hva som ble gjort i lab 4 den 15. mars 2017 og forarbeidet før labben.</p>'),
	(7,'rosvik','string.248.no','https://raw.githubusercontent.com/rosvik/string.248.no/master/README.md','2018-11-07 12:30:30','<img src=\"docs/248-logo.svg\" width=\"150\" alt=\"248\">\n\n\n# string.248.no\n\nThis is the project files for [string.248.no](https://string.248.no), a string analyzer on the web.\n\n![screenshot](docs/screenshot.png)\n\n## Installation\n\nThe website is avaliable at [string.248.no](https://string.248.no), but if you want to run the website on you own, download the project files and run this command to get all dependencies.\n\n```\ngit submodule update --init --recursive\n```\n\nOpen index.html in your favorite browser, and type some text in the input field.\n\n## Submodules\n\n* [js-crypto](https://github.com/jbt/js-crypto) - JavaScript Hash Functions\n* [jsSHA](https://github.com/Caligatio/jsSHA) - A pure JS SHA implementation\n','<p><img src=\"docs/248-logo.svg\" width=\"150\" alt=\"248\"></p>\n<h1 id=\"string248no\">string.248.no</h1>\n<p>This is the project files for <a href=\"https://string.248.no\">string.248.no</a>, a string analyzer on the web.</p>\n<p><img src=\"docs/screenshot.png\" alt=\"screenshot\" /></p>\n<h2 id=\"installation\">Installation</h2>\n<p>The website is avaliable at <a href=\"https://string.248.no\">string.248.no</a>, but if you want to run the website on you own, download the project files and run this command to get all dependencies.</p>\n<pre><code>git submodule update --init --recursive\n</code></pre>\n<p>Open index.html in your favorite browser, and type some text in the input field.</p>\n<h2 id=\"submodules\">Submodules</h2>\n<ul>\n<li><a href=\"https://github.com/jbt/js-crypto\">js-crypto</a> - JavaScript Hash Functions</li>\n<li><a href=\"https://github.com/Caligatio/jsSHA\">jsSHA</a> - A pure JS SHA implementation</li>\n</ul>'),
	(8,'dylanaraps','awesome-shell','https://raw.githubusercontent.com/dylanaraps/awesome-shell/master/README.md','2018-11-07 12:30:30','```\n █████╗ ██╗    ██╗███████╗███████╗ ██████╗ ███╗   ███╗███████╗\n██╔══██╗██║    ██║██╔════╝██╔════╝██╔═══██╗████╗ ████║██╔════╝\n███████║██║ █╗ ██║█████╗  ███████╗██║   ██║██╔████╔██║█████╗\n██╔══██║██║███╗██║██╔══╝  ╚════██║██║   ██║██║╚██╔╝██║██╔══╝\n██║  ██║╚███╔███╔╝███████╗███████║╚██████╔╝██║ ╚═╝ ██║███████╗\n╚═╝  ╚═╝ ╚══╝╚══╝ ╚══════╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝\n███████╗██╗  ██╗███████╗██╗     ██╗\n██╔════╝██║  ██║██╔════╝██║     ██║\n███████╗███████║█████╗  ██║     ██║\n╚════██║██╔══██║██╔══╝  ██║     ██║\n███████║██║  ██║███████╗███████╗███████╗\n╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝\n```\n\n# Awesome Shell [![Awesome][awesome-badge]][awesome-link]\n\nA curated list of awesome command-line frameworks, toolkits, guides and gizmos. Inspired by awesome-php. This awesome collection is also available on [Unix-Shell.ZEEF.com](https://unix-shell.zeef.com/caleb.xu).\n- [Shells](#shells)\n- [Command-Line Productivity](#command-line-productivity)\n- [Customization](#customization)\n- [For Developers](#for-developers)\n- [System Utilities](#system-utilities)\n- [Downloading and Serving](#downloading-and-serving)\n- [Multimedia and File Formats](#multimedia-and-file-formats)\n- [Applications](#applications)\n- [Games](#games)\n- [Shell Package Management](#shell-package-management)\n- [Shell Script Development](#shell-script-development)\n- [Guides](#guides)\n- [**Awesome Zsh**][awesome-zsh]&nbsp; [![Awesome][awesome-badge]][awesome-zsh]\n- [**Awesome Fish**][awesome-fish] [![Awesome][awesome-badge]][awesome-fish]\n- [Other Awesome Lists](#other-awesome-lists)\n\n## Shells\n\n*Choose your base shell.*\n\n* [bash](https://www.gnu.org/software/bash/) - GNU Project\'s shell (Bourne Again SHell)\n* [fish](https://fishshell.com) - Smart and user-friendly command line shell\n* [xiki](http://xiki.org) - Makes the shell console more friendly and powerful\n* [xonsh](https://xonsh.org) - Python-ish, BASHwards-looking shell language and command prompt\n* [zsh](http://www.zsh.org) - Powerful shell with scripting language\n\n## Command-Line Productivity\n\n*Search, bookmarks, multiplexing, and other tools that make your terminal experience more productive.*\n\n* [AdvancedNewFile](https://github.com/tanrax/terminal-AdvancedNewFile) - Fast creation of files and directories in a recursive way. Inspired by the Vim plugin.\n* [ag](https://github.com/ggreer/the_silver_searcher) - Super fast string search through a directory hierarchy\n* [aliases](https://github.com/sebglazebrook/aliases) - Contextual, dynamic, organized aliases for bash\n* [aliasme](https://github.com/Jintin/aliasme) - alias helper to change directory quickly\n* [autoenv](https://github.com/kennethreitz/autoenv) - Directory-based environments\n* [autojump](https://github.com/wting/autojump) - A cd command that learns - easily navigate directories from the command line\n* [bashhub](https://github.com/rcaloras/bashhub-client) - :cloud: Bash history in the cloud. Indexed and searchable.\n* [bashmarks](https://github.com/huyng/bashmarks) - Directory bookmarks for the shell\n* [bd](https://github.com/vigneshwaranr/bd) - Quickly go back to a parent directory\n* [boilr](https://github.com/tmrts/boilr) - A blazingly fast CLI tool for creating projects from boilerplate templates.\n* [boom](https://github.com/holman/boom) - Store links and snippets in the commandline\n* [borg](https://github.com/ok-borg/borg) - A terminal based search engine for bash commands\n* [Buku](https://github.com/jarun/Buku) - Powerful command-line bookmark manager\n* [byobu](http://byobu.co/) - Text-based window manager and terminal multiplexer\n* [commacd](https://github.com/shyiko/commacd) - A faster way to move around in Bash\n* [CloudClip](https://github.com/skywind3000/CloudClip) - Your own clipboard in the cloud, copy and paste text with gist between different systems\n* [desk](https://github.com/jamesob/desk) - A lightweight workspace manager for the shell\n* [direnv](https://github.com/direnv/direnv) - An environment switcher for the shell, compare with autoenv\n* [enhancd](https://github.com/b4b4r07/enhancd) - :rocket: A next-generation cd command with an interactive filter\n* [fasd](https://github.com/clvv/fasd) - Command-line productivity booster, offers quick access to files and directories\n* [foxy](https://github.com/s-p-k/foxy) - Plain text bookmarks for firefox and surf browsers.\n* [fz](https://github.com/changyuheng/fz) - Seamless fuzzy tab completion for z\n* [fzf](https://github.com/junegunn/fzf) - A command-line fuzzy finder\n* [googler](https://github.com/jarun/googler) - Google Search, Google Site Search, Google News from the terminal\n* [goto](https://github.com/iridakos/goto) - A shell utility for navigation to aliased directories supporting auto-completion\n* [has](https://github.com/kdabir/has) - `has` helps you check presence of various command line tools and their versions on path\n* [how2](https://github.com/santinic/how2) - `how2` finds the simplest way to do something in a unix shell. It\'s like `man`, but you can query it in natural language.\n* [hhighlighter](https://github.com/paoloantinori/hhighlighter) - Colorize words in a command output\n* [hr](https://github.com/LuRsT/hr) - `<hr />` for your terminal\n* [hss](https://github.com/six-ddc/hss) - An interactive parallel ssh client featuring autocomplete and asynchronous execution\n* [hstr](https://github.com/dvorka/hstr) - Bash History Suggest Box\n* [jump](https://github.com/gsamokovarov/jump) - Jump helps you navigate your file system faster by learning your habits.\n* [k](https://github.com/supercrabtree/k) - k is a Zsh script to make directory listings more readable, adding Git status, fileweight colors and rotting dates\n* [k alias](https://github.com/lingtalfi/k) - get kool aliases (and more) working with a simple one-liner\n* [lazy-cd](https://github.com/pedramamini/lazy-cd) - Simple bash commands for bookmarked navigation of the file system, complete with bash-completion.\n* [lf.sh](https://github.com/suewonjp/lf.sh) - Quickly search files with fewer typings and do many more (grepping, copying path to clipboard, etc)\n* [Lmod](http://lmod.readthedocs.io/en/latest/) - Lua-based Environment Modules that enhances Tcl-based modules while being backward compatible (compare to modules)\n* [marker](https://github.com/pindexis/marker) - Bookmark your shell commands\n* [modules](http://modules.sourceforge.net/) - Classical Tcl-based Environment Modules managing the shell environment (compare to Lmod, direnv, and autoenv)\n* [nnn](https://github.com/jarun/nnn) - File browser and disk usage analyzer with excellent desktop integration\n* [parallel](http://www.gnu.org/software/parallel/) - Build and execute shell command lines from standard input in parallel\n* [pathpicker](https://github.com/facebook/PathPicker) - Accepts inputs like grep, searches, git etc; allows selecting files from the result of the input, which you can then open or provide as argument to a command.\n* [percol](https://github.com/mooz/percol) - Adds flavor of interactive filtering to the traditional pipe concept of UNIX shell\n* [q](https://github.com/cal2195/q) - Vim like macro registers for your Bash and Zsh Shell\n* [qfc](https://github.com/pindexis/qfc) - File-completion widget for Bash and Zsh\n* [rg](https://github.com/BurntSushi/ripgrep) - ripgrep is a line oriented search tool that combines the usability of The Silver Searcher with the raw speed of GNU grep\n* [shell-history](https://github.com/Pawamoy/shell-history) - Visualize your shell usage with Highcharts\n* [SHML](https://github.com/odb/shml) - Style framework for the terminal (Shell Markup Language)\n* [slugify](https://github.com/benlinton/slugify) - Command that converts filenames and directories to a web friendly format\n* [sman](https://github.com/tokozedg/sman) - :bug: A command-line snippet manager\n* [spark](https://github.com/holman/spark) - ▁▂▃▅▂▇ in your shell\n* [Shark](https://github.com/fisherman/shark) - ▁▂▃▅ Sparkline Generator\n* [sheet](https://github.com/oscardelben/sheet) -  Text snippets for the command line\n* [spot](https://github.com/rauchg/spot) - Tiny file search utility\n- [snips](https://github.com/srijanshetty/snips) - Commandline tool to manage snippets of code.\n* [sshfs](https://github.com/osxfuse/sshfs) - A tool for mounting remote file systems over SSH\n* [sshrc](https://github.com/Russell91/sshrc) - Bring your .bashrc, .vimrc, etc. with you when you SSH\n* [sudocabulary](https://github.com/badarsh2/Sudocabulary) - Learn English Vocabulary from your terminal\n* [surfraw](http://surfraw.alioth.debian.org/) - browse specific site and search the web from your terminal without browser.\n* [thefuck](https://github.com/nvbn/thefuck) - Fix common shell mistakes by using an easy to remember command\n* [tldr](https://github.com/raylee/tldr) - A fully-functional bash client for tldr, simplified and community-driven man pages\n* [tmux](http://tmux.github.io/) - Amazing terminal multiplexer\n* [up](https://github.com/shannonmoeller/up) - Ascend directories by name or count; for bash, zsh, and fish.\n* [v](https://github.com/rupa/v) - z for vim.\n* [wemux](https://github.com/zolrath/wemux) - Multi-User Tmux Made Easy\n* [z](https://github.com/rupa/z) - z is the new j, yo\n\n## Customization\n\n*Custom prompts, color themes, etc.*\n\n* [base16-builder](https://github.com/base16-builder/base16-builder) - Base16-Builder\n* [bash-full-of-colors](https://github.com/slomkowski/bash-full-of-colors) - Powerful prompt with screen, tmux, git support and many more\n* [bash-git-prompt](https://github.com/magicmonty/bash-git-prompt) - An informative and fancy Bash prompt for Git users\n* [bash-powerline](https://github.com/riobard/bash-powerline) - Powerline-style Bash prompt in pure Bash script\n* [bashstrap](https://github.com/barryclark/bashstrap) - A quick way to spruce up OSX terminal\n* [bullet-train-oh-my-zsh-theme](https://github.com/caiogondim/bullet-train.zsh) - :bullettrain_side: An oh-my-zsh shell theme based on the Powerline Vim plugin\n* [emojify](https://github.com/mrowa44/emojify) Emoji on the command line :scream:\n* [flatui-terminal-theme](https://dribbble.com/shots/1021755-Flat-UI-Terminal-Theme) - Nicer colors for terminal\n* [git-prompt](https://github.com/lvv/git-prompt) - Bash prompt with Git, SVN and HG modules\n* [gittify](https://github.com/momeni/gittify) - A colorful Bash prompt + customized Git aliases\n* [Gogh - Color Scheme](https://github.com/Mayccoll/Gogh) - Color Scheme for Gnome Terminal\n* [liquidprompt](https://github.com/nojhan/liquidprompt) - A full-featured & carefully designed adaptive prompt for Bash & Zsh\n* [mysql-colorize](https://github.com/zpm-zsh/mysql-colorize) -  Colorization for mysql comand-line client\n* [oh-my-git](https://github.com/arialdomartini/oh-my-git) - An opinionated git prompt for bash and zsh\n* [sexy-bash-prompt](https://github.com/twolfson/sexy-bash-prompt) - Bash prompt with colors, Git statuses, and Git branches\n\n## For Developers\n\n*Command-line development, version control, and deployment.*\n\n* [bcal](https://github.com/jarun/bcal) - Byte CALculator for storage conversions and calculations\n* [bocker](https://github.com/p8952/bocker) - Docker implemented in 100 lines of bash\n* [cloc](https://github.com/AlDanial/cloc) - Count Lines of Code\n* [doclt](https://github.com/omgimanerd/doclt) - A command line interface to Digital Ocean\n* [dokku](https://github.com/dokku/dokku) - Docker powered mini-Heroku. The smallest PaaS implementation you\'ve ever seen.\n* [getopts](https://github.com/fisherman/getopts) - CLI parser for fish\n* [git-extra-commands](https://github.com/unixorn/git-extra-commands) - Many Git extra utilities. Churn, cut-branch, improved-merge and many more.\n* [git-extras](https://github.com/tj/git-extras) - Git utilities -- repo summary, repl, changelog population, author commit percentages and more\n* [git-open](https://github.com/paulirish/git-open) - Type `git open` to open the GitHub page or website for a repository in your browser\n* [git-semver](https://github.com/markchalloner/git-semver) - Git plugin for easing semantic versioning and changelog validation\n* [git-sh](https://github.com/rtomayko/git-sh) - A customized Bash environment suitable for Git work\n* [git-up](https://github.com/aanand/git-up) - Automatically rebase incoming changes instead of merging. Be polite!\n* [hub](https://github.com/github/hub) - hub helps you win at git.\n* [licins](https://github.com/dogoncouch/licins) - Insert commented software licenses into source code.\n* [mr](https://github.com/joeyh/myrepos) - Multiple Repository management tool\n* [overcommit](https://github.com/brigade/overcommit) - A fully configurable and extendable Git hook manager\n* [pre-commit](https://pre-commit.com) - A framework for managing and maintaining multi-language pre-commit hooks\n* [rebound](https://github.com/shobrook/rebound) - Instantly browse Stack Overflow results in your terminal when you get a compiler error\n* [repren](https://github.com/jlevy/repren) - Command-line search-and-replace and file-renaming swiss army knife\n* [slap](https://github.com/slap-editor/slap) - Sublime-like terminal-based text editor that runs on Node.js\n* [shipit](https://github.com/sapegin/shipit) - Minimalistic SSH deployment\n* [starring](https://github.com/ritz078/starring) - Automatically star the npm-packages that you are using on GitHub.\n* [tag](https://github.com/aykamko/tag) - Instantly jump to your ag matches.\n\n## System Utilities\n\n*OS-related tools, including system administration, system debugging, and file and process management.*\n\n* [atop](https://www.atoptool.nl) - ASCII full-screen performance monitor that is capable of reporting the activity of all processes\n* [catcli](https://github.com/deadc0de6/catcli) -  The command line catalog tool for your offline data\n* [ccat](https://github.com/jingweno/ccat) - ccat is the colorizing cat. It works similar to cat but displays content with syntax highlighting.\n* [colorex](https://bitbucket.org/linibou/colorex/wiki/Home) - Displays files or sdtin with pretty colors for matched patterns.\n* [progress](https://github.com/Xfennec/progress) - Linux tool to show progress for `cp`, `rm`, `dd`, and more...\n* [stronghold](https://github.com/alichtman/stronghold) - Easily configure MacOS security settings from the terminal.\n* [glances](https://github.com/nicolargo/glances) - Glances an Eye on your system\n* [goaccess](https://github.com/allinurl/goaccess) - GoAccess is a real-time web log analyzer and interactive viewer that runs in a terminal in \\*nix systems.\n* [histstat](https://github.com/vesche/histstat) - History for netstat\n* [htop](https://github.com/hishamhm/htop) - A ncurses based interactive process viewer which aims to be a better `top`\n* [lnav](http://lnav.org) - An advanced log file viewer for the small-scale\n* [logdissect](https://github.com/dogoncouch/logdissect) - CLI utility and Python API for analyzing log files and other data.\n* [ls++](https://github.com/trapd00r/ls--) - Colorized ls on steroids\n* [lsp](https://github.com/dborzov/lsp) - An improved `ls`, with file descriptions in plain language and intelligent file grouping\n* [mtr](https://github.com/traviscross/mtr) - The functionality of the \'traceroute\' and \'ping\' programs in a single network diagnostic tool.\n* [ncdu](https://dev.yorhel.nl/ncdu) - NCurses Disk Usage\n* [powertop](https://github.com/fenrus75/powertop) - Battery/Power usage and device stats monitoring command-line tool, with tune-up options.\n* [procdog](https://github.com/jlevy/procdog) - Lightweight command-line control of long-lived processes like servers\n* [quick-secure](https://github.com/marshyski/quick-secure) - Quickly secure and harden UNIX/Linux systems\n* [xiringuito](https://github.com/ivanilves/xiringuito) - SSH-based \"VPN for poors\"\n\n## Downloading and Serving\n\n*Self-hosted, lightweight servers and networking tools written in shell scripts.*\n\n* [aria2](https://github.com/aria2/aria2) - aria2 is a lightweight multi-protocol & multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, BitTorrent and Metalink\n* [balls](https://github.com/jneen/balls) - Bash on Balls\n* [bashttpd](https://github.com/avleen/bashttpd) - A web server written in Bash\n* [bitpocket](https://github.com/sickill/bitpocket) - \"DIY Dropbox\" or \"2-way directory (r)sync with proper deletion\"\n* [Dropbox-Uploader](https://github.com/andreafabrizi/Dropbox-Uploader) - Dropbox Uploader is a Bash script which can be used to upload, download, list or delete files from Dropbox\n* [httpie](https://github.com/jakubroztocil/httpie) - HTTPie is a command line HTTP client, a user-friendly cURL replacement\n* [HTTPLab](https://github.com/gchaincl/httplab) - The interactive web server, let you inspect HTTP requests and forge responses.\n* [ngincat](https://github.com/jaburns/ngincat) - Tiny Bash HTTP server using netcat\n* [resty](https://github.com/micha/resty) - Little command line REST client that you can use in pipelines\n* [youtube-dl](https://github.com/rg3/youtube-dl) - Small command-line program to download videos from YouTube.com and other video sites\n\n## Multimedia and File Formats\n\n*Tools for handling video and audio files.*\n\n* [adb-export](https://github.com/sromku/adb-export) - Export Android content providers to CSV format\n* [Android-Kitchen](https://github.com/dsixda/Android-Kitchen) - A text-based kitchen for Android ROM customization. Uses shell scripts and works with Cygwin/OS X/Linux\n* [Beets](https://github.com/beetbox/beets) - Music library manager and MusicBrainz tagger\n* [cmus](https://github.com/cmus/cmus) - Cross-platform cli audio player.\n* [gifgen](https://github.com/lukechilds/gifgen) - Simple high quality GIF encoding\n* [image-scraper](https://github.com/sananth12/ImageScraper) - A cool command line image scraper with a lot of features.\n* [imgp](https://github.com/jarun/imgp) - Blazing fast batch image resizer and rotator\n* [jq](https://github.com/stedolan/jq) - Sed for json data. You can use it to slice and filter and map and transform structured data\n* [mpv](https://mpv.io/) - Lets you play most audio and video formats (using ASCII characters) in the shell as well as in a GUI.\n* [nehm](https://github.com/bogem/nehm) - Console tool, which downloads, sets IDv3 tags and adds to your iTunes (if you use it) your SoundCloud likes in convenient way\n* [PiCAST](https://github.com/lanceseidman/PiCAST) - PiCAST turns your $35 Raspberry Pi in to a Chromecast like Device\n* [sejda](https://github.com/torakiki/sejda/) - Command line manipulation of PDF documents (split, merge, rotate, convert to jpg, extract text, etc)\n* [xidel](https://github.com/benibela/xidel/) - Cli tool to filter, map and create HTML/XML/JSON data with (Turing-complete) XPath and XQuery.\n* [xmlstarlet](http://xmlstar.sourceforge.net/) - Old but powerful tool for command-line XML formatting, filtering, and manipulation.\n* [fx](https://github.com/antonmedv/fx) - Command-line JSON processing tool by anononymus JavaScript functions\n\n## Applications\n\n*Command line-based applications or command line access to existing services.*\n\n* [ansiweather](https://github.com/fcambus/ansiweather) - Weather in your terminal, with ANSI colors and Unicode symbols\n* [bashblog](https://github.com/cfenollosa/bashblog) - A Bash script that handles blog posting\n* [choosealicense-cli](https://github.com/lord63/choosealicense-cli) - Choose an OSS license from the comfort of your terminal\n* [cointop](https://github.com/miguelmota/cointop) - The fastest and most interactive terminal based UI application for tracking cryptocurrencies\n* [facebook-cli](https://github.com/specious/facebook-cli) - Facebook command line tool\n* [fanyi](https://github.com/afc163/fanyi) - Translate English to Chinese in terminal\n* [gcalcli](https://github.com/insanum/gcalcli) - Google Calendar command line interface\n* [geeknote](https://github.com/VitaliyRodnenko/geeknote) - Command line evernote client\n* [haxor-news](https://github.com/donnemartin/haxor-news) - Browse Hacker News like a haxor\n* [hn-cli](https://github.com/rafaelrinaldi/hn-cli) - Browse Hacker News from the comfort of your Terminal\n* [iponmap](https://github.com/nogizhopaboroda/iponmap) - Draw point on world map using ip address\n* [isitup](https://github.com/lord63/isitup) - Check whether a website is up or down\n* [jrnl](https://github.com/maebert/jrnl) - A simple command line journal application that stores your journal in a plain text file\n* [ledger](https://github.com/ledger/ledger) - Command line accounting\n* [licen](https://github.com/lord63/licen) - Generate your license. Yet another lice, but implement with Jinja2 and docopt\n* [moviemon](https://github.com/iCHAIT/moviemon) - Everything about your movies within the command line.\n* [pockyt](https://github.com/arvindch/pockyt) - Read, Manage, and Automate your [Pocket](https://getpocket.com) collection.\n* [pushblast](https://github.com/alebcay/pushblast) - Get PushBullet notifications when a shell program exits\n* [pushbullet-bash](https://github.com/Red5d/pushbullet-bash) - Bash interface to the PushBullet API\n* [Reddit Terminal Viewer](https://github.com/michael-lazar/rtv) - Browse Reddit from your terminal\n* [SAWS](https://github.com/donnemartin/saws) - A Supercharged AWS CLI\n* [taskwarrior](https://taskwarrior.org/) - A command-line TODO list manager\n* [terjira](https://github.com/keepcosmos/terjira) - Command line power tool for Jira\n* [transfer.sh](https://transfer.sh/) — Quickly upload and share files from your shell\n* [vl](https://github.com/ellisonleao/vl) - URL link checker on text documents\n* [wego](https://github.com/schachmat/wego) - Weather app for the terminal\n* [whereami](https://github.com/rafaelrinaldi/whereami) - Get your geolocation information from the CLI\n* [wttr.in](https://github.com/chubin/wttr.in) - :partly_sunny: The right way to check the weather (curl wttr.in)\n\n## Games\n\n*All work and no play is a cruddy way to spend your day.*\n\n* [bash2048](https://github.com/mydzor/bash2048) - Bash implementation of 2048 game\n* [minesweeper](https://github.com/feherke/Bash-script/tree/master/minesweeper) - Bash implementation of minesweeper\n* [nudoku](https://github.com/jubalh/nudoku) - ncurses based sudoku game written in C\n* [piu-piu](https://github.com/vaniacer/piu-piu-SH) - Horizontal scroller game in bash with multiplayer mode!\n* [sedtris](https://github.com/uuner/sedtris) - Tetris in sed\n* [sed-scripts](https://github.com/aureliojargas/sed-scripts) - Arkanoid and Sokoban written using sed\n* [tty-solitaire](https://github.com/mpereira/tty-solitaire) - Play solitaire in your terminal!\n\n## Shell Package Management\n\n*Tools for managing multiple shell configurations. For zsh-specific tools, see the Zsh section.*\n\n* [bash-it](https://github.com/Bash-it/bash-it) - A community Bash framework\n* [basher](https://github.com/basherpm/basher) - A package manager for shell scripts\n* [bpkg](http://www.bpkg.sh/) - JavaScript has npm, Ruby has Gems, Python has pip and now Shell has bpkg\n* [dotdrop](https://github.com/deadc0de6/dotdrop) - Save your dotfiles once, deploy them everywhere\n* [dotfiler](https://github.com/svetlyak40wt/dotfiler) – Shell agnostic git based dotfiles package manager, written in Python.\n* [fresh](https://github.com/freshshell/fresh) - Keep your dotfiles fresh\n* [homeshick](https://github.com/andsens/homeshick) - Git dotfile synchronizer written in Bash\n* [shallow-backup](https://github.com/alichtman/shallow-backup) - Easily create lightweight documentation of installed packages, dotfiles, and more\n* [shundle](https://github.com/javier-lopez/shundle) - Plugin manager for shell scripts\n* [vcsh](https://github.com/RichiH/vcsh) - Config manager based on Git\n* [yadm](https://thelocehiliosan.github.io/yadm/) - Git-based dotfiles manager supporting encryption, alternates, and bootstrapping\n\n## Shell Script Development\n\n*Tools for writing, improving, or organizing Bash or other shell scripts*\n\n* [ansi](https://github.com/fidian/ansi) - ANSI escape codes in pure bash - change text color, position the cursor, much more\n* [assert.sh](https://github.com/lehmannro/assert.sh) - Bash unit testing framework\n* [bashful](https://github.com/plytophogy/bashful) - A collection of libraries to simplify writing Bash scripts\n* [Bashlets](https://bashlets.sh/) - A modular extensible toolbox for Bash\n* [bashmanager](https://github.com/lingtalfi/bashmanager) - mini bash framework for creating command line tools\n* [bashwithnails](https://github.com/mindaugasbarysas/bashwithnails) - a Bash framework written just for fun with testing, dependency management & packaging\n* [bash-language-server](https://github.com/mads-hartmann/bash-language-server) - [LSP](https://microsoft.github.io/language-server-protocol/)-based Bash language server\n* [bats](https://github.com/bats-core/bats-core) - Bash Automated Testing System\n* [crash](https://github.com/molovo/crash) - Proper error handling, exceptions and try/catch for ZSH\n* [Fishtape](https://github.com/fisherman/fishtape) - TAP producer and test harness for fish\n* [composure](https://github.com/erichs/composure) - Compose, document, version and organize your shell functions\n* [dispatch](https://github.com/Mosai/workshop/blob/master/doc/dispatch.md) - A command line argument parser in 50 lines of portable shell script.\n* [is.sh](https://github.com/qzb/is.sh) - An alternative for builtin test command, it will make your \"if\" statements pretty\n* [lumberjack](https://github.com/molovo/lumberjack) - A logging interface for shell scripts\n* [mo](https://github.com/tests-always-included/mo) - Mustache templates in pure bash\n* [optparse](https://github.com/nk412/optparse) - A BASH wrapper for getopts, for simple command line arguments.\n* [rerun](https://github.com/rerun/rerun) - A modular shell automation framework to organize your keeper scripts\n* [revolver](https://github.com/molovo/revolver) - A reusable progress spinner for shell scripts\n* [phases](https://github.com/sorokine/phases) - Minimally invasive bash preprocessor, select sections of your script to run\n* [semver_bash](https://github.com/cloudflare/semver_bash) - Semantic Versioning in Bash\n* [sh-semver](https://github.com/qzb/sh-semver) - Semver tool for bash - finds versions matching to specified rules\n* [shellcheck](https://github.com/koalaman/shellcheck) - Static analysis tool for shell scripts\n* [shellfire](https://github.com/shellfire-dev/shellfire) -  A repository of namespaced, composable shell (bash, sh and dash) function libraries\n* [shpec](https://github.com/rylnd/shpec) - A shell testing framework\n* [shutit](https://ianmiell.github.io/shutit/) - Automation framework based on bash and pexpect\n* [sub](https://github.com/basecamp/sub) - A delicious way to organize programs\n* [ts](https://github.com/thinkerbot/ts) - A shell test script\n* [urchin](https://github.com/tlevine/urchin) - An idiomatic shell testing framework that uses only shell commands\n* [shunit2](https://github.com/kward/shunit2) - A unit test framework for Bash scripts with a flavour of JUnit/PyUnit.\n* [rebash](https://github.com/jandob/rebash) - Scripting library/framework. Features: imports, exceptions, doc-tests ...\n* [zunit](https://github.com/zunit-zsh/zunit) - A powerful unit testing framework for ZSH\n\n# Guides\n\n* [Bash Hackers Wiki](http://wiki.bash-hackers.org/)\n* [Greg Wooledge\'s (aka \"greycat\") wiki](http://mywiki.wooledge.org).\n  Specifically [Bash Guide](http://mywiki.wooledge.org/BashGuide), [Bash FAQ](http://mywiki.wooledge.org/BashFAQ) and [Bash Pitfalls](http://mywiki.wooledge.org/BashPitfalls)\n* [Google\'s Shell Style Guide](https://google.github.io/styleguide/shell.xml)\n* [The Linux Documentation Project: Bash Programming - Intro/How-to](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html#toc)\n* [The Linux Documentation Project: Advanced Bash Scripting Guide](http://www.tldp.org/LDP/abs/html/)\n* [WikiBooks: Bash Shell Scripting](https://en.wikibooks.org/wiki/Bash_Shell_Scripting)\n* [Use the Unofficial Bash Strict Mode (Unless You Looove Debugging)](http://redsymbol.net/articles/unofficial-bash-strict-mode/)\n* [The Art of Command Line](https://github.com/jlevy/the-art-of-command-line)\n* [Learn Enough Command Line to Be Dangerous](https://www.learnenough.com/command-line-tutorial)\n* [A guide to learn bash](https://github.com/Idnan/bash-guide)\n\n# Other Awesome Lists\n\nOther amazingly awesome lists can be found in [awesome-awesome](https://github.com/emijrp/awesome-awesome) and [awesome-awesomeness](https://github.com/bayandin/awesome-awesomeness).\n\n### See also\n\n* [awesome-cli-apps](https://github.com/agarrharr/awesome-cli-apps)\n* [awesome-fish][awesome-fish]\n* [awesome-zsh][awesome-zsh]\n* [terminals-are-sexy](https://github.com/k4m4/terminals-are-sexy)\n\n[awesome-badge]: https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\n[awesome-fish]: https://github.com/fisherman/awesome-fish-shell\n[awesome-link]: https://github.com/sindresorhus/awesome\n[awesome-zsh]: https://github.com/unixorn/awesome-zsh-plugins\n','<pre><code> █████╗ ██╗    ██╗███████╗███████╗ ██████╗ ███╗   ███╗███████╗\n██╔══██╗██║    ██║██╔════╝██╔════╝██╔═══██╗████╗ ████║██╔════╝\n███████║██║ █╗ ██║█████╗  ███████╗██║   ██║██╔████╔██║█████╗\n██╔══██║██║███╗██║██╔══╝  ╚════██║██║   ██║██║╚██╔╝██║██╔══╝\n██║  ██║╚███╔███╔╝███████╗███████║╚██████╔╝██║ ╚═╝ ██║███████╗\n╚═╝  ╚═╝ ╚══╝╚══╝ ╚══════╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝\n███████╗██╗  ██╗███████╗██╗     ██╗\n██╔════╝██║  ██║██╔════╝██║     ██║\n███████╗███████║█████╗  ██║     ██║\n╚════██║██╔══██║██╔══╝  ██║     ██║\n███████║██║  ██║███████╗███████╗███████╗\n╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝\n</code></pre>\n<h1 id=\"awesomeshellawesomeawesomebadgeawesomelink\">Awesome Shell <a href=\"https://github.com/sindresorhus/awesome\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\" /></a></h1>\n<p>A curated list of awesome command-line frameworks, toolkits, guides and gizmos. Inspired by awesome-php. This awesome collection is also available on <a href=\"https://unix-shell.zeef.com/caleb.xu\">Unix-Shell.ZEEF.com</a>.</p>\n<ul>\n<li><a href=\"#shells\">Shells</a></li>\n<li><a href=\"#command-line-productivity\">Command-Line Productivity</a></li>\n<li><a href=\"#customization\">Customization</a></li>\n<li><a href=\"#for-developers\">For Developers</a></li>\n<li><a href=\"#system-utilities\">System Utilities</a></li>\n<li><a href=\"#downloading-and-serving\">Downloading and Serving</a></li>\n<li><a href=\"#multimedia-and-file-formats\">Multimedia and File Formats</a></li>\n<li><a href=\"#applications\">Applications</a></li>\n<li><a href=\"#games\">Games</a></li>\n<li><a href=\"#shell-package-management\">Shell Package Management</a></li>\n<li><a href=\"#shell-script-development\">Shell Script Development</a></li>\n<li><a href=\"#guides\">Guides</a></li>\n<li><a href=\"https://github.com/unixorn/awesome-zsh-plugins\"><strong>Awesome Zsh</strong></a>&nbsp; <a href=\"https://github.com/unixorn/awesome-zsh-plugins\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\" /></a></li>\n<li><a href=\"https://github.com/fisherman/awesome-fish-shell\"><strong>Awesome Fish</strong></a> <a href=\"https://github.com/fisherman/awesome-fish-shell\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\" /></a></li>\n<li><a href=\"#other-awesome-lists\">Other Awesome Lists</a></li>\n</ul>\n<h2 id=\"shells\">Shells</h2>\n<p><em>Choose your base shell.</em></p>\n<ul>\n<li><a href=\"https://www.gnu.org/software/bash/\">bash</a> - GNU Project\'s shell (Bourne Again SHell)</li>\n<li><a href=\"https://fishshell.com\">fish</a> - Smart and user-friendly command line shell</li>\n<li><a href=\"http://xiki.org\">xiki</a> - Makes the shell console more friendly and powerful</li>\n<li><a href=\"https://xonsh.org\">xonsh</a> - Python-ish, BASHwards-looking shell language and command prompt</li>\n<li><a href=\"http://www.zsh.org\">zsh</a> - Powerful shell with scripting language</li>\n</ul>\n<h2 id=\"commandlineproductivity\">Command-Line Productivity</h2>\n<p><em>Search, bookmarks, multiplexing, and other tools that make your terminal experience more productive.</em></p>\n<ul>\n<li><a href=\"https://github.com/tanrax/terminal-AdvancedNewFile\">AdvancedNewFile</a> - Fast creation of files and directories in a recursive way. Inspired by the Vim plugin.</li>\n<li><a href=\"https://github.com/ggreer/the_silver_searcher\">ag</a> - Super fast string search through a directory hierarchy</li>\n<li><a href=\"https://github.com/sebglazebrook/aliases\">aliases</a> - Contextual, dynamic, organized aliases for bash</li>\n<li><a href=\"https://github.com/Jintin/aliasme\">aliasme</a> - alias helper to change directory quickly</li>\n<li><a href=\"https://github.com/kennethreitz/autoenv\">autoenv</a> - Directory-based environments</li>\n<li><a href=\"https://github.com/wting/autojump\">autojump</a> - A cd command that learns - easily navigate directories from the command line</li>\n<li><a href=\"https://github.com/rcaloras/bashhub-client\">bashhub</a> - :cloud: Bash history in the cloud. Indexed and searchable.</li>\n<li><a href=\"https://github.com/huyng/bashmarks\">bashmarks</a> - Directory bookmarks for the shell</li>\n<li><a href=\"https://github.com/vigneshwaranr/bd\">bd</a> - Quickly go back to a parent directory</li>\n<li><a href=\"https://github.com/tmrts/boilr\">boilr</a> - A blazingly fast CLI tool for creating projects from boilerplate templates.</li>\n<li><a href=\"https://github.com/holman/boom\">boom</a> - Store links and snippets in the commandline</li>\n<li><a href=\"https://github.com/ok-borg/borg\">borg</a> - A terminal based search engine for bash commands</li>\n<li><a href=\"https://github.com/jarun/Buku\">Buku</a> - Powerful command-line bookmark manager</li>\n<li><a href=\"http://byobu.co/\">byobu</a> - Text-based window manager and terminal multiplexer</li>\n<li><a href=\"https://github.com/shyiko/commacd\">commacd</a> - A faster way to move around in Bash</li>\n<li><a href=\"https://github.com/skywind3000/CloudClip\">CloudClip</a> - Your own clipboard in the cloud, copy and paste text with gist between different systems</li>\n<li><a href=\"https://github.com/jamesob/desk\">desk</a> - A lightweight workspace manager for the shell</li>\n<li><a href=\"https://github.com/direnv/direnv\">direnv</a> - An environment switcher for the shell, compare with autoenv</li>\n<li><a href=\"https://github.com/b4b4r07/enhancd\">enhancd</a> - :rocket: A next-generation cd command with an interactive filter</li>\n<li><a href=\"https://github.com/clvv/fasd\">fasd</a> - Command-line productivity booster, offers quick access to files and directories</li>\n<li><a href=\"https://github.com/s-p-k/foxy\">foxy</a> - Plain text bookmarks for firefox and surf browsers.</li>\n<li><a href=\"https://github.com/changyuheng/fz\">fz</a> - Seamless fuzzy tab completion for z</li>\n<li><a href=\"https://github.com/junegunn/fzf\">fzf</a> - A command-line fuzzy finder</li>\n<li><a href=\"https://github.com/jarun/googler\">googler</a> - Google Search, Google Site Search, Google News from the terminal</li>\n<li><a href=\"https://github.com/iridakos/goto\">goto</a> - A shell utility for navigation to aliased directories supporting auto-completion</li>\n<li><a href=\"https://github.com/kdabir/has\">has</a> - <code>has</code> helps you check presence of various command line tools and their versions on path</li>\n<li><a href=\"https://github.com/santinic/how2\">how2</a> - <code>how2</code> finds the simplest way to do something in a unix shell. It\'s like <code>man</code>, but you can query it in natural language.</li>\n<li><a href=\"https://github.com/paoloantinori/hhighlighter\">hhighlighter</a> - Colorize words in a command output</li>\n<li><a href=\"https://github.com/LuRsT/hr\">hr</a> - <code>&lt;hr /&gt;</code> for your terminal</li>\n<li><a href=\"https://github.com/six-ddc/hss\">hss</a> - An interactive parallel ssh client featuring autocomplete and asynchronous execution</li>\n<li><a href=\"https://github.com/dvorka/hstr\">hstr</a> - Bash History Suggest Box</li>\n<li><a href=\"https://github.com/gsamokovarov/jump\">jump</a> - Jump helps you navigate your file system faster by learning your habits.</li>\n<li><a href=\"https://github.com/supercrabtree/k\">k</a> - k is a Zsh script to make directory listings more readable, adding Git status, fileweight colors and rotting dates</li>\n<li><a href=\"https://github.com/lingtalfi/k\">k alias</a> - get kool aliases (and more) working with a simple one-liner</li>\n<li><a href=\"https://github.com/pedramamini/lazy-cd\">lazy-cd</a> - Simple bash commands for bookmarked navigation of the file system, complete with bash-completion.</li>\n<li><a href=\"https://github.com/suewonjp/lf.sh\">lf.sh</a> - Quickly search files with fewer typings and do many more (grepping, copying path to clipboard, etc)</li>\n<li><a href=\"http://lmod.readthedocs.io/en/latest/\">Lmod</a> - Lua-based Environment Modules that enhances Tcl-based modules while being backward compatible (compare to modules)</li>\n<li><a href=\"https://github.com/pindexis/marker\">marker</a> - Bookmark your shell commands</li>\n<li><a href=\"http://modules.sourceforge.net/\">modules</a> - Classical Tcl-based Environment Modules managing the shell environment (compare to Lmod, direnv, and autoenv)</li>\n<li><a href=\"https://github.com/jarun/nnn\">nnn</a> - File browser and disk usage analyzer with excellent desktop integration</li>\n<li><a href=\"http://www.gnu.org/software/parallel/\">parallel</a> - Build and execute shell command lines from standard input in parallel</li>\n<li><a href=\"https://github.com/facebook/PathPicker\">pathpicker</a> - Accepts inputs like grep, searches, git etc; allows selecting files from the result of the input, which you can then open or provide as argument to a command.</li>\n<li><a href=\"https://github.com/mooz/percol\">percol</a> - Adds flavor of interactive filtering to the traditional pipe concept of UNIX shell</li>\n<li><a href=\"https://github.com/cal2195/q\">q</a> - Vim like macro registers for your Bash and Zsh Shell</li>\n<li><a href=\"https://github.com/pindexis/qfc\">qfc</a> - File-completion widget for Bash and Zsh</li>\n<li><a href=\"https://github.com/BurntSushi/ripgrep\">rg</a> - ripgrep is a line oriented search tool that combines the usability of The Silver Searcher with the raw speed of GNU grep</li>\n<li><a href=\"https://github.com/Pawamoy/shell-history\">shell-history</a> - Visualize your shell usage with Highcharts</li>\n<li><a href=\"https://github.com/odb/shml\">SHML</a> - Style framework for the terminal (Shell Markup Language)</li>\n<li><a href=\"https://github.com/benlinton/slugify\">slugify</a> - Command that converts filenames and directories to a web friendly format</li>\n<li><a href=\"https://github.com/tokozedg/sman\">sman</a> - :bug: A command-line snippet manager</li>\n<li><a href=\"https://github.com/holman/spark\">spark</a> - ▁▂▃▅▂▇ in your shell</li>\n<li><a href=\"https://github.com/fisherman/shark\">Shark</a> - ▁▂▃▅ Sparkline Generator</li>\n<li><a href=\"https://github.com/oscardelben/sheet\">sheet</a> -  Text snippets for the command line</li>\n<li><a href=\"https://github.com/rauchg/spot\">spot</a> - Tiny file search utility</li>\n<li><a href=\"https://github.com/srijanshetty/snips\">snips</a> - Commandline tool to manage snippets of code.</li>\n<li><a href=\"https://github.com/osxfuse/sshfs\">sshfs</a> - A tool for mounting remote file systems over SSH</li>\n<li><a href=\"https://github.com/Russell91/sshrc\">sshrc</a> - Bring your .bashrc, .vimrc, etc. with you when you SSH</li>\n<li><a href=\"https://github.com/badarsh2/Sudocabulary\">sudocabulary</a> - Learn English Vocabulary from your terminal</li>\n<li><a href=\"http://surfraw.alioth.debian.org/\">surfraw</a> - browse specific site and search the web from your terminal without browser.</li>\n<li><a href=\"https://github.com/nvbn/thefuck\">thefuck</a> - Fix common shell mistakes by using an easy to remember command</li>\n<li><a href=\"https://github.com/raylee/tldr\">tldr</a> - A fully-functional bash client for tldr, simplified and community-driven man pages</li>\n<li><a href=\"http://tmux.github.io/\">tmux</a> - Amazing terminal multiplexer</li>\n<li><a href=\"https://github.com/shannonmoeller/up\">up</a> - Ascend directories by name or count; for bash, zsh, and fish.</li>\n<li><a href=\"https://github.com/rupa/v\">v</a> - z for vim.</li>\n<li><a href=\"https://github.com/zolrath/wemux\">wemux</a> - Multi-User Tmux Made Easy</li>\n<li><a href=\"https://github.com/rupa/z\">z</a> - z is the new j, yo</li>\n</ul>\n<h2 id=\"customization\">Customization</h2>\n<p><em>Custom prompts, color themes, etc.</em></p>\n<ul>\n<li><a href=\"https://github.com/base16-builder/base16-builder\">base16-builder</a> - Base16-Builder</li>\n<li><a href=\"https://github.com/slomkowski/bash-full-of-colors\">bash-full-of-colors</a> - Powerful prompt with screen, tmux, git support and many more</li>\n<li><a href=\"https://github.com/magicmonty/bash-git-prompt\">bash-git-prompt</a> - An informative and fancy Bash prompt for Git users</li>\n<li><a href=\"https://github.com/riobard/bash-powerline\">bash-powerline</a> - Powerline-style Bash prompt in pure Bash script</li>\n<li><a href=\"https://github.com/barryclark/bashstrap\">bashstrap</a> - A quick way to spruce up OSX terminal</li>\n<li><a href=\"https://github.com/caiogondim/bullet-train.zsh\">bullet-train-oh-my-zsh-theme</a> - :bullettrain_side: An oh-my-zsh shell theme based on the Powerline Vim plugin</li>\n<li><a href=\"https://github.com/mrowa44/emojify\">emojify</a> Emoji on the command line :scream:</li>\n<li><a href=\"https://dribbble.com/shots/1021755-Flat-UI-Terminal-Theme\">flatui-terminal-theme</a> - Nicer colors for terminal</li>\n<li><a href=\"https://github.com/lvv/git-prompt\">git-prompt</a> - Bash prompt with Git, SVN and HG modules</li>\n<li><a href=\"https://github.com/momeni/gittify\">gittify</a> - A colorful Bash prompt + customized Git aliases</li>\n<li><a href=\"https://github.com/Mayccoll/Gogh\">Gogh - Color Scheme</a> - Color Scheme for Gnome Terminal</li>\n<li><a href=\"https://github.com/nojhan/liquidprompt\">liquidprompt</a> - A full-featured &amp; carefully designed adaptive prompt for Bash &amp; Zsh</li>\n<li><a href=\"https://github.com/zpm-zsh/mysql-colorize\">mysql-colorize</a> -  Colorization for mysql comand-line client</li>\n<li><a href=\"https://github.com/arialdomartini/oh-my-git\">oh-my-git</a> - An opinionated git prompt for bash and zsh</li>\n<li><a href=\"https://github.com/twolfson/sexy-bash-prompt\">sexy-bash-prompt</a> - Bash prompt with colors, Git statuses, and Git branches</li>\n</ul>\n<h2 id=\"fordevelopers\">For Developers</h2>\n<p><em>Command-line development, version control, and deployment.</em></p>\n<ul>\n<li><a href=\"https://github.com/jarun/bcal\">bcal</a> - Byte CALculator for storage conversions and calculations</li>\n<li><a href=\"https://github.com/p8952/bocker\">bocker</a> - Docker implemented in 100 lines of bash</li>\n<li><a href=\"https://github.com/AlDanial/cloc\">cloc</a> - Count Lines of Code</li>\n<li><a href=\"https://github.com/omgimanerd/doclt\">doclt</a> - A command line interface to Digital Ocean</li>\n<li><a href=\"https://github.com/dokku/dokku\">dokku</a> - Docker powered mini-Heroku. The smallest PaaS implementation you\'ve ever seen.</li>\n<li><a href=\"https://github.com/fisherman/getopts\">getopts</a> - CLI parser for fish</li>\n<li><a href=\"https://github.com/unixorn/git-extra-commands\">git-extra-commands</a> - Many Git extra utilities. Churn, cut-branch, improved-merge and many more.</li>\n<li><a href=\"https://github.com/tj/git-extras\">git-extras</a> - Git utilities -- repo summary, repl, changelog population, author commit percentages and more</li>\n<li><a href=\"https://github.com/paulirish/git-open\">git-open</a> - Type <code>git open</code> to open the GitHub page or website for a repository in your browser</li>\n<li><a href=\"https://github.com/markchalloner/git-semver\">git-semver</a> - Git plugin for easing semantic versioning and changelog validation</li>\n<li><a href=\"https://github.com/rtomayko/git-sh\">git-sh</a> - A customized Bash environment suitable for Git work</li>\n<li><a href=\"https://github.com/aanand/git-up\">git-up</a> - Automatically rebase incoming changes instead of merging. Be polite!</li>\n<li><a href=\"https://github.com/github/hub\">hub</a> - hub helps you win at git.</li>\n<li><a href=\"https://github.com/dogoncouch/licins\">licins</a> - Insert commented software licenses into source code.</li>\n<li><a href=\"https://github.com/joeyh/myrepos\">mr</a> - Multiple Repository management tool</li>\n<li><a href=\"https://github.com/brigade/overcommit\">overcommit</a> - A fully configurable and extendable Git hook manager</li>\n<li><a href=\"https://pre-commit.com\">pre-commit</a> - A framework for managing and maintaining multi-language pre-commit hooks</li>\n<li><a href=\"https://github.com/shobrook/rebound\">rebound</a> - Instantly browse Stack Overflow results in your terminal when you get a compiler error</li>\n<li><a href=\"https://github.com/jlevy/repren\">repren</a> - Command-line search-and-replace and file-renaming swiss army knife</li>\n<li><a href=\"https://github.com/slap-editor/slap\">slap</a> - Sublime-like terminal-based text editor that runs on Node.js</li>\n<li><a href=\"https://github.com/sapegin/shipit\">shipit</a> - Minimalistic SSH deployment</li>\n<li><a href=\"https://github.com/ritz078/starring\">starring</a> - Automatically star the npm-packages that you are using on GitHub.</li>\n<li><a href=\"https://github.com/aykamko/tag\">tag</a> - Instantly jump to your ag matches.</li>\n</ul>\n<h2 id=\"systemutilities\">System Utilities</h2>\n<p><em>OS-related tools, including system administration, system debugging, and file and process management.</em></p>\n<ul>\n<li><a href=\"https://www.atoptool.nl\">atop</a> - ASCII full-screen performance monitor that is capable of reporting the activity of all processes</li>\n<li><a href=\"https://github.com/deadc0de6/catcli\">catcli</a> -  The command line catalog tool for your offline data</li>\n<li><a href=\"https://github.com/jingweno/ccat\">ccat</a> - ccat is the colorizing cat. It works similar to cat but displays content with syntax highlighting.</li>\n<li><a href=\"https://bitbucket.org/linibou/colorex/wiki/Home\">colorex</a> - Displays files or sdtin with pretty colors for matched patterns.</li>\n<li><a href=\"https://github.com/Xfennec/progress\">progress</a> - Linux tool to show progress for <code>cp</code>, <code>rm</code>, <code>dd</code>, and more…</li>\n<li><a href=\"https://github.com/alichtman/stronghold\">stronghold</a> - Easily configure MacOS security settings from the terminal.</li>\n<li><a href=\"https://github.com/nicolargo/glances\">glances</a> - Glances an Eye on your system</li>\n<li><a href=\"https://github.com/allinurl/goaccess\">goaccess</a> - GoAccess is a real-time web log analyzer and interactive viewer that runs in a terminal in *nix systems.</li>\n<li><a href=\"https://github.com/vesche/histstat\">histstat</a> - History for netstat</li>\n<li><a href=\"https://github.com/hishamhm/htop\">htop</a> - A ncurses based interactive process viewer which aims to be a better <code>top</code></li>\n<li><a href=\"http://lnav.org\">lnav</a> - An advanced log file viewer for the small-scale</li>\n<li><a href=\"https://github.com/dogoncouch/logdissect\">logdissect</a> - CLI utility and Python API for analyzing log files and other data.</li>\n<li><a href=\"https://github.com/trapd00r/ls--\">ls++</a> - Colorized ls on steroids</li>\n<li><a href=\"https://github.com/dborzov/lsp\">lsp</a> - An improved <code>ls</code>, with file descriptions in plain language and intelligent file grouping</li>\n<li><a href=\"https://github.com/traviscross/mtr\">mtr</a> - The functionality of the \'traceroute\' and \'ping\' programs in a single network diagnostic tool.</li>\n<li><a href=\"https://dev.yorhel.nl/ncdu\">ncdu</a> - NCurses Disk Usage</li>\n<li><a href=\"https://github.com/fenrus75/powertop\">powertop</a> - Battery/Power usage and device stats monitoring command-line tool, with tune-up options.</li>\n<li><a href=\"https://github.com/jlevy/procdog\">procdog</a> - Lightweight command-line control of long-lived processes like servers</li>\n<li><a href=\"https://github.com/marshyski/quick-secure\">quick-secure</a> - Quickly secure and harden UNIX/Linux systems</li>\n<li><a href=\"https://github.com/ivanilves/xiringuito\">xiringuito</a> - SSH-based \"VPN for poors\"</li>\n</ul>\n<h2 id=\"downloadingandserving\">Downloading and Serving</h2>\n<p><em>Self-hosted, lightweight servers and networking tools written in shell scripts.</em></p>\n<ul>\n<li><a href=\"https://github.com/aria2/aria2\">aria2</a> - aria2 is a lightweight multi-protocol &amp; multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, BitTorrent and Metalink</li>\n<li><a href=\"https://github.com/jneen/balls\">balls</a> - Bash on Balls</li>\n<li><a href=\"https://github.com/avleen/bashttpd\">bashttpd</a> - A web server written in Bash</li>\n<li><a href=\"https://github.com/sickill/bitpocket\">bitpocket</a> - \"DIY Dropbox\" or \"2-way directory (r)sync with proper deletion\"</li>\n<li><a href=\"https://github.com/andreafabrizi/Dropbox-Uploader\">Dropbox-Uploader</a> - Dropbox Uploader is a Bash script which can be used to upload, download, list or delete files from Dropbox</li>\n<li><a href=\"https://github.com/jakubroztocil/httpie\">httpie</a> - HTTPie is a command line HTTP client, a user-friendly cURL replacement</li>\n<li><a href=\"https://github.com/gchaincl/httplab\">HTTPLab</a> - The interactive web server, let you inspect HTTP requests and forge responses.</li>\n<li><a href=\"https://github.com/jaburns/ngincat\">ngincat</a> - Tiny Bash HTTP server using netcat</li>\n<li><a href=\"https://github.com/micha/resty\">resty</a> - Little command line REST client that you can use in pipelines</li>\n<li><a href=\"https://github.com/rg3/youtube-dl\">youtube-dl</a> - Small command-line program to download videos from YouTube.com and other video sites</li>\n</ul>\n<h2 id=\"multimediaandfileformats\">Multimedia and File Formats</h2>\n<p><em>Tools for handling video and audio files.</em></p>\n<ul>\n<li><a href=\"https://github.com/sromku/adb-export\">adb-export</a> - Export Android content providers to CSV format</li>\n<li><a href=\"https://github.com/dsixda/Android-Kitchen\">Android-Kitchen</a> - A text-based kitchen for Android ROM customization. Uses shell scripts and works with Cygwin/OS X/Linux</li>\n<li><a href=\"https://github.com/beetbox/beets\">Beets</a> - Music library manager and MusicBrainz tagger</li>\n<li><a href=\"https://github.com/cmus/cmus\">cmus</a> - Cross-platform cli audio player.</li>\n<li><a href=\"https://github.com/lukechilds/gifgen\">gifgen</a> - Simple high quality GIF encoding</li>\n<li><a href=\"https://github.com/sananth12/ImageScraper\">image-scraper</a> - A cool command line image scraper with a lot of features.</li>\n<li><a href=\"https://github.com/jarun/imgp\">imgp</a> - Blazing fast batch image resizer and rotator</li>\n<li><a href=\"https://github.com/stedolan/jq\">jq</a> - Sed for json data. You can use it to slice and filter and map and transform structured data</li>\n<li><a href=\"https://mpv.io/\">mpv</a> - Lets you play most audio and video formats (using ASCII characters) in the shell as well as in a GUI.</li>\n<li><a href=\"https://github.com/bogem/nehm\">nehm</a> - Console tool, which downloads, sets IDv3 tags and adds to your iTunes (if you use it) your SoundCloud likes in convenient way</li>\n<li><a href=\"https://github.com/lanceseidman/PiCAST\">PiCAST</a> - PiCAST turns your $35 Raspberry Pi in to a Chromecast like Device</li>\n<li><a href=\"https://github.com/torakiki/sejda/\">sejda</a> - Command line manipulation of PDF documents (split, merge, rotate, convert to jpg, extract text, etc)</li>\n<li><a href=\"https://github.com/benibela/xidel/\">xidel</a> - Cli tool to filter, map and create HTML/XML/JSON data with (Turing-complete) XPath and XQuery.</li>\n<li><a href=\"http://xmlstar.sourceforge.net/\">xmlstarlet</a> - Old but powerful tool for command-line XML formatting, filtering, and manipulation.</li>\n<li><a href=\"https://github.com/antonmedv/fx\">fx</a> - Command-line JSON processing tool by anononymus JavaScript functions</li>\n</ul>\n<h2 id=\"applications\">Applications</h2>\n<p><em>Command line-based applications or command line access to existing services.</em></p>\n<ul>\n<li><a href=\"https://github.com/fcambus/ansiweather\">ansiweather</a> - Weather in your terminal, with ANSI colors and Unicode symbols</li>\n<li><a href=\"https://github.com/cfenollosa/bashblog\">bashblog</a> - A Bash script that handles blog posting</li>\n<li><a href=\"https://github.com/lord63/choosealicense-cli\">choosealicense-cli</a> - Choose an OSS license from the comfort of your terminal</li>\n<li><a href=\"https://github.com/miguelmota/cointop\">cointop</a> - The fastest and most interactive terminal based UI application for tracking cryptocurrencies</li>\n<li><a href=\"https://github.com/specious/facebook-cli\">facebook-cli</a> - Facebook command line tool</li>\n<li><a href=\"https://github.com/afc163/fanyi\">fanyi</a> - Translate English to Chinese in terminal</li>\n<li><a href=\"https://github.com/insanum/gcalcli\">gcalcli</a> - Google Calendar command line interface</li>\n<li><a href=\"https://github.com/VitaliyRodnenko/geeknote\">geeknote</a> - Command line evernote client</li>\n<li><a href=\"https://github.com/donnemartin/haxor-news\">haxor-news</a> - Browse Hacker News like a haxor</li>\n<li><a href=\"https://github.com/rafaelrinaldi/hn-cli\">hn-cli</a> - Browse Hacker News from the comfort of your Terminal</li>\n<li><a href=\"https://github.com/nogizhopaboroda/iponmap\">iponmap</a> - Draw point on world map using ip address</li>\n<li><a href=\"https://github.com/lord63/isitup\">isitup</a> - Check whether a website is up or down</li>\n<li><a href=\"https://github.com/maebert/jrnl\">jrnl</a> - A simple command line journal application that stores your journal in a plain text file</li>\n<li><a href=\"https://github.com/ledger/ledger\">ledger</a> - Command line accounting</li>\n<li><a href=\"https://github.com/lord63/licen\">licen</a> - Generate your license. Yet another lice, but implement with Jinja2 and docopt</li>\n<li><a href=\"https://github.com/iCHAIT/moviemon\">moviemon</a> - Everything about your movies within the command line.</li>\n<li><a href=\"https://github.com/arvindch/pockyt\">pockyt</a> - Read, Manage, and Automate your <a href=\"https://getpocket.com\">Pocket</a> collection.</li>\n<li><a href=\"https://github.com/alebcay/pushblast\">pushblast</a> - Get PushBullet notifications when a shell program exits</li>\n<li><a href=\"https://github.com/Red5d/pushbullet-bash\">pushbullet-bash</a> - Bash interface to the PushBullet API</li>\n<li><a href=\"https://github.com/michael-lazar/rtv\">Reddit Terminal Viewer</a> - Browse Reddit from your terminal</li>\n<li><a href=\"https://github.com/donnemartin/saws\">SAWS</a> - A Supercharged AWS CLI</li>\n<li><a href=\"https://taskwarrior.org/\">taskwarrior</a> - A command-line TODO list manager</li>\n<li><a href=\"https://github.com/keepcosmos/terjira\">terjira</a> - Command line power tool for Jira</li>\n<li><a href=\"https://transfer.sh/\">transfer.sh</a> — Quickly upload and share files from your shell</li>\n<li><a href=\"https://github.com/ellisonleao/vl\">vl</a> - URL link checker on text documents</li>\n<li><a href=\"https://github.com/schachmat/wego\">wego</a> - Weather app for the terminal</li>\n<li><a href=\"https://github.com/rafaelrinaldi/whereami\">whereami</a> - Get your geolocation information from the CLI</li>\n<li><a href=\"https://github.com/chubin/wttr.in\">wttr.in</a> - :partly_sunny: The right way to check the weather (curl wttr.in)</li>\n</ul>\n<h2 id=\"games\">Games</h2>\n<p><em>All work and no play is a cruddy way to spend your day.</em></p>\n<ul>\n<li><a href=\"https://github.com/mydzor/bash2048\">bash2048</a> - Bash implementation of 2048 game</li>\n<li><a href=\"https://github.com/feherke/Bash-script/tree/master/minesweeper\">minesweeper</a> - Bash implementation of minesweeper</li>\n<li><a href=\"https://github.com/jubalh/nudoku\">nudoku</a> - ncurses based sudoku game written in C</li>\n<li><a href=\"https://github.com/vaniacer/piu-piu-SH\">piu-piu</a> - Horizontal scroller game in bash with multiplayer mode!</li>\n<li><a href=\"https://github.com/uuner/sedtris\">sedtris</a> - Tetris in sed</li>\n<li><a href=\"https://github.com/aureliojargas/sed-scripts\">sed-scripts</a> - Arkanoid and Sokoban written using sed</li>\n<li><a href=\"https://github.com/mpereira/tty-solitaire\">tty-solitaire</a> - Play solitaire in your terminal!</li>\n</ul>\n<h2 id=\"shellpackagemanagement\">Shell Package Management</h2>\n<p><em>Tools for managing multiple shell configurations. For zsh-specific tools, see the Zsh section.</em></p>\n<ul>\n<li><a href=\"https://github.com/Bash-it/bash-it\">bash-it</a> - A community Bash framework</li>\n<li><a href=\"https://github.com/basherpm/basher\">basher</a> - A package manager for shell scripts</li>\n<li><a href=\"http://www.bpkg.sh/\">bpkg</a> - JavaScript has npm, Ruby has Gems, Python has pip and now Shell has bpkg</li>\n<li><a href=\"https://github.com/deadc0de6/dotdrop\">dotdrop</a> - Save your dotfiles once, deploy them everywhere</li>\n<li><a href=\"https://github.com/svetlyak40wt/dotfiler\">dotfiler</a> – Shell agnostic git based dotfiles package manager, written in Python.</li>\n<li><a href=\"https://github.com/freshshell/fresh\">fresh</a> - Keep your dotfiles fresh</li>\n<li><a href=\"https://github.com/andsens/homeshick\">homeshick</a> - Git dotfile synchronizer written in Bash</li>\n<li><a href=\"https://github.com/alichtman/shallow-backup\">shallow-backup</a> - Easily create lightweight documentation of installed packages, dotfiles, and more</li>\n<li><a href=\"https://github.com/javier-lopez/shundle\">shundle</a> - Plugin manager for shell scripts</li>\n<li><a href=\"https://github.com/RichiH/vcsh\">vcsh</a> - Config manager based on Git</li>\n<li><a href=\"https://thelocehiliosan.github.io/yadm/\">yadm</a> - Git-based dotfiles manager supporting encryption, alternates, and bootstrapping</li>\n</ul>\n<h2 id=\"shellscriptdevelopment\">Shell Script Development</h2>\n<p><em>Tools for writing, improving, or organizing Bash or other shell scripts</em></p>\n<ul>\n<li><a href=\"https://github.com/fidian/ansi\">ansi</a> - ANSI escape codes in pure bash - change text color, position the cursor, much more</li>\n<li><a href=\"https://github.com/lehmannro/assert.sh\">assert.sh</a> - Bash unit testing framework</li>\n<li><a href=\"https://github.com/plytophogy/bashful\">bashful</a> - A collection of libraries to simplify writing Bash scripts</li>\n<li><a href=\"https://bashlets.sh/\">Bashlets</a> - A modular extensible toolbox for Bash</li>\n<li><a href=\"https://github.com/lingtalfi/bashmanager\">bashmanager</a> - mini bash framework for creating command line tools</li>\n<li><a href=\"https://github.com/mindaugasbarysas/bashwithnails\">bashwithnails</a> - a Bash framework written just for fun with testing, dependency management &amp; packaging</li>\n<li><a href=\"https://github.com/mads-hartmann/bash-language-server\">bash-language-server</a> - <a href=\"https://microsoft.github.io/language-server-protocol/\">LSP</a>-based Bash language server</li>\n<li><a href=\"https://github.com/bats-core/bats-core\">bats</a> - Bash Automated Testing System</li>\n<li><a href=\"https://github.com/molovo/crash\">crash</a> - Proper error handling, exceptions and try/catch for ZSH</li>\n<li><a href=\"https://github.com/fisherman/fishtape\">Fishtape</a> - TAP producer and test harness for fish</li>\n<li><a href=\"https://github.com/erichs/composure\">composure</a> - Compose, document, version and organize your shell functions</li>\n<li><a href=\"https://github.com/Mosai/workshop/blob/master/doc/dispatch.md\">dispatch</a> - A command line argument parser in 50 lines of portable shell script.</li>\n<li><a href=\"https://github.com/qzb/is.sh\">is.sh</a> - An alternative for builtin test command, it will make your \"if\" statements pretty</li>\n<li><a href=\"https://github.com/molovo/lumberjack\">lumberjack</a> - A logging interface for shell scripts</li>\n<li><a href=\"https://github.com/tests-always-included/mo\">mo</a> - Mustache templates in pure bash</li>\n<li><a href=\"https://github.com/nk412/optparse\">optparse</a> - A BASH wrapper for getopts, for simple command line arguments.</li>\n<li><a href=\"https://github.com/rerun/rerun\">rerun</a> - A modular shell automation framework to organize your keeper scripts</li>\n<li><a href=\"https://github.com/molovo/revolver\">revolver</a> - A reusable progress spinner for shell scripts</li>\n<li><a href=\"https://github.com/sorokine/phases\">phases</a> - Minimally invasive bash preprocessor, select sections of your script to run</li>\n<li><a href=\"https://github.com/cloudflare/semver_bash\">semver_bash</a> - Semantic Versioning in Bash</li>\n<li><a href=\"https://github.com/qzb/sh-semver\">sh-semver</a> - Semver tool for bash - finds versions matching to specified rules</li>\n<li><a href=\"https://github.com/koalaman/shellcheck\">shellcheck</a> - Static analysis tool for shell scripts</li>\n<li><a href=\"https://github.com/shellfire-dev/shellfire\">shellfire</a> -  A repository of namespaced, composable shell (bash, sh and dash) function libraries</li>\n<li><a href=\"https://github.com/rylnd/shpec\">shpec</a> - A shell testing framework</li>\n<li><a href=\"https://ianmiell.github.io/shutit/\">shutit</a> - Automation framework based on bash and pexpect</li>\n<li><a href=\"https://github.com/basecamp/sub\">sub</a> - A delicious way to organize programs</li>\n<li><a href=\"https://github.com/thinkerbot/ts\">ts</a> - A shell test script</li>\n<li><a href=\"https://github.com/tlevine/urchin\">urchin</a> - An idiomatic shell testing framework that uses only shell commands</li>\n<li><a href=\"https://github.com/kward/shunit2\">shunit2</a> - A unit test framework for Bash scripts with a flavour of JUnit/PyUnit.</li>\n<li><a href=\"https://github.com/jandob/rebash\">rebash</a> - Scripting library/framework. Features: imports, exceptions, doc-tests …</li>\n<li><a href=\"https://github.com/zunit-zsh/zunit\">zunit</a> - A powerful unit testing framework for ZSH</li>\n</ul>\n<h1 id=\"guides\">Guides</h1>\n<ul>\n<li><a href=\"http://wiki.bash-hackers.org/\">Bash Hackers Wiki</a></li>\n<li><a href=\"http://mywiki.wooledge.org\">Greg Wooledge\'s (aka \"greycat\") wiki</a>.\nSpecifically <a href=\"http://mywiki.wooledge.org/BashGuide\">Bash Guide</a>, <a href=\"http://mywiki.wooledge.org/BashFAQ\">Bash FAQ</a> and <a href=\"http://mywiki.wooledge.org/BashPitfalls\">Bash Pitfalls</a></li>\n<li><a href=\"https://google.github.io/styleguide/shell.xml\">Google\'s Shell Style Guide</a></li>\n<li><a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html#toc\">The Linux Documentation Project: Bash Programming - Intro/How-to</a></li>\n<li><a href=\"http://www.tldp.org/LDP/abs/html/\">The Linux Documentation Project: Advanced Bash Scripting Guide</a></li>\n<li><a href=\"https://en.wikibooks.org/wiki/Bash_Shell_Scripting\">WikiBooks: Bash Shell Scripting</a></li>\n<li><a href=\"http://redsymbol.net/articles/unofficial-bash-strict-mode/\">Use the Unofficial Bash Strict Mode (Unless You Looove Debugging)</a></li>\n<li><a href=\"https://github.com/jlevy/the-art-of-command-line\">The Art of Command Line</a></li>\n<li><a href=\"https://www.learnenough.com/command-line-tutorial\">Learn Enough Command Line to Be Dangerous</a></li>\n<li><a href=\"https://github.com/Idnan/bash-guide\">A guide to learn bash</a></li>\n</ul>\n<h1 id=\"otherawesomelists\">Other Awesome Lists</h1>\n<p>Other amazingly awesome lists can be found in <a href=\"https://github.com/emijrp/awesome-awesome\">awesome-awesome</a> and <a href=\"https://github.com/bayandin/awesome-awesomeness\">awesome-awesomeness</a>.</p>\n<h3 id=\"seealso\">See also</h3>\n<ul>\n<li><a href=\"https://github.com/agarrharr/awesome-cli-apps\">awesome-cli-apps</a></li>\n<li><a href=\"https://github.com/fisherman/awesome-fish-shell\">awesome-fish</a></li>\n<li><a href=\"https://github.com/unixorn/awesome-zsh-plugins\">awesome-zsh</a></li>\n<li><a href=\"https://github.com/k4m4/terminals-are-sexy\">terminals-are-sexy</a></li>\n</ul>'),
	(9,'dylanaraps','bin','https://raw.githubusercontent.com/dylanaraps/bin/master/README.md','2018-11-07 12:30:30','# Dylan\'s Scripts\n','<h1 id=\"dylansscripts\">Dylan\'s Scripts</h1>'),
	(10,'dylanaraps','BlazeBot','https://raw.githubusercontent.com/dylanaraps/BlazeBot/master/README.md','2018-11-07 12:30:30','# BlazeBot\nA multipurpose Discord bot written in Python with the [discord.py](https://github.com/Rapptz/discord.py) module.\n\n[![Discord.py](https://img.shields.io/pypi/v/discord.py.svg)](https://pypi.python.org/pypi/discord.py/)\n[![Python](https://img.shields.io/badge/Python-3.5%2C%203.6-blue.svg)](https://python.org/)\n[![BlazeBot](https://img.shields.io/badge/BlazeBot%20version-1.5-brightgreen.svg)](https://icrazyblaze.github.io/BlazeBot)\n\n# Installing dependencies\nThe following packages are required to run (as well as [Python](https://python.org) 3.5 or over):\n\n```\npython -m pip install requests\n```\n\n```\npython -m pip install discord\n```\n\nIf these commands don\'t work, try using `python3.6` or `python3` instead of the regular command, or use `sudo` on Linux.\n\nYou can also use the scripts found in the `misc` folder that will do this for you. Remember to run the `Python35` version if you\'re using Python 3.5!\n\n# Downloading the source code\nTo download with Git, type this command into a terminal:\n```\ngit clone https://github.com/iCrazyBlaze/BlazeBot\n```\nAlternatively, you can use the [GitHub Desktop Client](https://desktop.github.com/) to download it. (Recommended!)\n\nYou can also download the repository as a ZIP or TAR file, but I don\'t recommend doing this.\n\nIf you\'re on Linux and you want to be able to easily clone and update BlazeBot, you can use [this script](https://gist.github.com/iCrazyBlaze/c2e4413ba4700083355833100d262d10) which will remove the `BlazeBot` directory if it exists (otherwise it will just say \"directory not found\") before using the `git clone` command to download the code. This has proved really useful for me when I\'m using multiple machines.\n\nTo run the script on Windows with [Git Bash](https://git-scm.com/downloads), delete `sudo` from the first line and it should run.\n\n# Setting up and config\nBlazeBot comes with a `config.py` file. Here you will add your Discord App token, and add startup extensions. You can generate a token at *https://discordapp.com/developers/applications/me.*\n\nFind the string `\"token here\"` in the config file and replace it with your token.\n\nIn the `config.py` file, you can also customise insults, error messages, bot prefix, bot description and the file you want the bot to log events to.\n\n\n# Creating an extension (cog)\nInside the `misc` folder, you will find templates for commands and cogs.\n\nReplace `test` with the category name, for example `Crazi`. Also, make sure the extension\'s filename the same as this, to avoid confusion.\n\nYou can refer to [this documentation](https://twentysix26.github.io/Red-Docs/red_guide_make_cog/) for how to create a cog, and you can find examples of existing cogs [here](https://gist.github.com/leovoel/46cd89ed6a8f41fd09c5), but make sure to replace all instances of `bot` with `client`, which is what BlazeBot uses.\n\n\n# Loading/Unloading an extension (cog)\nUse the command `load` to load commands from `startup_extensions` in config.py. You can unload them separately with the `unload` command.\n\nYou can also load cogs from a folder, by using the format: `folder.filename`\n\nBlazeBot loads the `Crazi.py` plugin from the `cogs` folder.\n\n# Starting the bot\nOn Windows, the bot can be started using the `BlazeBot-Windows.bat` file.\n\nOn Linux/Unix, the bot can be started using the `BlazeBot-Linux.sh` file. (This only works with Python 3.6.X - if you\'re using Python 3.5 then make sure you use the `BlazeBot-Python35.sh` Launcher instead.)\n\nI recommend on any Linux system that you use [Thonny](http://thonny.org) or [IDLE](https://python.org) (Python\'s default code editor).\n\n# Inviting to servers\nUse the [Discord Permissions Calculator](https://discordapi.com/permissions.html) to invite the bot to your server using the ID printed to the console, and make sure that it has admin permissions.\n\nIf you want to invite your bot to other people\'s servers, make sure to tick \"Public bot\" on the Apps page.\n\n# Speech Recognition\n**Speech-to-Discord** lets you type a command and talk to BlazeBot, and it will send your message to the same channel where you typed the command. By default, this cog is disabled. To enable it, add it to `startup_extensions` in the config file. You will need a microphone so that the program can recognise your voice (duuhh...), and it works best on Windows 10.\n\n# Tips\nMake sure to always update BlazeBot. You can create [GitHub Webhooks for Discord](https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks) to get notified whenever a repo is updated.\n\nWhen you do this, always keep a backup! It\'s also useful to write down your token, but **NEVER** give this to anyone you don\'t trust. Don\'t worry though - you can generate a new token whenever you want on the Apps page.\n\nTo read this properly offline, [Atom](https://atom.io) has a built-in Markdown Previewer that you can open by hitting **CTRL+SHIFT+M** on a PC or **CMD+SHIFT+M** on a Mac.\n\n# See Also\nHere are some useful GitHub repositories related to BlazeBot:\n\nhttps://github.com/Cog-Creators/Red-DiscordBot\n\nhttps://github.com/Rapptz/discord.py\n','<h1 id=\"blazebot\">BlazeBot</h1>\n<p>A multipurpose Discord bot written in Python with the <a href=\"https://github.com/Rapptz/discord.py\">discord.py</a> module.</p>\n<p><a href=\"https://pypi.python.org/pypi/discord.py/\"><img src=\"https://img.shields.io/pypi/v/discord.py.svg\" alt=\"Discord.py\" /></a>\n<a href=\"https://python.org/\"><img src=\"https://img.shields.io/badge/Python-3.5%2C%203.6-blue.svg\" alt=\"Python\" /></a>\n<a href=\"https://icrazyblaze.github.io/BlazeBot\"><img src=\"https://img.shields.io/badge/BlazeBot%20version-1.5-brightgreen.svg\" alt=\"BlazeBot\" /></a></p>\n<h1 id=\"installingdependencies\">Installing dependencies</h1>\n<p>The following packages are required to run (as well as <a href=\"https://python.org\">Python</a> 3.5 or over):</p>\n<pre><code>python -m pip install requests\n</code></pre>\n<pre><code>python -m pip install discord\n</code></pre>\n<p>If these commands don\'t work, try using <code>python3.6</code> or <code>python3</code> instead of the regular command, or use <code>sudo</code> on Linux.</p>\n<p>You can also use the scripts found in the <code>misc</code> folder that will do this for you. Remember to run the <code>Python35</code> version if you\'re using Python 3.5!</p>\n<h1 id=\"downloadingthesourcecode\">Downloading the source code</h1>\n<p>To download with Git, type this command into a terminal:</p>\n<pre><code>git clone https://github.com/iCrazyBlaze/BlazeBot\n</code></pre>\n<p>Alternatively, you can use the <a href=\"https://desktop.github.com/\">GitHub Desktop Client</a> to download it. (Recommended!)</p>\n<p>You can also download the repository as a ZIP or TAR file, but I don\'t recommend doing this.</p>\n<p>If you\'re on Linux and you want to be able to easily clone and update BlazeBot, you can use <a href=\"https://gist.github.com/iCrazyBlaze/c2e4413ba4700083355833100d262d10\">this script</a> which will remove the <code>BlazeBot</code> directory if it exists (otherwise it will just say \"directory not found\") before using the <code>git clone</code> command to download the code. This has proved really useful for me when I\'m using multiple machines.</p>\n<p>To run the script on Windows with <a href=\"https://git-scm.com/downloads\">Git Bash</a>, delete <code>sudo</code> from the first line and it should run.</p>\n<h1 id=\"settingupandconfig\">Setting up and config</h1>\n<p>BlazeBot comes with a <code>config.py</code> file. Here you will add your Discord App token, and add startup extensions. You can generate a token at <em>https://discordapp.com/developers/applications/me.</em></p>\n<p>Find the string <code>\"token here\"</code> in the config file and replace it with your token.</p>\n<p>In the <code>config.py</code> file, you can also customise insults, error messages, bot prefix, bot description and the file you want the bot to log events to.</p>\n<h1 id=\"creatinganextensioncog\">Creating an extension (cog)</h1>\n<p>Inside the <code>misc</code> folder, you will find templates for commands and cogs.</p>\n<p>Replace <code>test</code> with the category name, for example <code>Crazi</code>. Also, make sure the extension\'s filename the same as this, to avoid confusion.</p>\n<p>You can refer to <a href=\"https://twentysix26.github.io/Red-Docs/red_guide_make_cog/\">this documentation</a> for how to create a cog, and you can find examples of existing cogs <a href=\"https://gist.github.com/leovoel/46cd89ed6a8f41fd09c5\">here</a>, but make sure to replace all instances of <code>bot</code> with <code>client</code>, which is what BlazeBot uses.</p>\n<h1 id=\"loadingunloadinganextensioncog\">Loading/Unloading an extension (cog)</h1>\n<p>Use the command <code>load</code> to load commands from <code>startup_extensions</code> in config.py. You can unload them separately with the <code>unload</code> command.</p>\n<p>You can also load cogs from a folder, by using the format: <code>folder.filename</code></p>\n<p>BlazeBot loads the <code>Crazi.py</code> plugin from the <code>cogs</code> folder.</p>\n<h1 id=\"startingthebot\">Starting the bot</h1>\n<p>On Windows, the bot can be started using the <code>BlazeBot-Windows.bat</code> file.</p>\n<p>On Linux/Unix, the bot can be started using the <code>BlazeBot-Linux.sh</code> file. (This only works with Python 3.6.X - if you\'re using Python 3.5 then make sure you use the <code>BlazeBot-Python35.sh</code> Launcher instead.)</p>\n<p>I recommend on any Linux system that you use <a href=\"http://thonny.org\">Thonny</a> or <a href=\"https://python.org\">IDLE</a> (Python\'s default code editor).</p>\n<h1 id=\"invitingtoservers\">Inviting to servers</h1>\n<p>Use the <a href=\"https://discordapi.com/permissions.html\">Discord Permissions Calculator</a> to invite the bot to your server using the ID printed to the console, and make sure that it has admin permissions.</p>\n<p>If you want to invite your bot to other people\'s servers, make sure to tick \"Public bot\" on the Apps page.</p>\n<h1 id=\"speechrecognition\">Speech Recognition</h1>\n<p><strong>Speech-to-Discord</strong> lets you type a command and talk to BlazeBot, and it will send your message to the same channel where you typed the command. By default, this cog is disabled. To enable it, add it to <code>startup_extensions</code> in the config file. You will need a microphone so that the program can recognise your voice (duuhh…), and it works best on Windows 10.</p>\n<h1 id=\"tips\">Tips</h1>\n<p>Make sure to always update BlazeBot. You can create <a href=\"https://support.discordapp.com/hc/en-us/articles/228383668-Intro-to-Webhooks\">GitHub Webhooks for Discord</a> to get notified whenever a repo is updated.</p>\n<p>When you do this, always keep a backup! It\'s also useful to write down your token, but <strong>NEVER</strong> give this to anyone you don\'t trust. Don\'t worry though - you can generate a new token whenever you want on the Apps page.</p>\n<p>To read this properly offline, <a href=\"https://atom.io\">Atom</a> has a built-in Markdown Previewer that you can open by hitting <strong>CTRL+SHIFT+M</strong> on a PC or <strong>CMD+SHIFT+M</strong> on a Mac.</p>\n<h1 id=\"seealso\">See Also</h1>\n<p>Here are some useful GitHub repositories related to BlazeBot:</p>\n<p>https://github.com/Cog-Creators/Red-DiscordBot</p>\n<p>https://github.com/Rapptz/discord.py</p>'),
	(11,'dylanaraps','bush','https://raw.githubusercontent.com/dylanaraps/bush/master/README.md','2018-11-07 12:30:30','# bush\n\n[![Build Status](https://travis-ci.org/dylanaraps/bush.svg?branch=master)](https://travis-ci.org/dylanaraps/bush)\n\nThis is an experiment to see how many standard tools and functions we can re-implement in pure bash. No external processes are used, only shell builtins. Bush is not meant to be used for anything serious and there\'s probably edge cases and bugs throughout.\n\nFeel free to hack around with this, that\'s the entire point anyway. ¯\\\\\\_(ツ)\\_/¯\n\n\n## How to use this?\n\nSource the file and the functions will be available. To uninstall it just open another shell or close your terminal.\n\n```sh\nsource ~/path/to/bush/bush\n```\n','<h1 id=\"bush\">bush</h1>\n<p><a href=\"https://travis-ci.org/dylanaraps/bush\"><img src=\"https://travis-ci.org/dylanaraps/bush.svg?branch=master\" alt=\"Build Status\" /></a></p>\n<p>This is an experiment to see how many standard tools and functions we can re-implement in pure bash. No external processes are used, only shell builtins. Bush is not meant to be used for anything serious and there\'s probably edge cases and bugs throughout.</p>\n<p>Feel free to hack around with this, that\'s the entire point anyway. ¯\\_(ツ)_/¯</p>\n<h2 id=\"howtousethis\">How to use this?</h2>\n<p>Source the file and the functions will be available. To uninstall it just open another shell or close your terminal.</p>\n<pre><code class=\"sh language-sh\">source ~/path/to/bush/bush\n</code></pre>'),
	(12,'dylanaraps','COS10005','https://raw.githubusercontent.com/dylanaraps/COS10005/master/README.md','2018-11-07 12:30:30','# COS10005\n\nBA-ICT - Web Development\n','<h1 id=\"cos10005\">COS10005</h1>\n<p>BA-ICT - Web Development</p>'),
	(13,'dylanaraps','COS10009','https://raw.githubusercontent.com/dylanaraps/COS10009/master/README.md','2018-11-07 12:30:30','# COS10009\n\nSwinburne University of Technology - BA-ICT - Introduction To Programming - COS10009\n\n![COS10009](http://www.dhresource.com/albu_908039680_00-1.0x0/halloween-costume-masquerade-children-clothes.jpg)\n','<h1 id=\"cos10009\">COS10009</h1>\n<p>Swinburne University of Technology - BA-ICT - Introduction To Programming - COS10009</p>\n<p><img src=\"http://www.dhresource.com/albu_908039680_00-1.0x0/halloween-costume-masquerade-children-clothes.jpg\" alt=\"COS10009\" /></p>'),
	(14,'dylanaraps','crayon','https://raw.githubusercontent.com/dylanaraps/crayon/master/README.md','2018-11-07 12:30:30','# Crayon\n[Features](#features) | [Installation](#installation) | [Customization](#customization) | [Contributing](#contributing)\n\n#### A dark 16 color colorscheme for Vim, Gvim, and Nvim\n![](https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/palette.png)\n\n![](https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/ruby.png)\n\n<!--- Screenshots {{{ -->\n\n## Screenshots\nThe terminal font used in the screenshots is [envypn](https://aur.archlinux.org/packages/envypn-font/) by Ypnose.\n\n#### Markdown\n![](https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/markdown.png)\n\n#### Viml\n![](https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/viml.png)\n\n#### Html\n![](https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/html.png)\n\n#### Scss\n![](https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/scss.png)\n\n<!-- }}} -->\n\n<!--- Features {{{ -->\n\n## Features\n\n* Supports Vim, Gvim and Neovim\n	* Supports Neovim with true color enabled\n	* Supports Neovim\'s built in terminal mode\n\n* Plugin Support\n	* Vim-Airline\n	* Vim-Signify\n	* NerdTree\n\n<!-- }}} -->\n\n<!--- Installation {{{ -->\n\n## Installation\n\n#### 1.1: Preferred Method\nUse a plugin manager like [Plug](https://github.com/junegunn/vim-plug).\n\n```VimL\nPlug \'dylanaraps/crayon\'\n```\n\nUsing plug you can easily update the plugin with\n\n```VimL\n:PlugUpdate\n```\n\n#### 1.2: Manual Install\nPlace \'crayon.vim\' file into \'colors\' folder within your Vim directory, e.g. `vim/colors/`\n\n#### 2: Now What?\nOnce you\'ve installed the theme, put this in your `.vimrc`/`init.vim` and you should be all set.\n\n```VimL\ncolorscheme crayon\n```\n\n### Plugin Support\nCrayon currently supports these vim plugins:\n\n* Vim-Airline\n* Vim-Signify\n* NerdTree\n\nFeel free to request support for your favourite plugins and I\'ll happily add them to the list!\n\n#### Vim-Airline\n\nAdd this line to your `.vimrc`/`init.vim`:\n\n```VimL\n\" Colorful Airline\nlet g:airline_theme = \'crayon\'\n\n\" Minimalistic Airline\nlet g:airline_theme = \'crayon2\'\n```\n\n<!--- }}} -->\n\n<!--- Customization {{{ -->\n\n### Customization\nYou can customize all of the theme\'s colors by adding some lines to your `.vimrc`/`init.vim`. Here\'s an example that changes the color of the line numbers:\n\n```VimL\n\" Changes the Line Number colors\nautocmd ColorScheme * highlight LineNr guibg=#FFFFFF guifg=#191919 ctermbg=7 ctermfg=8\n```\n\n`guibg`/`guifg` change the background and foreground in `neovim` with true colors enabled and `gvim`. These values must be a hex code. eg `#FFFFFF`\n\n`ctermbg`/`ctermfg` change the background and foreground `.vimrc`/`init.vim` in `vim`/`neovim` They must be a number between 0 and 255. [More Info](http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim).\n\n`LineNR` is the highlight group for `vim`\'s line-numbers. If you\'d like to change the colors of anything else you need to figure out the highlight group.\n\nI\'ve found that the easiest way to do that is a vim mapping I found which tells you the highlight group of whatever is under your cursor. Just add these 2 lines to your `.vimrc`/`init.vim` and reopen. Then  press `f10`.\n\n```VimL\n\" Shows the highlight group of whatever\'s under the cursor\nmap <F10> :echo \"hi<\" . synIDattr(synID(line(\".\"),col(\".\"),1),\"name\") . \'> trans<\'\n\\ . synIDattr(synID(line(\".\"),col(\".\"),0),\"name\") . \"> lo<\"\n\\ . synIDattr(synIDtrans(synID(line(\".\"),col(\".\"),1)),\"name\") . \">\"<CR>\n```\n\nYou can also use the command :hi or :highlight to see all of the highlight groups and their current values.\n\nThe autocommands must be added before the colorscheme line in your `.vimrc`/`init.vim` otherwise they won\'t work. Here\'s an example.\n\n```VimL\n\" This autocmd changes the background to #000000\nautocmd ColorScheme * highlight Normal guibg=#000000 ctermbg=0\n\ncolorscheme = crayon\n```\n\n### Changing the Background Color\nIf you don\'t like the default background color you can easily change it without having to edit the theme! You just need to add a single line to your `.vimrc`/`init.vim` before the colorscheme line above.\n\nThis currently only works with dark background colors as the theme doesn\'t have a light variant yet.\n\n```VimL\n\" This line changes the background color\nau ColorScheme * hi Normal guibg=#181818 ctermbg=8\n\ncolorscheme = crayon\n```\n\n#### Protip\nIf you have multiple autocmds it\'s good to group them, you can do so like this:\n\n```VimL\naugroup ColorOverride\n	au!\n	autocmd ColorScheme * highlight Normal guibg=#000000 ctermbg=0\n	autocmd ColorScheme * highlight LineNr guibg=#FFFFFF guifg=#191919 ctermbg=7 ctermfg=8\naugroup END\n```\n\n<!--- }}} -->\n\n<!--- Terminal Installation {{{ -->\n\n### Terminal Installation\n\n#### xterm, Urxvt and terminals that use the `.Xresources`/`.Xdefaults` file.\nAdd the code below to your `.Xresources`/`.Xdefaults`.\n\n```xdefaults\n! Crayon Theme\n\n! Shades\n#define black	#101112\n#define gray01	#282C33\n#define gray02	#383E47\n#define gray03	#586270\n#define gray04	#798494\n#define gray05	#BCC5D1\n#define gray06	#D8D8D8\n#define white	#FDFEFF\n\n! Colors\n#define red		#B27B78\n#define orange	#C48D62\n#define yellow	#D8C27A\n#define green	#99AE63\n#define cyan	#8DC9C3\n#define blue	#7495B6\n#define magenta	#B59CD8\n#define pink 	#CC99B3\n\n*.foreground:   gray06\n*.background:   black\n*.cursorColor:  gray06\n\n*.color0:       black\n*.color1:       orange\n*.color2:       green\n*.color3:       yellow\n*.color4:       blue\n*.color5:       magenta\n*.color6:       cyan\n*.color7:       gray05\n\n*.color8:       gray03\n*.color9:       red\n*.color10:      gray01\n*.color11:      gray02\n*.color12:      gray04\n*.color13:      gray06\n*.color14:      pink\n*.color15:      white\n\n```\n\n~~Support for other terminals is coming once I\'ve finalized the schemes colors.~~ In the meantime you can go to [Terminal.sexy](http://terminal.sexy/), import the contents of the `.Xresources` file from the repo and then export it to the terminal format of your choice.\n\n<!--- }}} -->\n\n### Contributing\nIf you\'d like to contribute to Crayon you\'ll need to edit the .erb file that\'s in the root of the project. You can then generate the final .vim file with this:\n\n```bash\n	erb -T - crayon.erb > colors/crayon.vim\n```\n\nJust run that command in a terminal in the same directory as the `.erb` file.\n\n#### Credits\n\n* [RNB, a Vim colorscheme template](https://gist.github.com/romainl/5cd2f4ec222805f49eca)\n	* Used to create the colorscheme\n','<h1 id=\"crayon\">Crayon</h1>\n<p><a href=\"#features\">Features</a> | <a href=\"#installation\">Installation</a> | <a href=\"#customization\">Customization</a> | <a href=\"#contributing\">Contributing</a></p>\n<h4 id=\"adark16colorcolorschemeforvimgvimandnvim\">A dark 16 color colorscheme for Vim, Gvim, and Nvim</h4>\n<p><img src=\"https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/palette.png\" alt=\"\" /></p>\n<p><img src=\"https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/ruby.png\" alt=\"\" /></p>\n<!--- Screenshots {{{ -->\n<h2 id=\"screenshots\">Screenshots</h2>\n<p>The terminal font used in the screenshots is <a href=\"https://aur.archlinux.org/packages/envypn-font/\">envypn</a> by Ypnose.</p>\n<h4 id=\"markdown\">Markdown</h4>\n<p><img src=\"https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/markdown.png\" alt=\"\" /></p>\n<h4 id=\"viml\">Viml</h4>\n<p><img src=\"https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/viml.png\" alt=\"\" /></p>\n<h4 id=\"html\">Html</h4>\n<p><img src=\"https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/html.png\" alt=\"\" /></p>\n<h4 id=\"scss\">Scss</h4>\n<p><img src=\"https://raw.githubusercontent.com/dylanaraps/crayon/master/screenshots/scss.png\" alt=\"\" /></p>\n<!-- }}} -->\n<!--- Features {{{ -->\n<h2 id=\"features\">Features</h2>\n<ul>\n<li><p>Supports Vim, Gvim and Neovim</p>\n<ul>\n<li>Supports Neovim with true color enabled</li>\n<li>Supports Neovim\'s built in terminal mode</li></ul></li>\n<li><p>Plugin Support</p>\n<ul>\n<li>Vim-Airline</li>\n<li>Vim-Signify</li>\n<li>NerdTree</li></ul></li>\n</ul>\n<!-- }}} -->\n<!--- Installation {{{ -->\n<h2 id=\"installation\">Installation</h2>\n<h4 id=\"11preferredmethod\">1.1: Preferred Method</h4>\n<p>Use a plugin manager like <a href=\"https://github.com/junegunn/vim-plug\">Plug</a>.</p>\n<pre><code class=\"VimL language-VimL\">Plug \'dylanaraps/crayon\'\n</code></pre>\n<p>Using plug you can easily update the plugin with</p>\n<pre><code class=\"VimL language-VimL\">:PlugUpdate\n</code></pre>\n<h4 id=\"12manualinstall\">1.2: Manual Install</h4>\n<p>Place \'crayon.vim\' file into \'colors\' folder within your Vim directory, e.g. <code>vim/colors/</code></p>\n<h4 id=\"2nowwhat\">2: Now What?</h4>\n<p>Once you\'ve installed the theme, put this in your <code>.vimrc</code>/<code>init.vim</code> and you should be all set.</p>\n<pre><code class=\"VimL language-VimL\">colorscheme crayon\n</code></pre>\n<h3 id=\"pluginsupport\">Plugin Support</h3>\n<p>Crayon currently supports these vim plugins:</p>\n<ul>\n<li>Vim-Airline</li>\n<li>Vim-Signify</li>\n<li>NerdTree</li>\n</ul>\n<p>Feel free to request support for your favourite plugins and I\'ll happily add them to the list!</p>\n<h4 id=\"vimairline\">Vim-Airline</h4>\n<p>Add this line to your <code>.vimrc</code>/<code>init.vim</code>:</p>\n<pre><code class=\"VimL language-VimL\">\" Colorful Airline\nlet g:airline_theme = \'crayon\'\n\n\" Minimalistic Airline\nlet g:airline_theme = \'crayon2\'\n</code></pre>\n<!--- }}} -->\n<!--- Customization {{{ -->\n<h3 id=\"customization\">Customization</h3>\n<p>You can customize all of the theme\'s colors by adding some lines to your <code>.vimrc</code>/<code>init.vim</code>. Here\'s an example that changes the color of the line numbers:</p>\n<pre><code class=\"VimL language-VimL\">\" Changes the Line Number colors\nautocmd ColorScheme * highlight LineNr guibg=#FFFFFF guifg=#191919 ctermbg=7 ctermfg=8\n</code></pre>\n<p><code>guibg</code>/<code>guifg</code> change the background and foreground in <code>neovim</code> with true colors enabled and <code>gvim</code>. These values must be a hex code. eg <code>#FFFFFF</code></p>\n<p><code>ctermbg</code>/<code>ctermfg</code> change the background and foreground <code>.vimrc</code>/<code>init.vim</code> in <code>vim</code>/<code>neovim</code> They must be a number between 0 and 255. <a href=\"http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim\">More Info</a>.</p>\n<p><code>LineNR</code> is the highlight group for <code>vim</code>\'s line-numbers. If you\'d like to change the colors of anything else you need to figure out the highlight group.</p>\n<p>I\'ve found that the easiest way to do that is a vim mapping I found which tells you the highlight group of whatever is under your cursor. Just add these 2 lines to your <code>.vimrc</code>/<code>init.vim</code> and reopen. Then  press <code>f10</code>.</p>\n<pre><code class=\"VimL language-VimL\">\" Shows the highlight group of whatever\'s under the cursor\nmap &lt;F10&gt; :echo \"hi&lt;\" . synIDattr(synID(line(\".\"),col(\".\"),1),\"name\") . \'&gt; trans&lt;\'\n\\ . synIDattr(synID(line(\".\"),col(\".\"),0),\"name\") . \"&gt; lo&lt;\"\n\\ . synIDattr(synIDtrans(synID(line(\".\"),col(\".\"),1)),\"name\") . \"&gt;\"&lt;CR&gt;\n</code></pre>\n<p>You can also use the command :hi or :highlight to see all of the highlight groups and their current values.</p>\n<p>The autocommands must be added before the colorscheme line in your <code>.vimrc</code>/<code>init.vim</code> otherwise they won\'t work. Here\'s an example.</p>\n<pre><code class=\"VimL language-VimL\">\" This autocmd changes the background to #000000\nautocmd ColorScheme * highlight Normal guibg=#000000 ctermbg=0\n\ncolorscheme = crayon\n</code></pre>\n<h3 id=\"changingthebackgroundcolor\">Changing the Background Color</h3>\n<p>If you don\'t like the default background color you can easily change it without having to edit the theme! You just need to add a single line to your <code>.vimrc</code>/<code>init.vim</code> before the colorscheme line above.</p>\n<p>This currently only works with dark background colors as the theme doesn\'t have a light variant yet.</p>\n<pre><code class=\"VimL language-VimL\">\" This line changes the background color\nau ColorScheme * hi Normal guibg=#181818 ctermbg=8\n\ncolorscheme = crayon\n</code></pre>\n<h4 id=\"protip\">Protip</h4>\n<p>If you have multiple autocmds it\'s good to group them, you can do so like this:</p>\n<pre><code class=\"VimL language-VimL\">augroup ColorOverride\n    au!\n    autocmd ColorScheme * highlight Normal guibg=#000000 ctermbg=0\n    autocmd ColorScheme * highlight LineNr guibg=#FFFFFF guifg=#191919 ctermbg=7 ctermfg=8\naugroup END\n</code></pre>\n<!--- }}} -->\n<!--- Terminal Installation {{{ -->\n<h3 id=\"terminalinstallation\">Terminal Installation</h3>\n<h4 id=\"xtermurxvtandterminalsthatusethexresourcesxdefaultsfile\">xterm, Urxvt and terminals that use the <code>.Xresources</code>/<code>.Xdefaults</code> file.</h4>\n<p>Add the code below to your <code>.Xresources</code>/<code>.Xdefaults</code>.</p>\n<pre><code class=\"xdefaults language-xdefaults\">! Crayon Theme\n\n! Shades\n#define black    #101112\n#define gray01    #282C33\n#define gray02    #383E47\n#define gray03    #586270\n#define gray04    #798494\n#define gray05    #BCC5D1\n#define gray06    #D8D8D8\n#define white    #FDFEFF\n\n! Colors\n#define red        #B27B78\n#define orange    #C48D62\n#define yellow    #D8C27A\n#define green    #99AE63\n#define cyan    #8DC9C3\n#define blue    #7495B6\n#define magenta    #B59CD8\n#define pink     #CC99B3\n\n*.foreground:   gray06\n*.background:   black\n*.cursorColor:  gray06\n\n*.color0:       black\n*.color1:       orange\n*.color2:       green\n*.color3:       yellow\n*.color4:       blue\n*.color5:       magenta\n*.color6:       cyan\n*.color7:       gray05\n\n*.color8:       gray03\n*.color9:       red\n*.color10:      gray01\n*.color11:      gray02\n*.color12:      gray04\n*.color13:      gray06\n*.color14:      pink\n*.color15:      white\n</code></pre>\n<p>~~Support for other terminals is coming once I\'ve finalized the schemes colors.~~ In the meantime you can go to <a href=\"http://terminal.sexy/\">Terminal.sexy</a>, import the contents of the <code>.Xresources</code> file from the repo and then export it to the terminal format of your choice.</p>\n<!--- }}} -->\n<h3 id=\"contributing\">Contributing</h3>\n<p>If you\'d like to contribute to Crayon you\'ll need to edit the .erb file that\'s in the root of the project. You can then generate the final .vim file with this:</p>\n<pre><code class=\"bash language-bash\">    erb -T - crayon.erb &gt; colors/crayon.vim\n</code></pre>\n<p>Just run that command in a terminal in the same directory as the <code>.erb</code> file.</p>\n<h4 id=\"credits\">Credits</h4>\n<ul>\n<li><a href=\"https://gist.github.com/romainl/5cd2f4ec222805f49eca\">RNB, a Vim colorscheme template</a><ul>\n<li>Used to create the colorscheme</li></ul></li>\n</ul>'),
	(15,'dylanaraps','discord-open-source','https://raw.githubusercontent.com/dylanaraps/discord-open-source/master/README.md','2018-11-07 12:30:30','# Open Source Communities on Discord\n\nThis is the source list of OSS communities that use and live on Discord. It is used to populate the list at https://discordapp.com/open-source.\n\nThanks for being part of Discord!\n\n## Acceptance criteria\n\nAt this time, we are accepting communities which meet the following criteria:\n\n1.  Your community is not Discord-focused (for example, Discord bots or modifications are not accepted).\n2.  Your community has at least 1,000 members, or the GitHub repo has at least 1,000 stars.\n3.  Your community adheres to the [Discord community guidelines](https://discordapp.com/guidelines).\n\nWhile this list does not currently extend to Discord bots, look forward to something for bots in the future.\n\n## Adding your project\n\n1.  Fork the repo\n2.  Add your logo into [`/logos`](https://github.com/discordapp/discord-open-source/tree/master/logos)\n\n    * Logo dimensions should be either `72x72` for SVG or `144x144` for PNG.\n    * Logo should be minified.\n    * SVGs should contain only vector shapes — no raster graphics.\n\n3.  Add your community to [`communities.json`](https://github.com/discordapp/discord-open-source/blob/master/communities.json), like so:\n\n```json\n{\n  \"logo\": \"your-logo.svg\",\n  \"title\": \"Name of your project\",\n  \"quote\": \"Optional: A short quote about how you use Discord for your project.\",\n  \"quoteSourceUrl\": \"Optional: An optional source for the quote.\",\n  \"inviteCode\": \"The public invite code to your project, usually the code after https://discord.gg/\",\n  \"githubUrl\": \"The URL of your GitHub organization or project repository.\"\n}\n```\n\n4.  Submit a PR with your change, and if all is well, we\'ll merge it and display it on Discord\'s [open source page](https://discordapp.com/open-source)!\n','<h1 id=\"opensourcecommunitiesondiscord\">Open Source Communities on Discord</h1>\n<p>This is the source list of OSS communities that use and live on Discord. It is used to populate the list at https://discordapp.com/open-source.</p>\n<p>Thanks for being part of Discord!</p>\n<h2 id=\"acceptancecriteria\">Acceptance criteria</h2>\n<p>At this time, we are accepting communities which meet the following criteria:</p>\n<ol>\n<li>Your community is not Discord-focused (for example, Discord bots or modifications are not accepted).</li>\n<li>Your community has at least 1,000 members, or the GitHub repo has at least 1,000 stars.</li>\n<li>Your community adheres to the <a href=\"https://discordapp.com/guidelines\">Discord community guidelines</a>.</li>\n</ol>\n<p>While this list does not currently extend to Discord bots, look forward to something for bots in the future.</p>\n<h2 id=\"addingyourproject\">Adding your project</h2>\n<ol>\n<li><p>Fork the repo</p></li>\n<li><p>Add your logo into <a href=\"https://github.com/discordapp/discord-open-source/tree/master/logos\"><code>/logos</code></a></p>\n<ul>\n<li>Logo dimensions should be either <code>72x72</code> for SVG or <code>144x144</code> for PNG.</li>\n<li>Logo should be minified.</li>\n<li>SVGs should contain only vector shapes — no raster graphics.</li></ul></li>\n<li><p>Add your community to <a href=\"https://github.com/discordapp/discord-open-source/blob/master/communities.json\"><code>communities.json</code></a>, like so:</p></li>\n</ol>\n<pre><code class=\"json language-json\">{\n  \"logo\": \"your-logo.svg\",\n  \"title\": \"Name of your project\",\n  \"quote\": \"Optional: A short quote about how you use Discord for your project.\",\n  \"quoteSourceUrl\": \"Optional: An optional source for the quote.\",\n  \"inviteCode\": \"The public invite code to your project, usually the code after https://discord.gg/\",\n  \"githubUrl\": \"The URL of your GitHub organization or project repository.\"\n}\n</code></pre>\n<ol start=\"4\">\n<li>Submit a PR with your change, and if all is well, we\'ll merge it and display it on Discord\'s <a href=\"https://discordapp.com/open-source\">open source page</a>!</li>\n</ol>'),
	(16,'dylanaraps','discord-selena','https://raw.githubusercontent.com/dylanaraps/discord-selena/master/README.md','2018-11-07 12:30:30','# Selena\n\n[![Discord](https://img.shields.io/discord/440354555197128704.svg)](https://discord.gg/BtnTPFF)\n[![Build Status](https://travis-ci.org/dylanaraps/pywal.svg?branch=master)](https://travis-ci.org/dylanaraps/pywal)\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE.md)\n[![Donate](https://img.shields.io/badge/donate-patreon-yellow.svg)](https://www.patreon.com/dyla)\n\nA minimal bot to log all Discord messages for\ntransparency.\n\nThis bot logs every message and sends them to another\nchannel. It’s like the audit log but for messages. The\nmessages can also be sent to a different server if\nyou’d like to keep logging separate.\n\n\n## Dependencies\n\n- python 3.5+\n- discord-rewrite\n\n\n## Getting Started\n\n**Setup**\n\n```sh\ngit clone https://dylanaraps.com/discord-selena`\ncd discord-selena\nmkdir -p ~/.config/selena\ncp config.ini ~/.config/selena\n```\n\n**Bot Token**\n\n- Add your bot token to the config file.\n\n```ini\ntoken =\n```\n\n**Log Channel**\n\n- Change the value to the Channel ID of your logging\n  channel.\n\n```ini\nlog_channel = 447547444566163457\n```\n','<h1 id=\"selena\">Selena</h1>\n<p><a href=\"https://discord.gg/BtnTPFF\"><img src=\"https://img.shields.io/discord/440354555197128704.svg\" alt=\"Discord\" /></a>\n<a href=\"https://travis-ci.org/dylanaraps/pywal\"><img src=\"https://travis-ci.org/dylanaraps/pywal.svg?branch=master\" alt=\"Build Status\" /></a>\n<a href=\"./LICENSE.md\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"MIT licensed\" /></a>\n<a href=\"https://www.patreon.com/dyla\"><img src=\"https://img.shields.io/badge/donate-patreon-yellow.svg\" alt=\"Donate\" /></a></p>\n<p>A minimal bot to log all Discord messages for\ntransparency.</p>\n<p>This bot logs every message and sends them to another\nchannel. It’s like the audit log but for messages. The\nmessages can also be sent to a different server if\nyou’d like to keep logging separate.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<ul>\n<li>python 3.5+</li>\n<li>discord-rewrite</li>\n</ul>\n<h2 id=\"gettingstarted\">Getting Started</h2>\n<p><strong>Setup</strong></p>\n<pre><code class=\"sh language-sh\">git clone https://dylanaraps.com/discord-selena`\ncd discord-selena\nmkdir -p ~/.config/selena\ncp config.ini ~/.config/selena\n</code></pre>\n<p><strong>Bot Token</strong></p>\n<ul>\n<li>Add your bot token to the config file.</li>\n</ul>\n<pre><code class=\"ini language-ini\">token =\n</code></pre>\n<p><strong>Log Channel</strong></p>\n<ul>\n<li>Change the value to the Channel ID of your logging\nchannel.</li>\n</ul>\n<pre><code class=\"ini language-ini\">log_channel = 447547444566163457\n</code></pre>'),
	(17,'dylanaraps','dlink-ssid-bypass','https://raw.githubusercontent.com/dylanaraps/dlink-ssid-bypass/master/README.md','2018-11-07 12:30:31','# dlink-ssid-bypass\nBypass SSID validation on D-Link DSL-2750B\n\n## Instructions\n\nOn the pages that allow you to set the SSID, paste this into the console and click apply.\n\n```javascript\nencodeUrl = function() { SSID.value = \"YOURVALUEHERE\"; return SSID.value; }\n```\n','<h1 id=\"dlinkssidbypass\">dlink-ssid-bypass</h1>\n<p>Bypass SSID validation on D-Link DSL-2750B</p>\n<h2 id=\"instructions\">Instructions</h2>\n<p>On the pages that allow you to set the SSID, paste this into the console and click apply.</p>\n<pre><code class=\"javascript language-javascript\">encodeUrl = function() { SSID.value = \"YOURVALUEHERE\"; return SSID.value; }\n</code></pre>'),
	(18,'dylanaraps','dotfiles','https://raw.githubusercontent.com/dylanaraps/dotfiles/master/README.md','2018-11-07 12:30:31','# Dylan\'s Dotfiles\n\nMy dotfiles, now with an actual working installer!\n\n**Screenshots: [link](https://www.reddit.com/r/unixporn/search?q=author%3Adylan112&sort=new&restrict_sr=on&t=all)**\n\n![scrot](https://i.imgur.com/0xflBsT.png)\n\n\n## Setup\n\n- Application Launcher: `rofi`\n- Music Player: `spotify`\n- Shell: `bash`\n- Terminal Emulator: `st`\n- Text Editor: `nvim`\n- Web Browser: `chromium`\n- Window Manager: `i3`\n\n\n## Installation\n\n1. Install `stow`\n2. `cd ~`\n3. `git clone --depth 1 https://github.com/dylanaraps/dotfiles`\n4. `git clone --depth 1 https://github.com/dylanaraps/bin`\n5. `cd dotfiles`\n6. `./install.sh`\n','<h1 id=\"dylansdotfiles\">Dylan\'s Dotfiles</h1>\n<p>My dotfiles, now with an actual working installer!</p>\n<p><strong>Screenshots: <a href=\"https://www.reddit.com/r/unixporn/search?q=author%3Adylan112&sort=new&restrict_sr=on&t=all\">link</a></strong></p>\n<p><img src=\"https://i.imgur.com/0xflBsT.png\" alt=\"scrot\" /></p>\n<h2 id=\"setup\">Setup</h2>\n<ul>\n<li>Application Launcher: <code>rofi</code></li>\n<li>Music Player: <code>spotify</code></li>\n<li>Shell: <code>bash</code></li>\n<li>Terminal Emulator: <code>st</code></li>\n<li>Text Editor: <code>nvim</code></li>\n<li>Web Browser: <code>chromium</code></li>\n<li>Window Manager: <code>i3</code></li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<ol>\n<li>Install <code>stow</code></li>\n<li><code>cd ~</code></li>\n<li><code>git clone --depth 1 https://github.com/dylanaraps/dotfiles</code></li>\n<li><code>git clone --depth 1 https://github.com/dylanaraps/bin</code></li>\n<li><code>cd dotfiles</code></li>\n<li><code>./install.sh</code></li>\n</ol>'),
	(19,'dylanaraps','dunst','https://raw.githubusercontent.com/dylanaraps/dunst/master/README.md','2018-11-07 12:30:31','[![Build Status](https://travis-ci.org/dunst-project/dunst.svg?branch=master)](https://travis-ci.org/dunst-project/dunst)\n\n## Dunst\n\n* [Wiki][wiki]\n* [Description](#description)\n* [Compiling](#compiling)\n* [Copyright](#copyright)\n\n## Description\n\nDunst is a highly configurable and lightweight notification daemon.\n\n\n## Compiling\n\nDunst has a number of build dependencies that must be present before attempting configuration. The names are different depending on [distribution](https://github.com/dunst-project/dunst/wiki/Dependencies):\n\n- dbus\n- libxinerama\n- libxrandr\n- libxss\n- libxdg-basedir\n- glib\n- pango/cairo\n- libgtk-3-dev\n\nCheckout the [wiki][wiki] for more information.\n\n## Bug reports\n\nPlease use the [issue tracker][issue-tracker] provided by GitHub to send us bug reports or feature requests. You can also join us on the IRC channel `#dunst` on Freenode.\n\n## Mantainers\n\nNikos Tsipinakis <nikos@tsipinakis.com>\n\nJonathan Lusso <jonilusso@gmail.com>\n\n## Author\n\nwritten by Sascha Kruse <dunst@knopwob.de>\n\n## Copyright\n\ncopyright 2013 Sascha Kruse and contributors (see LICENSE for licensing information)\n\nIf you feel that copyrights are violated, please send me an email.\n\n[issue-tracker]:  https://github.com/dunst-project/dunst/issues\n[wiki]: https://github.com/dunst-project/dunst/wiki\n','<p><a href=\"https://travis-ci.org/dunst-project/dunst\"><img src=\"https://travis-ci.org/dunst-project/dunst.svg?branch=master\" alt=\"Build Status\" /></a></p>\n<h2 id=\"dunst\">Dunst</h2>\n<ul>\n<li><a href=\"https://github.com/dunst-project/dunst/wiki\">Wiki</a></li>\n<li><a href=\"#description\">Description</a></li>\n<li><a href=\"#compiling\">Compiling</a></li>\n<li><a href=\"#copyright\">Copyright</a></li>\n</ul>\n<h2 id=\"description\">Description</h2>\n<p>Dunst is a highly configurable and lightweight notification daemon.</p>\n<h2 id=\"compiling\">Compiling</h2>\n<p>Dunst has a number of build dependencies that must be present before attempting configuration. The names are different depending on <a href=\"https://github.com/dunst-project/dunst/wiki/Dependencies\">distribution</a>:</p>\n<ul>\n<li>dbus</li>\n<li>libxinerama</li>\n<li>libxrandr</li>\n<li>libxss</li>\n<li>libxdg-basedir</li>\n<li>glib</li>\n<li>pango/cairo</li>\n<li>libgtk-3-dev</li>\n</ul>\n<p>Checkout the <a href=\"https://github.com/dunst-project/dunst/wiki\">wiki</a> for more information.</p>\n<h2 id=\"bugreports\">Bug reports</h2>\n<p>Please use the <a href=\"https://github.com/dunst-project/dunst/issues\">issue tracker</a> provided by GitHub to send us bug reports or feature requests. You can also join us on the IRC channel <code>#dunst</code> on Freenode.</p>\n<h2 id=\"mantainers\">Mantainers</h2>\n<p>Nikos Tsipinakis <a href=\"&#x6d;&#97;&#105;l&#116;&#111;&#x3a;&#x6e;&#x69;&#x6b;o&#115;&#x40;&#116;&#115;&#x69;p&#x69;&#x6e;&#97;&#107;&#105;&#115;&#46;c&#111;&#109;\">&#x6e;i&#x6b;&#x6f;&#115;&#64;&#116;&#x73;&#x69;&#112;&#105;&#110;&#x61;&#x6b;&#x69;&#x73;&#x2e;&#99;&#111;&#x6d;</a></p>\n<p>Jonathan Lusso <a href=\"&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#x6a;o&#110;&#105;&#x6c;&#x75;&#x73;&#115;&#111;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;\">&#x6a;&#111;&#110;&#x69;lu&#115;&#115;&#x6f;&#x40;g&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>\n<h2 id=\"author\">Author</h2>\n<p>written by Sascha Kruse <a href=\"&#x6d;a&#x69;&#x6c;&#x74;o&#x3a;&#100;&#x75;n&#x73;&#116;&#64;&#107;&#110;&#111;&#x70;&#x77;&#x6f;&#98;&#x2e;&#100;&#101;\">&#x64;&#117;&#110;&#x73;t&#64;&#x6b;n&#x6f;p&#x77;&#111;&#x62;&#46;&#100;&#101;</a></p>\n<h2 id=\"copyright\">Copyright</h2>\n<p>copyright 2013 Sascha Kruse and contributors (see LICENSE for licensing information)</p>\n<p>If you feel that copyrights are violated, please send me an email.</p>'),
	(20,'dylanaraps','dylanaraps.github.io-old','https://raw.githubusercontent.com/dylanaraps/dylanaraps.github.io-old/master/README.md','2018-11-07 12:30:31','# [https://dylanaraps.com/](https://dylanaraps.com/)\n\nMy personal website, currently under construction.\n\n\n### Setup\n\n- Install `nodejs` and `npm`\n- Install `gulp` globally.\n\n```sh\nsudo npm install -g gulp\n```\n\n- Install `gulp` and all of the<br \\>\ndependencies locally.\n\n```sh\nsudo npm install --save-dev\n\n```\n- Run `gulp`.\n\n','<h1 id=\"httpsdylanarapscomhttpsdylanarapscom\"><a href=\"https://dylanaraps.com/\">https://dylanaraps.com/</a></h1>\n<p>My personal website, currently under construction.</p>\n<h3 id=\"setup\">Setup</h3>\n<ul>\n<li>Install <code>nodejs</code> and <code>npm</code></li>\n<li>Install <code>gulp</code> globally.</li>\n</ul>\n<pre><code class=\"sh language-sh\">sudo npm install -g gulp\n</code></pre>\n<ul>\n<li>Install <code>gulp</code> and all of the<br \\>\ndependencies locally.</li>\n</ul>\n<pre><code class=\"sh language-sh\">sudo npm install --save-dev\n</code></pre>\n<ul>\n<li>Run <code>gulp</code>.</li>\n</ul>'),
	(21,'dylanaraps','Flatabulous-wal','https://raw.githubusercontent.com/dylanaraps/Flatabulous-wal/master/README.md','2018-11-07 12:30:31','# Flatabulous-wal\n\nThis is a fork of Flatabulous that includes some minor changes to make it compatible with the colors that are generated by [wal](https://github.com/dylanaraps/pywal). This fork will stay up to date with upstream and won\'t be merged into the main `wal` repository.\n\n(Below are snippets from the original README.)\n\n## Contributors\n\nList of all contributors can be found [here](https://github.com/anmoljagetia/Flatabulous/graphs/contributors). I would also like to specially thank :\n\n1. [Ed Bruck](https://github.com/ebruck) : For providing with the setup to create .deb files for the theme.\n2. [Dexbyte](https://github.com/dexbyte) : For providing the rounded corners in the latest master branch.\n3. [Adalid Gamero](https://github.com/gamerox) : For fixing the check-box issue on 14.xx and 15.xx systems.\n4. [Sergey](https://github.com/Defman21) : For removing transparency from Tool-tips on GTK3 Apps.\n\nYou guys are awesome!\n\n\n## License\n\n[MIT](http://anmoljagetia.mit-license.org/)\n','<h1 id=\"flatabulouswal\">Flatabulous-wal</h1>\n<p>This is a fork of Flatabulous that includes some minor changes to make it compatible with the colors that are generated by <a href=\"https://github.com/dylanaraps/pywal\">wal</a>. This fork will stay up to date with upstream and won\'t be merged into the main <code>wal</code> repository.</p>\n<p>(Below are snippets from the original README.)</p>\n<h2 id=\"contributors\">Contributors</h2>\n<p>List of all contributors can be found <a href=\"https://github.com/anmoljagetia/Flatabulous/graphs/contributors\">here</a>. I would also like to specially thank :</p>\n<ol>\n<li><a href=\"https://github.com/ebruck\">Ed Bruck</a> : For providing with the setup to create .deb files for the theme.</li>\n<li><a href=\"https://github.com/dexbyte\">Dexbyte</a> : For providing the rounded corners in the latest master branch.</li>\n<li><a href=\"https://github.com/gamerox\">Adalid Gamero</a> : For fixing the check-box issue on 14.xx and 15.xx systems.</li>\n<li><a href=\"https://github.com/Defman21\">Sergey</a> : For removing transparency from Tool-tips on GTK3 Apps.</li>\n</ol>\n<p>You guys are awesome!</p>\n<h2 id=\"license\">License</h2>\n<p><a href=\"http://anmoljagetia.mit-license.org/\">MIT</a></p>'),
	(22,'dylanaraps','i3','https://raw.githubusercontent.com/dylanaraps/i3/master/README.md','2018-11-07 12:30:31','[![Travis](https://img.shields.io/travis/Airblader/i3.svg)](https://travis-ci.org/Airblader/i3)\n[![Issues](https://img.shields.io/github/issues/Airblader/i3.svg)](https://github.com/Airblader/i3/issues)\n[![Forks](https://img.shields.io/github/forks/Airblader/i3.svg)](https://github.com/Airblader/i3/network)\n[![Stars](https://img.shields.io/github/stars/Airblader/i3.svg)](https://github.com/Airblader/i3/stargazers)\n\nAS-IS Enter at your own risk. Relevant changes can be found [src/x.c](src/x.c)\n\n# i3 - Unofficial Fork\n\nThis is a fork of [i3wm](http://www.i3wm.org), a tiling window manager for Linux. It includes a few additional features which you can read up on below.\n\nIf you want to check out how you could use them, you could check out my [dotfiles repository](https://www.github.com/Airblader/dotfiles-manjaro).\n\nThis fork, much like i3 itself, maintains two branches: The `gaps` branch is the equivalent of i3\'s stable `master` branch while `gaps-next` contains `gaps` and i3\'s `next`.\n\n\n# Installation\n\nPlease refer to the [wiki](https://github.com/Airblader/i3/wiki/Compiling-&-Installing) to see how i3-gaps can be installed and for which distributions there are packages available.\n\n# Screenshot\n\n![i3](http://i.imgur.com/y8sZE6o.jpg)\n\n\n# New Features\n\n## i3\n\n### gaps\n\nNote: Gaps will only work correctly if you disable window titlebars entirely. Unfortunately this is necessary due to the way i3 creates such bars on windows. You can disable them via `for_window [class=\"^.*\"] border pixel 0` in your config. You can also use any non-zero value as long as you only use pixel-style borders.\n\nBased on the patches provided by o4dev and jeanbroid, i3 supports gaps between containers. I extended those patches further to make changing the gaps size easier during runtime and also to expose more functionality for binding it to keys. Additionally, the gaps patch was fixed such that inner gaps (the gaps between adjacent containers) and outer gaps (gaps between the edge of the screen and a container) are the same. But I didn\'t stop there: these gaps are called \"inner\" gaps. This fork also allows setting \"outer\" gaps which inset all containers independently.\n\nIn your i3 config, you can set a global gap size as shown below. This is the default value that will be used for all workspaces:\n\n```\ngaps inner <px>\ngaps outer <px>\n```\n\nAdditionally, you can issue commands with the following syntax. This is useful, for example, to bind keys to changing the gap size:\n\n```\ngaps inner|outer current|all set|plus|minus <px>\n\n# Examples\ngaps inner all set 20\ngaps outer current plus 5\n```\n\nHere are the individual parts explained:\n\n* `inner|outer` specifies whether you want to modify inner gaps (gaps between adjacent containers) or outer gaps (gaps between the edge of a screen and a container).\n* `current|all` determines whether you want to modify the setting for the current workspace only or for all workspaces.\n* `set|plus|minus` allows you to either set a new, fixed value or make a relative change (in-/decrement).\n\nNote that outer gaps are an *addition* to inner gaps, so `gaps outer all set 0` will eliminate outer gaps, but if inner gaps are set, there will still be gaps on the edge of the screen.\n\nAdditionally, gaps can be specified on a per-workspace level by using the syntax known from assigning a workspace to a certain output:\n\n```\nworkspace <ws> gaps inner <px>\nworkspace <ws> gaps outer <px>\n```\n\nIt is important that these commands are specified after the global default since they are meant to override it.\nNote that multiple such assignments are allowed (and perhaps necessary).  The `ws` variable can either be a number or a name, so both of these are valid:\n\n```\nworkspace 1 gaps inner 0\nworkspace \"www\" gaps inner 0\n```\n\nHere is one possible idea on how you can use this feature within your i3 config. Simply press `$mod+Shift+g` to enter the gaps mode. Then choose between `o` and `i` for modifying outer / inner gaps. In this mode, you can press one of `+` / `-` (in-/decrement for current workspace) or `0` (remove gaps for current workspace). If you also press `Shift` with these keys, the change will be global for all workspaces.\n\n```\nset $mode_gaps Gaps: (o) outer, (i) inner\nset $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)\nset $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)\nbindsym $mod+Shift+g mode \"$mode_gaps\"\n\nmode \"$mode_gaps\" {\n        bindsym o      mode \"$mode_gaps_outer\"\n        bindsym i      mode \"$mode_gaps_inner\"\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n}\n\nmode \"$mode_gaps_inner\" {\n        bindsym plus  gaps inner current plus 5\n        bindsym minus gaps inner current minus 5\n        bindsym 0     gaps inner current set 0\n\n        bindsym Shift+plus  gaps inner all plus 5\n        bindsym Shift+minus gaps inner all minus 5\n        bindsym Shift+0     gaps inner all set 0\n\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n}\nmode \"$mode_gaps_outer\" {\n        bindsym plus  gaps outer current plus 5\n        bindsym minus gaps outer current minus 5\n        bindsym 0     gaps outer current set 0\n\n        bindsym Shift+plus  gaps outer all plus 5\n        bindsym Shift+minus gaps outer all minus 5\n        bindsym Shift+0     gaps outer all set 0\n\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n}\n```\n\n### Smart Gaps\n\nIf you want gaps to only be used if there is more than one container on the workspace, you can use\n\n```\nsmart_gaps on\n```\n\nThis will disable all gaps (outer and inner) on the workspace whenever only one container is on the current workspace.\n\n\n### Smart Borders\n\nBased on the patch from [i3-extras](https://github.com/ashinkarov/i3-extras), smart borders have been added in a configurable way. If activated, this patch will draw borders around a container only if it is not the only container in this workspace. It is disabled by default and can be activated with the command below. `on` will always activate it, while `no_gaps` will only activate it if the gap size to the edge of the screen is `0`.\n\n```\nsmart_borders on|no_gaps\n```\n### Hide Edge Borders\n\nAn additional option `smart_no_gaps` is available for `hide_edge_borders`. This will hide all borders on a container if it is the only container in the worskpace *and* the gap size to the edge is `0`. Otherwise all borders will be drawn normally.\n\n## i3bar\n\n### Background & Color\n\ni3bar now supports setting a background and border color for the individual blocks. Additionally, the border width for each of the four sides can be specified (where a width of `0` hides that border). Simply pass the following values via JSON to i3bar:\n\n* `background` [color] sets the background color\n* `border` [color] sets the border color\n* `border_top`, `border_bottom`, `border_left`, `border_right` [int] width of the corresponding border (defaults to `1`)\n\nExample:\n\n```\n{ \\\n  \"full_text\": \"example\", \\\n  \"color\": \"\\#FFFFFF\", \\\n  \"background\": \"\\#222222\", \\\n  \"border\": \"\\#9FBC00\", \\\n  \"border_bottom\": 0 \\\n}\n```\n\n### Bar Height\n\nThe height of any bar can be configured to have an arbitrary value. This is especially useful if you plan on using top/bottom borders on status blocks to make the bar taller. If the height is not set, it will be calculated as normal. To set it, use the `height` directive in the `bar` configuration block:\n\n```\nbar {\n        # height of the bar in pixels\n        height 25\n}\n```\n\n### Transparency / RGBA Colors\n\nAs an experimental feature, i3-gaps allows you to use RGBA colors for i3bar which allows for transparency. Please note that this has two implications:\n\n* Due to technical constraints which can only be solved by a lot of effort, the background of tray icons will always be fully transparent, no matter what the background color of your i3bar is.\n* This is experimental and bugs will only be fixed if doing so doesn\'t involve a lot of effort / big changes. The ability to easily stay up to date with upstream has priority.\n\nIn order to use this feature, run i3bar with the additional argument `-t`. This can be done in your i3 config as follows:\n\n```\nbar {\n        i3bar_command i3bar -t\n}\n```\n','<p><a href=\"https://travis-ci.org/Airblader/i3\"><img src=\"https://img.shields.io/travis/Airblader/i3.svg\" alt=\"Travis\" /></a>\n<a href=\"https://github.com/Airblader/i3/issues\"><img src=\"https://img.shields.io/github/issues/Airblader/i3.svg\" alt=\"Issues\" /></a>\n<a href=\"https://github.com/Airblader/i3/network\"><img src=\"https://img.shields.io/github/forks/Airblader/i3.svg\" alt=\"Forks\" /></a>\n<a href=\"https://github.com/Airblader/i3/stargazers\"><img src=\"https://img.shields.io/github/stars/Airblader/i3.svg\" alt=\"Stars\" /></a></p>\n<p>AS-IS Enter at your own risk. Relevant changes can be found <a href=\"src/x.c\">src/x.c</a></p>\n<h1 id=\"i3unofficialfork\">i3 - Unofficial Fork</h1>\n<p>This is a fork of <a href=\"http://www.i3wm.org\">i3wm</a>, a tiling window manager for Linux. It includes a few additional features which you can read up on below.</p>\n<p>If you want to check out how you could use them, you could check out my <a href=\"https://www.github.com/Airblader/dotfiles-manjaro\">dotfiles repository</a>.</p>\n<p>This fork, much like i3 itself, maintains two branches: The <code>gaps</code> branch is the equivalent of i3\'s stable <code>master</code> branch while <code>gaps-next</code> contains <code>gaps</code> and i3\'s <code>next</code>.</p>\n<h1 id=\"installation\">Installation</h1>\n<p>Please refer to the <a href=\"https://github.com/Airblader/i3/wiki/Compiling-&-Installing\">wiki</a> to see how i3-gaps can be installed and for which distributions there are packages available.</p>\n<h1 id=\"screenshot\">Screenshot</h1>\n<p><img src=\"http://i.imgur.com/y8sZE6o.jpg\" alt=\"i3\" /></p>\n<h1 id=\"newfeatures\">New Features</h1>\n<h2 id=\"i3\">i3</h2>\n<h3 id=\"gaps\">gaps</h3>\n<p>Note: Gaps will only work correctly if you disable window titlebars entirely. Unfortunately this is necessary due to the way i3 creates such bars on windows. You can disable them via <code>for_window [class=\"^.*\"] border pixel 0</code> in your config. You can also use any non-zero value as long as you only use pixel-style borders.</p>\n<p>Based on the patches provided by o4dev and jeanbroid, i3 supports gaps between containers. I extended those patches further to make changing the gaps size easier during runtime and also to expose more functionality for binding it to keys. Additionally, the gaps patch was fixed such that inner gaps (the gaps between adjacent containers) and outer gaps (gaps between the edge of the screen and a container) are the same. But I didn\'t stop there: these gaps are called \"inner\" gaps. This fork also allows setting \"outer\" gaps which inset all containers independently.</p>\n<p>In your i3 config, you can set a global gap size as shown below. This is the default value that will be used for all workspaces:</p>\n<pre><code>gaps inner &lt;px&gt;\ngaps outer &lt;px&gt;\n</code></pre>\n<p>Additionally, you can issue commands with the following syntax. This is useful, for example, to bind keys to changing the gap size:</p>\n<pre><code>gaps inner|outer current|all set|plus|minus &lt;px&gt;\n\n# Examples\ngaps inner all set 20\ngaps outer current plus 5\n</code></pre>\n<p>Here are the individual parts explained:</p>\n<ul>\n<li><code>inner|outer</code> specifies whether you want to modify inner gaps (gaps between adjacent containers) or outer gaps (gaps between the edge of a screen and a container).</li>\n<li><code>current|all</code> determines whether you want to modify the setting for the current workspace only or for all workspaces.</li>\n<li><code>set|plus|minus</code> allows you to either set a new, fixed value or make a relative change (in-/decrement).</li>\n</ul>\n<p>Note that outer gaps are an <em>addition</em> to inner gaps, so <code>gaps outer all set 0</code> will eliminate outer gaps, but if inner gaps are set, there will still be gaps on the edge of the screen.</p>\n<p>Additionally, gaps can be specified on a per-workspace level by using the syntax known from assigning a workspace to a certain output:</p>\n<pre><code>workspace &lt;ws&gt; gaps inner &lt;px&gt;\nworkspace &lt;ws&gt; gaps outer &lt;px&gt;\n</code></pre>\n<p>It is important that these commands are specified after the global default since they are meant to override it.\nNote that multiple such assignments are allowed (and perhaps necessary).  The <code>ws</code> variable can either be a number or a name, so both of these are valid:</p>\n<pre><code>workspace 1 gaps inner 0\nworkspace \"www\" gaps inner 0\n</code></pre>\n<p>Here is one possible idea on how you can use this feature within your i3 config. Simply press <code>$mod+Shift+g</code> to enter the gaps mode. Then choose between <code>o</code> and <code>i</code> for modifying outer / inner gaps. In this mode, you can press one of <code>+</code> / <code>-</code> (in-/decrement for current workspace) or <code>0</code> (remove gaps for current workspace). If you also press <code>Shift</code> with these keys, the change will be global for all workspaces.</p>\n<pre><code>set $mode_gaps Gaps: (o) outer, (i) inner\nset $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)\nset $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)\nbindsym $mod+Shift+g mode \"$mode_gaps\"\n\nmode \"$mode_gaps\" {\n        bindsym o      mode \"$mode_gaps_outer\"\n        bindsym i      mode \"$mode_gaps_inner\"\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n}\n\nmode \"$mode_gaps_inner\" {\n        bindsym plus  gaps inner current plus 5\n        bindsym minus gaps inner current minus 5\n        bindsym 0     gaps inner current set 0\n\n        bindsym Shift+plus  gaps inner all plus 5\n        bindsym Shift+minus gaps inner all minus 5\n        bindsym Shift+0     gaps inner all set 0\n\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n}\nmode \"$mode_gaps_outer\" {\n        bindsym plus  gaps outer current plus 5\n        bindsym minus gaps outer current minus 5\n        bindsym 0     gaps outer current set 0\n\n        bindsym Shift+plus  gaps outer all plus 5\n        bindsym Shift+minus gaps outer all minus 5\n        bindsym Shift+0     gaps outer all set 0\n\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n}\n</code></pre>\n<h3 id=\"smartgaps\">Smart Gaps</h3>\n<p>If you want gaps to only be used if there is more than one container on the workspace, you can use</p>\n<pre><code>smart_gaps on\n</code></pre>\n<p>This will disable all gaps (outer and inner) on the workspace whenever only one container is on the current workspace.</p>\n<h3 id=\"smartborders\">Smart Borders</h3>\n<p>Based on the patch from <a href=\"https://github.com/ashinkarov/i3-extras\">i3-extras</a>, smart borders have been added in a configurable way. If activated, this patch will draw borders around a container only if it is not the only container in this workspace. It is disabled by default and can be activated with the command below. <code>on</code> will always activate it, while <code>no_gaps</code> will only activate it if the gap size to the edge of the screen is <code>0</code>.</p>\n<pre><code>smart_borders on|no_gaps\n</code></pre>\n<h3 id=\"hideedgeborders\">Hide Edge Borders</h3>\n<p>An additional option <code>smart_no_gaps</code> is available for <code>hide_edge_borders</code>. This will hide all borders on a container if it is the only container in the worskpace <em>and</em> the gap size to the edge is <code>0</code>. Otherwise all borders will be drawn normally.</p>\n<h2 id=\"i3bar\">i3bar</h2>\n<h3 id=\"backgroundcolor\">Background &amp; Color</h3>\n<p>i3bar now supports setting a background and border color for the individual blocks. Additionally, the border width for each of the four sides can be specified (where a width of <code>0</code> hides that border). Simply pass the following values via JSON to i3bar:</p>\n<ul>\n<li><code>background</code> [color] sets the background color</li>\n<li><code>border</code> [color] sets the border color</li>\n<li><code>border_top</code>, <code>border_bottom</code>, <code>border_left</code>, <code>border_right</code> [int] width of the corresponding border (defaults to <code>1</code>)</li>\n</ul>\n<p>Example:</p>\n<pre><code>{ \\\n  \"full_text\": \"example\", \\\n  \"color\": \"\\#FFFFFF\", \\\n  \"background\": \"\\#222222\", \\\n  \"border\": \"\\#9FBC00\", \\\n  \"border_bottom\": 0 \\\n}\n</code></pre>\n<h3 id=\"barheight\">Bar Height</h3>\n<p>The height of any bar can be configured to have an arbitrary value. This is especially useful if you plan on using top/bottom borders on status blocks to make the bar taller. If the height is not set, it will be calculated as normal. To set it, use the <code>height</code> directive in the <code>bar</code> configuration block:</p>\n<pre><code>bar {\n        # height of the bar in pixels\n        height 25\n}\n</code></pre>\n<h3 id=\"transparencyrgbacolors\">Transparency / RGBA Colors</h3>\n<p>As an experimental feature, i3-gaps allows you to use RGBA colors for i3bar which allows for transparency. Please note that this has two implications:</p>\n<ul>\n<li>Due to technical constraints which can only be solved by a lot of effort, the background of tray icons will always be fully transparent, no matter what the background color of your i3bar is.</li>\n<li>This is experimental and bugs will only be fixed if doing so doesn\'t involve a lot of effort / big changes. The ability to easily stay up to date with upstream has priority.</li>\n</ul>\n<p>In order to use this feature, run i3bar with the additional argument <code>-t</code>. This can be done in your i3 config as follows:</p>\n<pre><code>bar {\n        i3bar_command i3bar -t\n}\n</code></pre>'),
	(23,'dylanaraps','i3-style','https://raw.githubusercontent.com/dylanaraps/i3-style/master/README.md','2018-11-07 12:30:31','# i3-style\n\nMake your [i3](http://i3wm.org) config a little more stylish.\n\n[![NPM](https://nodei.co/npm/i3-style.png?compact=true)](https://nodei.co/npm/i3-style/)\n\n[![NPM](https://nodei.co/npm-dl/i3-style.png?months=6)](https://nodei.co/npm/i3-style/)\n\n## About\n\ni3-style applies a theme to your i3 config file to change the colorscheme of the window decorations and the different parts of i3bar. It\'s designed especially for people who make frequent changes to their colorscheme to get things just right.\n\n* Easy to try out new themes right after you install.\n* Themes are easy to read, modify, and share.\n* Modifies your theme in place - extra template files are not needed.\n\nFor an overview of the capabilities of i3-style, see my [blog post](http://dubstepdish.com/blog/2013/11/06/introducing-i3-style/).\n\n## Installing\n\nTo install with [npm](https://npmjs.org/):\n\n    npm install -g i3-style\n\nThe `i3-style` executable should now be in your PATH.\n\n## Usage\n\nJust call `i3-style` with the name of the theme you want to try and where you want to write the config file to. i3-style will look for your config in the default place and apply the theme.\n\n    i3-style solarized -o ~/.config/i3/config --reload\n\nCheck the `themes` directory for the list of built-in themes.\n\nIf you want to modify a theme, copy it from `themes` and give it a `.yaml` extension. The object format is [well-documented](https://github.com/acrisci/i3-style/blob/master/doc/spec.md) and includes support for color aliases. Then back up your config and call i3-style.\n\n    i3-style ~/.config/i3/solarized.yaml -o ~/.config/i3/config\n\nJust keep doing that until you get it perfect (which might be never).\n\n## Send us themes!\n\nDo you have a cool colorscheme in your config file that you want to share with other people? i3-style can automatically convert it to a theme file:\n\n    i3-style --to-theme ~/.config/i3/config -o my-theme.yaml\n\nIf you have a new theme, or made an improvement to an existing theme, please make a pull request adding your theme to the `themes` directory!\n\n## License\n\nThis work is available under a FreeBSD License (see LICENSE).\n\nCopyright © 2013, Tony Crisci\n\nAll rights reserved.\n','<h1 id=\"i3style\">i3-style</h1>\n<p>Make your <a href=\"http://i3wm.org\">i3</a> config a little more stylish.</p>\n<p><a href=\"https://nodei.co/npm/i3-style/\"><img src=\"https://nodei.co/npm/i3-style.png?compact=true\" alt=\"NPM\" /></a></p>\n<p><a href=\"https://nodei.co/npm/i3-style/\"><img src=\"https://nodei.co/npm-dl/i3-style.png?months=6\" alt=\"NPM\" /></a></p>\n<h2 id=\"about\">About</h2>\n<p>i3-style applies a theme to your i3 config file to change the colorscheme of the window decorations and the different parts of i3bar. It\'s designed especially for people who make frequent changes to their colorscheme to get things just right.</p>\n<ul>\n<li>Easy to try out new themes right after you install.</li>\n<li>Themes are easy to read, modify, and share.</li>\n<li>Modifies your theme in place - extra template files are not needed.</li>\n</ul>\n<p>For an overview of the capabilities of i3-style, see my <a href=\"http://dubstepdish.com/blog/2013/11/06/introducing-i3-style/\">blog post</a>.</p>\n<h2 id=\"installing\">Installing</h2>\n<p>To install with <a href=\"https://npmjs.org/\">npm</a>:</p>\n<pre><code>npm install -g i3-style\n</code></pre>\n<p>The <code>i3-style</code> executable should now be in your PATH.</p>\n<h2 id=\"usage\">Usage</h2>\n<p>Just call <code>i3-style</code> with the name of the theme you want to try and where you want to write the config file to. i3-style will look for your config in the default place and apply the theme.</p>\n<pre><code>i3-style solarized -o ~/.config/i3/config --reload\n</code></pre>\n<p>Check the <code>themes</code> directory for the list of built-in themes.</p>\n<p>If you want to modify a theme, copy it from <code>themes</code> and give it a <code>.yaml</code> extension. The object format is <a href=\"https://github.com/acrisci/i3-style/blob/master/doc/spec.md\">well-documented</a> and includes support for color aliases. Then back up your config and call i3-style.</p>\n<pre><code>i3-style ~/.config/i3/solarized.yaml -o ~/.config/i3/config\n</code></pre>\n<p>Just keep doing that until you get it perfect (which might be never).</p>\n<h2 id=\"sendusthemes\">Send us themes!</h2>\n<p>Do you have a cool colorscheme in your config file that you want to share with other people? i3-style can automatically convert it to a theme file:</p>\n<pre><code>i3-style --to-theme ~/.config/i3/config -o my-theme.yaml\n</code></pre>\n<p>If you have a new theme, or made an improvement to an existing theme, please make a pull request adding your theme to the <code>themes</code> directory!</p>\n<h2 id=\"license\">License</h2>\n<p>This work is available under a FreeBSD License (see LICENSE).</p>\n<p>Copyright © 2013, Tony Crisci</p>\n<p>All rights reserved.</p>'),
	(24,'dylanaraps','neofetch','https://raw.githubusercontent.com/dylanaraps/neofetch/master/README.md','2018-11-07 12:30:31','<h3 align=\"center\"><img src=\"https://i.imgur.com/ZQI2EYz.png\" alt=\"logo\" height=\"100px\"></h3>\n<p align=\"center\">A command-line system information tool written in bash 3.2+</p>\n\n<p align=\"center\">\n<a href=\"https://discord.gg/BtnTPFF\"><img src=\"https://img.shields.io/discord/440354555197128704.svg\"></a>\n<a href=\"https://travis-ci.org/dylanaraps/neofetch\"><img src=\"https://travis-ci.org/dylanaraps/neofetch.svg?branch=master\"></a>\n<a href=\"./LICENSE.md\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n<a href=\"https://github.com/dylanaraps/neofetch/releases\"><img src=\"https://img.shields.io/github/release/dylanaraps/neofetch.svg\"></a>\n<a href=\"https://repology.org/metapackage/neofetch\"><img src=\"https://repology.org/badge/tiny-repos/neofetch.svg\" alt=\"Packaging status\"></a>\n<a href=\"#donate\"><img src=\"https://img.shields.io/badge/donate-donate-yellow.svg\"></a>\n</p>\n\n<img src=\"https://i.imgur.com/GFmC5Ad.png\" alt=\"neofetch\" align=\"right\" height=\"240px\">\n\nNeofetch is a command-line system information tool written in `bash 3.2+`. Neofetch displays information about your operating system, software and hardware in an aesthetic and visually pleasing way.\n\nThe overall purpose of Neofetch is to be used in screen-shots of your system. Neofetch shows the information other people want to see. There are other tools available for proper system statistic/diagnostics.\n\nThe information by default is displayed alongside your operating system\'s logo. You can further configure Neofetch to instead use an image, a custom ASCII file, your wallpaper or nothing at all.\n\n<img src=\"https://i.imgur.com/lUrkQBN.png\" alt=\"neofetch\" align=\"right\" height=\"240px\">\n\nYou can further configure Neofetch to display exactly what you want it to. Through the use of command-line flags and the configuration file you can change existing information outputs or add your own custom ones.\n\nNeofetch supports almost 150 different operating systems. From Linux to Windows, all the way to more obscure operating systems like Minix, AIX and Haiku. If your favourite operating system is unsupported: Open up an issue and support will be added.\n\n\n### More: \\[[Dependencies](https://github.com/dylanaraps/neofetch/wiki/Dependencies)\\] \\[[Installation](https://github.com/dylanaraps/neofetch/wiki/Installation)\\] \\[[Wiki](https://github.com/dylanaraps/neofetch/wiki)\\]\n\n## Articles\n\n- https://lamiradadelreplicante.com/2016/05/15/la-informacion-de-tu-sistema-en-la-terminal-con-neofetch/\n- https://linuxconfig.org/how-to-display-system-information-with-neofetch\n- https://www.2daygeek.com/neofetch-display-linux-systems-information-ascii-distribution-logo-terminal/\n- https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/\n- https://www.lffl.org/2016/11/neofetch-le-informazioni-sistema-sul-terminale-stile.html\n- https://www.maketecheasier.com/display-system-information-neofetch-linux/\n- https://www.omgubuntu.co.uk/2016/11/neofetch-terminal-system-info-app\n- https://www.omgubuntu.co.uk/2016/12/cli-system-tool-neofetch-2-0-released\n- https://www.omgubuntu.co.uk/2017/01/neofetch-3-0-released\n- https://www.ostechnix.com/neofetch-display-linux-systems-information/\n- https://www.techrepublic.com/article/how-to-get-all-the-information-you-need-about-your-linux-machine-with-a-single-command/\n- https://www.tecmint.com/neofetch-shows-linux-system-information-with-logo/\n- https://www.youtube.com/watch?v=bgepGW858fc\n- https://www.linuxuprising.com/2018/05/display-system-information-on-linux.html\n- https://esgeeks.com/neofetch-informacion-sistema-linux/\n\n\n## Thanks\n\n- [Contributors](https://github.com/dylanaraps/neofetch/contributors)\n- [Packagers](https://github.com/dylanaraps/neofetch/issues/115)\n- [Screenfetch](https://github.com/KittyKatt/screenFetch)\n- [ufetch](https://github.com/jschx/ufetch)\n\n\n## Donate\n\nDonations allow me to spend more time working on `neofetch` and my other Open Source projects. If you like `neofetch` and want to give back in some way you can donate at the links below.\n\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=V7QNJNKS3WYVS\"><img src=\"https://img.shields.io/badge/donate-paypal-yellow.svg\"></a> <a href=\"https://www.patreon.com/dyla\"><img src=\"https://img.shields.io/badge/donate-patreon-yellow.svg\"> </a><a href=\"https://liberapay.com/2211/\"><img src=\"https://img.shields.io/badge/donate-liberapay-yellow.svg\"></a>\n\n','<h3 align=\"center\"><img src=\"https://i.imgur.com/ZQI2EYz.png\" alt=\"logo\" height=\"100px\"></h3>\n<p align=\"center\">A command-line system information tool written in bash 3.2+</p>\n<p align=\"center\">\n<a href=\"https://discord.gg/BtnTPFF\"><img src=\"https://img.shields.io/discord/440354555197128704.svg\"></a>\n<a href=\"https://travis-ci.org/dylanaraps/neofetch\"><img src=\"https://travis-ci.org/dylanaraps/neofetch.svg?branch=master\"></a>\n<a href=\"./LICENSE.md\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n<a href=\"https://github.com/dylanaraps/neofetch/releases\"><img src=\"https://img.shields.io/github/release/dylanaraps/neofetch.svg\"></a>\n<a href=\"https://repology.org/metapackage/neofetch\"><img src=\"https://repology.org/badge/tiny-repos/neofetch.svg\" alt=\"Packaging status\"></a>\n<a href=\"#donate\"><img src=\"https://img.shields.io/badge/donate-donate-yellow.svg\"></a>\n</p>\n<p><img src=\"https://i.imgur.com/GFmC5Ad.png\" alt=\"neofetch\" align=\"right\" height=\"240px\"></p>\n<p>Neofetch is a command-line system information tool written in <code>bash 3.2+</code>. Neofetch displays information about your operating system, software and hardware in an aesthetic and visually pleasing way.</p>\n<p>The overall purpose of Neofetch is to be used in screen-shots of your system. Neofetch shows the information other people want to see. There are other tools available for proper system statistic/diagnostics.</p>\n<p>The information by default is displayed alongside your operating system\'s logo. You can further configure Neofetch to instead use an image, a custom ASCII file, your wallpaper or nothing at all.</p>\n<p><img src=\"https://i.imgur.com/lUrkQBN.png\" alt=\"neofetch\" align=\"right\" height=\"240px\"></p>\n<p>You can further configure Neofetch to display exactly what you want it to. Through the use of command-line flags and the configuration file you can change existing information outputs or add your own custom ones.</p>\n<p>Neofetch supports almost 150 different operating systems. From Linux to Windows, all the way to more obscure operating systems like Minix, AIX and Haiku. If your favourite operating system is unsupported: Open up an issue and support will be added.</p>\n<h3 id=\"moredependencieshttpsgithubcomdylanarapsneofetchwikidependenciesinstallationhttpsgithubcomdylanarapsneofetchwikiinstallationwikihttpsgithubcomdylanarapsneofetchwiki\">More: [<a href=\"https://github.com/dylanaraps/neofetch/wiki/Dependencies\">Dependencies</a>] [<a href=\"https://github.com/dylanaraps/neofetch/wiki/Installation\">Installation</a>] [<a href=\"https://github.com/dylanaraps/neofetch/wiki\">Wiki</a>]</h3>\n<h2 id=\"articles\">Articles</h2>\n<ul>\n<li>https://lamiradadelreplicante.com/2016/05/15/la-informacion-de-tu-sistema-en-la-terminal-con-neofetch/</li>\n<li>https://linuxconfig.org/how-to-display-system-information-with-neofetch</li>\n<li>https://www.2daygeek.com/neofetch-display-linux-systems-information-ascii-distribution-logo-terminal/</li>\n<li>https://www.cyberciti.biz/howto/neofetch-awesome-system-info-bash-script-for-linux-unix-macos/</li>\n<li>https://www.lffl.org/2016/11/neofetch-le-informazioni-sistema-sul-terminale-stile.html</li>\n<li>https://www.maketecheasier.com/display-system-information-neofetch-linux/</li>\n<li>https://www.omgubuntu.co.uk/2016/11/neofetch-terminal-system-info-app</li>\n<li>https://www.omgubuntu.co.uk/2016/12/cli-system-tool-neofetch-2-0-released</li>\n<li>https://www.omgubuntu.co.uk/2017/01/neofetch-3-0-released</li>\n<li>https://www.ostechnix.com/neofetch-display-linux-systems-information/</li>\n<li>https://www.techrepublic.com/article/how-to-get-all-the-information-you-need-about-your-linux-machine-with-a-single-command/</li>\n<li>https://www.tecmint.com/neofetch-shows-linux-system-information-with-logo/</li>\n<li>https://www.youtube.com/watch?v=bgepGW858fc</li>\n<li>https://www.linuxuprising.com/2018/05/display-system-information-on-linux.html</li>\n<li>https://esgeeks.com/neofetch-informacion-sistema-linux/</li>\n</ul>\n<h2 id=\"thanks\">Thanks</h2>\n<ul>\n<li><a href=\"https://github.com/dylanaraps/neofetch/contributors\">Contributors</a></li>\n<li><a href=\"https://github.com/dylanaraps/neofetch/issues/115\">Packagers</a></li>\n<li><a href=\"https://github.com/KittyKatt/screenFetch\">Screenfetch</a></li>\n<li><a href=\"https://github.com/jschx/ufetch\">ufetch</a></li>\n</ul>\n<h2 id=\"donate\">Donate</h2>\n<p>Donations allow me to spend more time working on <code>neofetch</code> and my other Open Source projects. If you like <code>neofetch</code> and want to give back in some way you can donate at the links below.</p>\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=V7QNJNKS3WYVS\"><img src=\"https://img.shields.io/badge/donate-paypal-yellow.svg\"></a> <a href=\"https://www.patreon.com/dyla\"><img src=\"https://img.shields.io/badge/donate-patreon-yellow.svg\"> </a><a href=\"https://liberapay.com/2211/\"><img src=\"https://img.shields.io/badge/donate-liberapay-yellow.svg\"></a></p>'),
	(25,'dylanaraps','neofetch-branding','https://raw.githubusercontent.com/dylanaraps/neofetch-branding/master/README.md','2018-11-07 12:30:31','# Neofetch Branding\n\n![](big.png)\n![](big-with-text.png)\n![](discord-corrupt.png)\n![](discord-oss.png)\n![](discord.png)\n![](logo.png)\n![](square-dark.png)\n![](square-light.png)\n','<h1 id=\"neofetchbranding\">Neofetch Branding</h1>\n<p><img src=\"big.png\" alt=\"\" />\n<img src=\"big-with-text.png\" alt=\"\" />\n<img src=\"discord-corrupt.png\" alt=\"\" />\n<img src=\"discord-oss.png\" alt=\"\" />\n<img src=\"discord.png\" alt=\"\" />\n<img src=\"logo.png\" alt=\"\" />\n<img src=\"square-dark.png\" alt=\"\" />\n<img src=\"square-light.png\" alt=\"\" /></p>'),
	(26,'dylanaraps','nfu','https://raw.githubusercontent.com/dylanaraps/nfu/master/README.md','2018-11-07 12:30:31','# nfu - Neofetch Utils\n\nA small set of C binaries for use in custom fetch scripts.\n','<h1 id=\"nfuneofetchutils\">nfu - Neofetch Utils</h1>\n<p>A small set of C binaries for use in custom fetch scripts.</p>'),
	(27,'dylanaraps','nnn','https://raw.githubusercontent.com/dylanaraps/nnn/master/README.md','2018-11-07 12:30:31','## nnn\n\nNoice is Not Noice, a noicer fork...\n\n<p align=\"center\">\n<a href=\"https://github.com/jarun/nnn/releases/latest\"><img src=\"https://img.shields.io/github/release/jarun/nnn.svg?maxAge=600\" alt=\"Latest release\" /></a>\n<a href=\"https://aur.archlinux.org/packages/nnn\"><img src=\"https://img.shields.io/aur/version/nnn.svg?maxAge=600\" alt=\"AUR\" /></a>\n<a href=\"http://formulae.brew.sh/formula/nnn\"><img src=\"https://img.shields.io/homebrew/v/nnn.svg?maxAge=600\" alt=\"Homebrew\" /></a>\n<a href=\"https://packages.debian.org/search?keywords=nnn&searchon=names&exact=1\"><img src=\"https://img.shields.io/badge/debian-10+-blue.svg?maxAge=2592000\" alt=\"Debian Buster+\" /></a>\n<a href=\"https://apps.fedoraproject.org/packages/nnn\"><img src=\"https://img.shields.io/badge/fedora-27+-blue.svg?maxAge=2592000\" alt=\"Fedora 27+\" /></a>\n<a href=\"https://software.opensuse.org/package/nnn\"><img src=\"https://img.shields.io/badge/opensuse%20leap-15.0+-blue.svg?maxAge=2592000\" alt=\"openSUSE Leap 15.0+\" /></a>\n<a href=\"https://packages.ubuntu.com/search?keywords=nnn&searchon=names&exact=1\"><img src=\"https://img.shields.io/badge/ubuntu-17.10+-blue.svg?maxAge=2592000\" alt=\"Ubuntu Artful+\" /></a>\n</p>\n\n<p align=\"center\">\n<a href=\"https://github.com/jarun/nnn/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-BSD%202--Clause-yellow.svg?maxAge=2592000\" alt=\"License\" /></a>\n<a href=\"https://travis-ci.org/jarun/nnn\"><img src=\"https://travis-ci.org/jarun/nnn.svg?branch=master\" alt=\"Build Status\" /></a>\n</p>\n\n[![nnn screencast](https://i.imgur.com/wNtI24c.jpg)](https://vimeo.com/233223942 \"Click to see nnn in action!\")\n\n<p align=\"center\"><i>nnn in action! (click to play video)</i></a></p>\n\n`nnn` is probably the [fastest and most resource-sensitive](#performance) (with all its capabilities) file manager you have ever used. It\'s extremely flexible too - integrates with your DE and favourite GUI utilities, works with the desktop opener, supports bookmarks, has smart navigation shortcuts, [navigate-as-you-type](#navigate-as-you-type-mode) mode, disk usage analyzer mode, comprehensive file details and much more. `nnn` was initially forked from [noice](http://git.2f30.org/noice/) but is significantly [different](https://github.com/jarun/nnn/wiki/nnn-vs.-noice) today.\n\nIf you want to edit a file in vi with some soothing music in the background while referring to a spec in your GUI PDF viewer, `nnn` got it! [Quickstart](#quickstart) and see how `nnn` simplifies those long desktop sessions...\n\n`nnn` supports as many scripts as you want to run! So you can [integrate utilities](https://github.com/jarun/nnn#sample-scripts) like sxiv (to view images in a directory) or fzy (to fuzzy find files in a directory tree) easily.\n\nHave fun with it! Missing a feature? Want to contribute? Head to the rolling [ToDo list](https://github.com/jarun/nnn/issues/110).\n\n*Love smart and efficient utilities? Explore [my repositories](https://github.com/jarun?tab=repositories). Buy me a cup of coffee if they help you.*\n\n<p align=\"center\">\n<a href=\"https://saythanks.io/to/jarun\"><img src=\"https://img.shields.io/badge/say-thanks!-ff69b4.svg\" /></a>\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=RMLTQ76JSXJ4Q\"><img src=\"https://img.shields.io/badge/PayPal-donate-green.svg\" alt=\"Donate via PayPal!\" /></a>\n</p>\n\n### Table of Contents\n\n- [Features](#features)\n- [Performance](#performance)\n- [Installation](#installation)\n  - [Dependencies](#dependencies)\n  - [From a package manager](#from-a-package-manager)\n  - [Release packages](#release-packages)\n  - [From source](#from-source)\n- [Shell completion](#shell-completion)\n- [Usage](#usage)\n  - [Cmdline options](#cmdline-options)\n  - [Keyboard shortcuts](#keyboard-shortcuts)\n  - [Filters](#filters)\n  - [Navigate-as-you-type mode](#navigate-as-you-type-mode)\n  - [File indicators](#file-indicators)\n  - [File handling](#file-handling)\n  - [Help](#help)\n- [Quickstart](#quickstart)\n- [How to](#how-to)\n  - [add bookmarks](#add-bookmarks)\n  - [use cd .....](#use-cd-)\n  - [cd on quit](#cd-on-quit)\n  - [copy file paths to clipboard](#copy-file-paths-to-clipboard)\n  - [copy file paths when X is missing](#copy-file-paths-when-x-is-missing)\n  - [run custom scripts](#run-custom-scripts)\n    - [sample scripts](#sample-scripts)\n  - [dual-pane or multi-pane](#dual-pane-or-multi-pane)\n  - [change dir color](#change-dir-color)\n  - [file copy, move, delete](#file-copy-move-delete)\n  - [integrate patool](#integrate-patool)\n  - [work faster at rename prompt](#work-faster-at-rename-prompt)\n  - [set idle timeout](#set-idle-timeout)\n  - [show hot plugged drives](#show-hot-plugged-drives)\n  - [tmux config](#tmux-config)\n- [Why fork?](#why-fork)\n- [Mentions](#mentions)\n- [Developers](#developers)\n\n### Features\n\n- Modes - basic, detail, disk usage analyzer (du)\n- Navigation\n  - Familiar, easy shortcuts (arrows, `~`, `-`, `&`)\n  - *Navigate-as-you-type* mode with dir auto-select for the maverick\n  - Handy bookmarks, start at bookmark, pin and visit directory\n  - chdir prompt with tab completion (interprets cd ..... too!)\n  - Roll-over at edges, page through entries\n  - Show directories in custom color (default: enabled in blue)\n- Sorting\n  - Directories always listed on top\n  - Sort by file name, modification time, size\n  - Numeric order (1, 2, ... 10, 11, ...) for numeric names\n- Search\n  - Superfast directory content filtering with *search-as-you-type*\n  - Desktop search (gnome-search-tool, catfish) integration\n- Mimes\n  - Open with desktop opener (default) or specify a custom app\n  - Create, list and extract archives (needs atool/patool)\n  - Optionally open text files in EDITOR (fallback vi)\n  - Customizable bash script [nlay](https://github.com/jarun/nnn/wiki/all-about-nlay) to handle actions\n- Information\n  - Detailed stat-like file information\n  - Media information (needs mediainfo or exiftool, if specified)\n- Convenience\n  - Create, rename files and directories\n  - Batch rename/move/delete current directory entries in vidir (from moreutils)\n  - Spawn SHELL (fallback sh) in the current directory\n  - Run custom scripts in the current directory\n  - Copy absolute file paths with/without X (*easy* shell integration)\n  - Change directory at exit (*easy* shell integration)\n  - Open any file in EDITOR (fallback vi) or PAGER (fallback less)\n  - Open current directory in a custom GUI file manager\n  - Terminal screensaver/locker integration\n- Unicode support\n- Highly optimized code, minimal resource usage\n\n### Performance\n\n`nnn` vs. ncdu memory usage in disk usage analyzer mode (401385 files on disk):\n\n```\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 5034 vaio      20   0   70360  58764   2244 S   0.0  0.7   0:00.80 ncdu /\n 4949 vaio      20   0   17520   4224   2584 S   0.0  0.1   0:00.54 nnn -S /\n```\n\n`nnn` vs. midnight commander vs. ranger memory usage while viewing a directory with 13790 files, sorted by size:\n\n```\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n16255 vaio      20   0  101392  59304   7928 S   0.0  0.7   0:00.68 /usr/bin/python -O /usr/bin/ranger\n15971 vaio      20   0   65732  11784   6848 S   0.0  0.1   0:00.56 mc\n16198 vaio      20   0   18520   4900   2536 S   0.3  0.1   0:00.14 nnn\n```\n\nIntrigued? Find out [HOW](https://github.com/jarun/nnn/wiki/performance-factors).\n\n### Installation\n\n#### Dependencies\n\n`nnn` needs libncursesw (on Linux or ncurses on OS X) and standard libc.\n\n#### From a package manager\n\n- [AUR](https://aur.archlinux.org/packages/nnn/) (`yaourt -S nnn`)\n- [Debian](https://packages.debian.org/search?keywords=nnn&searchon=names&exact=1) (`apt-get install nnn`)\n- [Fedora](https://apps.fedoraproject.org/packages/nnn) (`dnf install nnn`)\n- [FreeBSD](https://www.freshports.org/misc/nnn) (`pkg install nnn`)\n- [Gentoo](https://packages.gentoo.org/packages/app-misc/nnn) (`emerge nnn`)\n- [Homebrew](http://formulae.brew.sh/formula/nnn) (`brew install nnn`)\n- [NixOS](https://github.com/NixOS/nixpkgs/tree/master/pkgs/applications/misc/nnn) (`nix-env -i nnn`)\n- [OpenBSD](https://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/sysutils/nnn/) (`pkg_add nnn`)\n- [openSUSE](https://software.opensuse.org/package/nnn) (and packages for several other distros) (`zypper in nnn`)\n- [Slackware](http://slackbuilds.org/repository/14.2/system/nnn/) (`slackpkg install nnn`)\n- [Source Mage](http://codex.sourcemage.org/test/shell-term-fm/nnn/) (`cast nnn`)\n- [Ubuntu](https://packages.ubuntu.com/search?keywords=nnn&searchon=names&exact=1) (`apt-get install nnn`)\n- [Ubuntu PPA](https://launchpad.net/~twodopeshaggy/+archive/ubuntu/jarun/) (`apt-get install nnn`)\n- [Void Linux](https://github.com/void-linux/void-packages/tree/master/srcpkgs/nnn) (`xbps-install -S nnn`)\n\n#### Release packages\n\nPackages for Arch Linux, CentOS, Debian, Fedora and Ubuntu are available with the [latest stable release](https://github.com/jarun/nnn/releases/latest).\n\n#### From source\n\nTo cook yourself, download the [latest stable release](https://github.com/jarun/nnn/releases/latest) or clone this repository (*risky*). Then install the dependencies and compile (e.g. on Ubuntu 16.04):\n\n    $ sudo apt-get install pkg-config libncursesw5-dev\n    $ make\n    $ sudo make install\n\n`PREFIX` is supported, in case you want to install to a different location.\n\n### Shell completion\n\nSearch keyword and option completion scripts for Bash, Fish and Zsh can be found in respective subdirectories of [`scripts/auto-completion/`](scripts/auto-completion). Please refer to your shell\'s manual for installation instructions.\n\n### Usage\n\n#### Cmdline options\n\n```\nusage: nnn [-b key] [-c N] [-e] [-i] [-l]\n           [-p nlay] [-S] [-v] [-h] [PATH]\n\nThe missing terminal file manager for X.\n\npositional args:\n  PATH   start dir [default: current dir]\n\noptional args:\n -b key  specify bookmark key to open\n -c N    specify dir color, disables if N>7\n -e      use exiftool instead of mediainfo\n -i      start in navigate-as-you-type mode\n -l      start in light mode\n -p nlay path to custom nlay\n -S      start in disk usage analyser mode\n -v      show program version and exit\n -h      show this help and exit\n```\n\n`>` indicates the currently selected entry in `nnn`.\n\n#### Keyboard shortcuts\n\n```\n            Key | Function\n              - + -\n       ↑, k, ^P | Prev entry\n       ↓, j, ^N | Next entry\n       PgUp, ^U | Scroll half page up\n       PgDn, ^D | Scroll half page down\n Home, g, ^, ^A | First entry\n  End, G, $, ^E | Last entry\n    →, ↵, l, ^M | Open file/enter dir\n ←, Bksp, h, ^H | Parent dir\n             ^O | Open with...\n     Insert, ^I | Toggle nav-as-you-type\n              ~ | Go HOME\n              & | Start-up dir\n              - | Last visited dir\n              / | Filter entries\n             ^/ | Open desktop search app\n              . | Toggle show . files\n             ^B | Bookmark prompt\n              b | Pin current dir\n             ^V | Go to pinned dir\n              c | Change dir prompt\n              d | Toggle detail view\n              D | File details\n              m | Brief media info\n              M | Full media info\n              n | Create new\n             ^R | Rename entry\n              r | Open dir in vidir\n              s | Toggle sort by size\n              S | Toggle apparent size\n             ^J | Toggle du mode\n              t | Toggle sort by mtime\n          !, ^] | Spawn SHELL in dir\n              R | Run custom script\n              e | Edit entry in EDITOR\n              o | Open DE filemanager\n              p | Open entry in PAGER\n              f | Archive entry\n              F | List archive\n             ^F | Extract archive\n      Space, ^K | Copy file path\n             ^Y | Toggle multi-copy\n             ^T | Toggle path quote\n             ^L | Redraw, clear prompt\n              L | Lock terminal\n              ? | Help, settings\n          Q, ^G | Quit and cd\n          q, ^X | Quit\n```\n\nHelp & settings, file details, media info and archive listing are shown in the PAGER. Please use the PAGER-specific keys in these screens.\n\n#### Filters\n\nFilters support regexes to instantly (search-as-you-type) list the matching entries in the current directory.\n\nThere are 3 ways to reset a filter:\n- pressing <kbd>^L</kbd> (at the new/rename prompt <kbd>^L</kbd> followed by <kbd>Enter</kbd> discards all changes and exits prompt)\n- a search with no matches\n- an extra backspace at the filter prompt (like vi)\n\nCommon use cases:\n- to list all matches starting with the filter expression, start the expression with a `^` (caret) symbol\n- type `\\.mkv` to list all MKV files\n- use `.*` to match any character (_sort of_ fuzzy search)\n\nIf `nnn` is invoked as root or the environment variable `NNN_SHOW_HIDDEN` is set the default filter will also match hidden files.\n\n#### Navigate-as-you-type mode\n\nIn this mode directories are opened in filter mode, allowing continuous navigation. Works best with the **arrow keys**.\n\nIn case of only one match and it\'s a directory, `nnn` auto selects the directory and enters it in this mode.\n\n#### File indicators\n\nThe following indicators are used in the detail view:\n\n| Indicator | File Type |\n|:---:| --- |\n| `/` | Directory |\n| `*` | Executable |\n| <code>&#124;</code> | Fifo |\n| `=` | Socket |\n| `@` | Symbolic Link |\n| `@/` | Symbolic Link to directory |\n| `b` | Block Device |\n| `c` | Character Device |\n\n#### File handling\n\n| External dependency | Operation |\n| --- | --- |\n| xdg-open (Linux), open(1) (OS X), cygstart (Cygwin) | desktop opener |\n| mediainfo, exiftool | multimedia file details |\n| gnome-search-tool, catfish | desktop search utility |\n| atool, patool ([integration](#integrate-patool)) | create, list and extract archives |\n| vidir from moreutils | batch rename, move, delete dir entries |\n| vlock (Linux), bashlock (OS X), lock(1) (BSD) | terminal locker |\n| $EDITOR (overridden by $VISUAL, if defined) | edit files (fallback vi) |\n| $PAGER | page through files (fallback less) |\n| $SHELL | spawn a shell, run script (fallback sh) |\n\n- To edit all text files in EDITOR (preferably CLI, fallback vi):\n\n      export NNN_USE_EDITOR=1\n- To enable the desktop file manager key, set `NNN_DE_FILE_MANAGER`. E.g.:\n\n      export NNN_DE_FILE_MANAGER=thunar\n      export NNN_DE_FILE_MANAGER=nautilus\n\n#### Help\n\n    $ nnn -h\n    $ man nnn\nTo lookup keyboard shortcuts at runtime, press <kbd>?</kbd>.\n\n### Quickstart\n\n1. Install the [utilities required](#file-handling) for your regular activities.\n2. Configure file path copy [using X clipboard](#copy-file-paths-to-clipboard) or [without X](#copy-file-paths-when-x-is-missing).\n3. Configure [cd on quit](#cd-on-quit).\n4. Optionally open all text files in EDITOR (fallback vi):\n\n       export NNN_USE_EDITOR=1\n5. Run `n`.\n6. Press <kbd>?</kbd> for help on keyboard shortcuts anytime.\n7. For additional functionality [setup custom scripts](#run-custom-scripts).\n\n### How to\n\n#### add bookmarks\n\nSet environment variable `NNN_BMS` as a string of `key:location` pairs (max 10) separated by semicolons (`;`):\n\n    export NNN_BMS=\'doc:~/Documents;u:/home/user/Cam Uploads;D:~/Downloads/\'\n\nThe bookmark prompt also understands the <kbd>~</kbd> (HOME), <kbd>-</kbd> (last visited directory) and <kbd>&</kbd> (start directory) shortcuts.\n\n#### use cd .....\n\nTo jump to the n<sup>th</sup> level parent, use `n + 1` dots (the first `.` denotes PWD). For example, to jump to the 6<th> parent of the current directory, use 7 dots. If the number of dots would take you *beyond* `/` (which isn\'t possible), you\'ll be placed at `/`.\n\n#### cd on quit\n\nTo quit `nnn` and switch to the directory last opened follow the instructions below.\n\nPick the appropriate file for your shell from [`scripts/quitcd`](scripts/quitcd) and add the contents to your shell\'s rc file. You\'ll need to spawn a new shell for the change to take effect. You should start `nnn` as `n` (or modify the function name to something else).\n\nAs you might notice, `nnn` uses the environment variable `NNN_TMPFILE` to write the last visited directory path. You can change it.\n\n#### copy file paths to clipboard\n\n`nnn` can pipe the absolute path of the current file or multiple files to a copier script. For example, you can use `xsel` on Linux or `pbcopy` on OS X.\n\nSample Linux copier script:\n\n    #!/bin/sh\n\n    # comment the next line to convert newlines to spaces\n    IFS=\n\n    echo -n $1 | xsel --clipboard --input\n\nexport `NNN_COPIER`:\n\n    export NNN_COPIER=\"/path/to/copier.sh\"\n\nUse <kbd>^K</kbd> to copy the absolute path (from `/`) of the file under the cursor to clipboard.\n\nTo copy multiple file paths, switch to the multi-copy mode using <kbd>^Y</kbd>. In this mode you can\n\n- select multiple files one by one by pressing <kbd>^K</kbd> on each entry; or,\n- navigate to another file in the same directory to select a range of files.\n\nPressing <kbd>^Y</kbd> again copies the paths to clipboard and exits the multi-copy mode.\n\nTo wrap each file path within single quotes, export `NNN_QUOTE_ON`:\n\n    export NNN_QUOTE_ON=1\nThis is particularly useful if you are planning to copy the whole string to the shell to run a command. Quotes can be toggled at runtime using <kbd>^T</kbd>.\n\nNote that the filename is not escaped. So copying may still fail for filenames having quote(s) in them.\n\n#### copy file paths when X is missing\n\nA very common scenario on headless remote servers connected via SSH. As the clipboard is missing, `nnn` copies the path names to the tmp file `$HOME/.nnncp`.\n\n`nnn` needs to know X is unavailable:\n\n    export NNN_NO_X=1\n\nUse <kbd>^Y</kbd> and/or <kbd>^K</kbd> to copy file paths as usual. To use the copied paths from the cmdline, use command substitution:\n\n    # bash/zsh\n    ls -ltr `cat /home/user/.nnncp`\n    ls -ltr $(cat /home/user/.nnncp)\n\n    # fish\n    ls -ltr (cat /home/user/.nnncp)\n\nAn alias may be handy:\n\n    alias ncp=\'cat /home/user/.nnncp\'\n\nso you can -\n\n    # bash/zsh\n    ls -ltr `ncp`\n    ls -ltr $(ncp)\n\n    # fish\n    ls -ltr (ncp)\n\nNote that you may want to keep quotes disabled in this case.\n\n#### run custom scripts\n\n`nnn` can invoke custom scripts with the currently selected file name as argument 1.\n\nExport the path to the custom executable script:\n\n    export NNN_SCRIPT=/usr/local/bin/nscript\n\nPress <kbd>R</kbd> to run the script in the current directory.\n\nIt\'s possible to run multiple scripts with `nnn` as long as the scripts are in the same location and share the same prefix. To enable multiple scripts,\n\n    export NNN_MULTISCRIPT=1\n\nWith the example of `NNN_SCRIPT` above, some more scripts could be:\n\n    /usr/local/bin/nscript1\n    /usr/local/bin/nscript2\n    /usr/local/bin/nscriptcustom1\n    /usr/local/bin/nscriptcustom2\n    and so on...\n\nType the correct suffix  when prompted on pressing the keybind <kbd>R</kbd>. To use the base script (`NNN_SCRIPT`), just press <kbd>Enter</kbd>.\n\n##### sample scripts\n\n- Open image files in current dir in **sxiv**:\n\n      #!/usr/bin/env sh\n\n      sxiv -q * >/dev/null 2>&1\n\n- Fuzzy find files in **fzy** and open with xdg-open:\n\n      #!/usr/bin/env sh\n\n      xdg-open $(find -type f | fzy) >/dev/null 2>&1\n\n#### dual-pane or multi-pane\n\n`nnn` doesn\'t have a native dual-pane or multi-pane mode. Use it with tmux, GNU Screen, Terminator or Tilix.\n\n#### change dir color\n\nThe default color for directories is blue. Option `-c` accepts color codes from 0 to 7 to use a different color:\n\n    0-black, 1-red, 2-green, 3-yellow, 4-blue, 5-magenta, 6-cyan, 7-white\n\nAny other value disables colored directories.\n\n#### file copy, move, delete\n\n`nnn` doesn\'t support file copy, move, delete natively. However, it simplifies the workflow:\n\n1. copy the absolute paths using <kbd>^Y</kbd> and/or <kbd>^K</kbd>\n2. spawn a shell in the current directory (<kbd>!</kbd>)\n3. while typing the desired command, copy the file paths (usually <kbd>^-Shift-V</kbd>)\n\nIn addition, `nnn` integrates with vidir. vidir supports batch file move and delete.\n\n#### integrate patool\n\nOn systems where `atool` is not available but `patool` is, drop two copies of the Python3 script [natool](https://github.com/jarun/nnn/blob/master/scripts/natool) as `atool` and `apack` somewhere in `$PATH`.\n\n#### work faster at rename prompt\n\nThe rename prompt supports some bash-like command-line shortcuts - <kbd>^A</kbd>, <kbd>^E</kbd>, <kbd>^U</kbd>. <kbd>^L</kbd> clears the name.\n\n#### set idle timeout\n\nThe terminal screensaver is disabled by default. To set the wait time in seconds, use environment variable `NNN_IDLE_TIMEOUT`.\n\n#### show hot plugged drives\n\nEnable volume management in your DE file manager and set removable drives or media to be auto-mounted when inserted. Then visit the usual mount point location (`/mnt` or `/media/user`) in `nnn`.\n\n#### tmux config\n\n`nnn` might not handle keypresses correctly when used with tmux (see issue #104 for more details). Set `TERM=xterm-256color` to address it.\n\n### Why fork?\n\nI chose to fork because:\n- one can argue my approach deviates from the goal of the original project -  keep the utility `suckless`. In my opinion evolution is the taste of time.\n- I would like to have a bit of control on what features are added in the name of desktop integration. A feature-bloat is the last thing in my mind. Check out [nnn design considerations](https://github.com/jarun/nnn/wiki/nnn-design-considerations) for more details.\n\n### Mentions\n\n- [FOSSMint](https://www.fossmint.com/nnn-linux-terminal-file-browser/)\n- [It\'s FOSS](https://itsfoss.com/nnn-file-browser-linux/)\n- [LinuxLinks](https://www.linuxlinks.com/nnn-fast-and-flexible-file-manager/)\n- [Ubuntu Full Circle Magazine - Issue 135](https://fullcirclemagazine.org/issue-135/)\n\n### Developers\n\n1. Copyright © 2014-2016 Lazaros Koromilas\n2. Copyright © 2014-2016 Dimitris Papastamos\n3. Copyright © 2016-2018 [Arun Prakash Jana](https://github.com/jarun)\n','<h2 id=\"nnn\">nnn</h2>\n<p>Noice is Not Noice, a noicer fork…</p>\n<p align=\"center\">\n<a href=\"https://github.com/jarun/nnn/releases/latest\"><img src=\"https://img.shields.io/github/release/jarun/nnn.svg?maxAge=600\" alt=\"Latest release\" /></a>\n<a href=\"https://aur.archlinux.org/packages/nnn\"><img src=\"https://img.shields.io/aur/version/nnn.svg?maxAge=600\" alt=\"AUR\" /></a>\n<a href=\"http://formulae.brew.sh/formula/nnn\"><img src=\"https://img.shields.io/homebrew/v/nnn.svg?maxAge=600\" alt=\"Homebrew\" /></a>\n<a href=\"https://packages.debian.org/search?keywords=nnn&searchon=names&exact=1\"><img src=\"https://img.shields.io/badge/debian-10+-blue.svg?maxAge=2592000\" alt=\"Debian Buster+\" /></a>\n<a href=\"https://apps.fedoraproject.org/packages/nnn\"><img src=\"https://img.shields.io/badge/fedora-27+-blue.svg?maxAge=2592000\" alt=\"Fedora 27+\" /></a>\n<a href=\"https://software.opensuse.org/package/nnn\"><img src=\"https://img.shields.io/badge/opensuse%20leap-15.0+-blue.svg?maxAge=2592000\" alt=\"openSUSE Leap 15.0+\" /></a>\n<a href=\"https://packages.ubuntu.com/search?keywords=nnn&searchon=names&exact=1\"><img src=\"https://img.shields.io/badge/ubuntu-17.10+-blue.svg?maxAge=2592000\" alt=\"Ubuntu Artful+\" /></a>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/jarun/nnn/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-BSD%202--Clause-yellow.svg?maxAge=2592000\" alt=\"License\" /></a>\n<a href=\"https://travis-ci.org/jarun/nnn\"><img src=\"https://travis-ci.org/jarun/nnn.svg?branch=master\" alt=\"Build Status\" /></a>\n</p>\n<p><a href=\"https://vimeo.com/233223942\" title=\"Click to see nnn in action!\"><img src=\"https://i.imgur.com/wNtI24c.jpg\" alt=\"nnn screencast\" /></a></p>\n<p align=\"center\"><i>nnn in action! (click to play video)</i></a></p>\n<p><code>nnn</code> is probably the <a href=\"#performance\">fastest and most resource-sensitive</a> (with all its capabilities) file manager you have ever used. It\'s extremely flexible too - integrates with your DE and favourite GUI utilities, works with the desktop opener, supports bookmarks, has smart navigation shortcuts, <a href=\"#navigate-as-you-type-mode\">navigate-as-you-type</a> mode, disk usage analyzer mode, comprehensive file details and much more. <code>nnn</code> was initially forked from <a href=\"http://git.2f30.org/noice/\">noice</a> but is significantly <a href=\"https://github.com/jarun/nnn/wiki/nnn-vs.-noice\">different</a> today.</p>\n<p>If you want to edit a file in vi with some soothing music in the background while referring to a spec in your GUI PDF viewer, <code>nnn</code> got it! <a href=\"#quickstart\">Quickstart</a> and see how <code>nnn</code> simplifies those long desktop sessions…</p>\n<p><code>nnn</code> supports as many scripts as you want to run! So you can <a href=\"https://github.com/jarun/nnn#sample-scripts\">integrate utilities</a> like sxiv (to view images in a directory) or fzy (to fuzzy find files in a directory tree) easily.</p>\n<p>Have fun with it! Missing a feature? Want to contribute? Head to the rolling <a href=\"https://github.com/jarun/nnn/issues/110\">ToDo list</a>.</p>\n<p><em>Love smart and efficient utilities? Explore <a href=\"https://github.com/jarun?tab=repositories\">my repositories</a>. Buy me a cup of coffee if they help you.</em></p>\n<p align=\"center\">\n<a href=\"https://saythanks.io/to/jarun\"><img src=\"https://img.shields.io/badge/say-thanks!-ff69b4.svg\" /></a>\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=RMLTQ76JSXJ4Q\"><img src=\"https://img.shields.io/badge/PayPal-donate-green.svg\" alt=\"Donate via PayPal!\" /></a>\n</p>\n<h3 id=\"tableofcontents\">Table of Contents</h3>\n<ul>\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#performance\">Performance</a></li>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#dependencies\">Dependencies</a></li>\n<li><a href=\"#from-a-package-manager\">From a package manager</a></li>\n<li><a href=\"#release-packages\">Release packages</a></li>\n<li><a href=\"#from-source\">From source</a></li>\n<li><a href=\"#shell-completion\">Shell completion</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#cmdline-options\">Cmdline options</a></li>\n<li><a href=\"#keyboard-shortcuts\">Keyboard shortcuts</a></li>\n<li><a href=\"#filters\">Filters</a></li>\n<li><a href=\"#navigate-as-you-type-mode\">Navigate-as-you-type mode</a></li>\n<li><a href=\"#file-indicators\">File indicators</a></li>\n<li><a href=\"#file-handling\">File handling</a></li>\n<li><a href=\"#help\">Help</a></li>\n<li><a href=\"#quickstart\">Quickstart</a></li>\n<li><a href=\"#how-to\">How to</a></li>\n<li><a href=\"#add-bookmarks\">add bookmarks</a></li>\n<li><a href=\"#use-cd-\">use cd …..</a></li>\n<li><a href=\"#cd-on-quit\">cd on quit</a></li>\n<li><a href=\"#copy-file-paths-to-clipboard\">copy file paths to clipboard</a></li>\n<li><a href=\"#copy-file-paths-when-x-is-missing\">copy file paths when X is missing</a></li>\n<li><a href=\"#run-custom-scripts\">run custom scripts</a><ul>\n<li><a href=\"#sample-scripts\">sample scripts</a></li></ul></li>\n<li><a href=\"#dual-pane-or-multi-pane\">dual-pane or multi-pane</a></li>\n<li><a href=\"#change-dir-color\">change dir color</a></li>\n<li><a href=\"#file-copy-move-delete\">file copy, move, delete</a></li>\n<li><a href=\"#integrate-patool\">integrate patool</a></li>\n<li><a href=\"#work-faster-at-rename-prompt\">work faster at rename prompt</a></li>\n<li><a href=\"#set-idle-timeout\">set idle timeout</a></li>\n<li><a href=\"#show-hot-plugged-drives\">show hot plugged drives</a></li>\n<li><a href=\"#tmux-config\">tmux config</a></li>\n<li><a href=\"#why-fork\">Why fork?</a></li>\n<li><a href=\"#mentions\">Mentions</a></li>\n<li><a href=\"#developers\">Developers</a></li>\n</ul>\n<h3 id=\"features\">Features</h3>\n<ul>\n<li>Modes - basic, detail, disk usage analyzer (du)</li>\n<li>Navigation</li>\n<li>Familiar, easy shortcuts (arrows, <code>~</code>, <code>-</code>, <code>&amp;</code>)</li>\n<li><em>Navigate-as-you-type</em> mode with dir auto-select for the maverick</li>\n<li>Handy bookmarks, start at bookmark, pin and visit directory</li>\n<li>chdir prompt with tab completion (interprets cd ….. too!)</li>\n<li>Roll-over at edges, page through entries</li>\n<li>Show directories in custom color (default: enabled in blue)</li>\n<li>Sorting</li>\n<li>Directories always listed on top</li>\n<li>Sort by file name, modification time, size</li>\n<li>Numeric order (1, 2, … 10, 11, …) for numeric names</li>\n<li>Search</li>\n<li>Superfast directory content filtering with <em>search-as-you-type</em></li>\n<li>Desktop search (gnome-search-tool, catfish) integration</li>\n<li>Mimes</li>\n<li>Open with desktop opener (default) or specify a custom app</li>\n<li>Create, list and extract archives (needs atool/patool)</li>\n<li>Optionally open text files in EDITOR (fallback vi)</li>\n<li>Customizable bash script <a href=\"https://github.com/jarun/nnn/wiki/all-about-nlay\">nlay</a> to handle actions</li>\n<li>Information</li>\n<li>Detailed stat-like file information</li>\n<li>Media information (needs mediainfo or exiftool, if specified)</li>\n<li>Convenience</li>\n<li>Create, rename files and directories</li>\n<li>Batch rename/move/delete current directory entries in vidir (from moreutils)</li>\n<li>Spawn SHELL (fallback sh) in the current directory</li>\n<li>Run custom scripts in the current directory</li>\n<li>Copy absolute file paths with/without X (<em>easy</em> shell integration)</li>\n<li>Change directory at exit (<em>easy</em> shell integration)</li>\n<li>Open any file in EDITOR (fallback vi) or PAGER (fallback less)</li>\n<li>Open current directory in a custom GUI file manager</li>\n<li>Terminal screensaver/locker integration</li>\n<li>Unicode support</li>\n<li>Highly optimized code, minimal resource usage</li>\n</ul>\n<h3 id=\"performance\">Performance</h3>\n<p><code>nnn</code> vs. ncdu memory usage in disk usage analyzer mode (401385 files on disk):</p>\n<pre><code>  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 5034 vaio      20   0   70360  58764   2244 S   0.0  0.7   0:00.80 ncdu /\n 4949 vaio      20   0   17520   4224   2584 S   0.0  0.1   0:00.54 nnn -S /\n</code></pre>\n<p><code>nnn</code> vs. midnight commander vs. ranger memory usage while viewing a directory with 13790 files, sorted by size:</p>\n<pre><code>  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n16255 vaio      20   0  101392  59304   7928 S   0.0  0.7   0:00.68 /usr/bin/python -O /usr/bin/ranger\n15971 vaio      20   0   65732  11784   6848 S   0.0  0.1   0:00.56 mc\n16198 vaio      20   0   18520   4900   2536 S   0.3  0.1   0:00.14 nnn\n</code></pre>\n<p>Intrigued? Find out <a href=\"https://github.com/jarun/nnn/wiki/performance-factors\">HOW</a>.</p>\n<h3 id=\"installation\">Installation</h3>\n<h4 id=\"dependencies\">Dependencies</h4>\n<p><code>nnn</code> needs libncursesw (on Linux or ncurses on OS X) and standard libc.</p>\n<h4 id=\"fromapackagemanager\">From a package manager</h4>\n<ul>\n<li><a href=\"https://aur.archlinux.org/packages/nnn/\">AUR</a> (<code>yaourt -S nnn</code>)</li>\n<li><a href=\"https://packages.debian.org/search?keywords=nnn&searchon=names&exact=1\">Debian</a> (<code>apt-get install nnn</code>)</li>\n<li><a href=\"https://apps.fedoraproject.org/packages/nnn\">Fedora</a> (<code>dnf install nnn</code>)</li>\n<li><a href=\"https://www.freshports.org/misc/nnn\">FreeBSD</a> (<code>pkg install nnn</code>)</li>\n<li><a href=\"https://packages.gentoo.org/packages/app-misc/nnn\">Gentoo</a> (<code>emerge nnn</code>)</li>\n<li><a href=\"http://formulae.brew.sh/formula/nnn\">Homebrew</a> (<code>brew install nnn</code>)</li>\n<li><a href=\"https://github.com/NixOS/nixpkgs/tree/master/pkgs/applications/misc/nnn\">NixOS</a> (<code>nix-env -i nnn</code>)</li>\n<li><a href=\"https://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/sysutils/nnn/\">OpenBSD</a> (<code>pkg_add nnn</code>)</li>\n<li><a href=\"https://software.opensuse.org/package/nnn\">openSUSE</a> (and packages for several other distros) (<code>zypper in nnn</code>)</li>\n<li><a href=\"http://slackbuilds.org/repository/14.2/system/nnn/\">Slackware</a> (<code>slackpkg install nnn</code>)</li>\n<li><a href=\"http://codex.sourcemage.org/test/shell-term-fm/nnn/\">Source Mage</a> (<code>cast nnn</code>)</li>\n<li><a href=\"https://packages.ubuntu.com/search?keywords=nnn&searchon=names&exact=1\">Ubuntu</a> (<code>apt-get install nnn</code>)</li>\n<li><a href=\"https://launchpad.net/~twodopeshaggy/+archive/ubuntu/jarun/\">Ubuntu PPA</a> (<code>apt-get install nnn</code>)</li>\n<li><a href=\"https://github.com/void-linux/void-packages/tree/master/srcpkgs/nnn\">Void Linux</a> (<code>xbps-install -S nnn</code>)</li>\n</ul>\n<h4 id=\"releasepackages\">Release packages</h4>\n<p>Packages for Arch Linux, CentOS, Debian, Fedora and Ubuntu are available with the <a href=\"https://github.com/jarun/nnn/releases/latest\">latest stable release</a>.</p>\n<h4 id=\"fromsource\">From source</h4>\n<p>To cook yourself, download the <a href=\"https://github.com/jarun/nnn/releases/latest\">latest stable release</a> or clone this repository (<em>risky</em>). Then install the dependencies and compile (e.g. on Ubuntu 16.04):</p>\n<pre><code>$ sudo apt-get install pkg-config libncursesw5-dev\n$ make\n$ sudo make install\n</code></pre>\n<p><code>PREFIX</code> is supported, in case you want to install to a different location.</p>\n<h3 id=\"shellcompletion\">Shell completion</h3>\n<p>Search keyword and option completion scripts for Bash, Fish and Zsh can be found in respective subdirectories of <a href=\"scripts/auto-completion\"><code>scripts/auto-completion/</code></a>. Please refer to your shell\'s manual for installation instructions.</p>\n<h3 id=\"usage\">Usage</h3>\n<h4 id=\"cmdlineoptions\">Cmdline options</h4>\n<pre><code>usage: nnn [-b key] [-c N] [-e] [-i] [-l]\n           [-p nlay] [-S] [-v] [-h] [PATH]\n\nThe missing terminal file manager for X.\n\npositional args:\n  PATH   start dir [default: current dir]\n\noptional args:\n -b key  specify bookmark key to open\n -c N    specify dir color, disables if N&gt;7\n -e      use exiftool instead of mediainfo\n -i      start in navigate-as-you-type mode\n -l      start in light mode\n -p nlay path to custom nlay\n -S      start in disk usage analyser mode\n -v      show program version and exit\n -h      show this help and exit\n</code></pre>\n<p><code>&gt;</code> indicates the currently selected entry in <code>nnn</code>.</p>\n<h4 id=\"keyboardshortcuts\">Keyboard shortcuts</h4>\n<pre><code>            Key | Function\n              - + -\n       ↑, k, ^P | Prev entry\n       ↓, j, ^N | Next entry\n       PgUp, ^U | Scroll half page up\n       PgDn, ^D | Scroll half page down\n Home, g, ^, ^A | First entry\n  End, G, $, ^E | Last entry\n    →, ↵, l, ^M | Open file/enter dir\n ←, Bksp, h, ^H | Parent dir\n             ^O | Open with...\n     Insert, ^I | Toggle nav-as-you-type\n              ~ | Go HOME\n              &amp; | Start-up dir\n              - | Last visited dir\n              / | Filter entries\n             ^/ | Open desktop search app\n              . | Toggle show . files\n             ^B | Bookmark prompt\n              b | Pin current dir\n             ^V | Go to pinned dir\n              c | Change dir prompt\n              d | Toggle detail view\n              D | File details\n              m | Brief media info\n              M | Full media info\n              n | Create new\n             ^R | Rename entry\n              r | Open dir in vidir\n              s | Toggle sort by size\n              S | Toggle apparent size\n             ^J | Toggle du mode\n              t | Toggle sort by mtime\n          !, ^] | Spawn SHELL in dir\n              R | Run custom script\n              e | Edit entry in EDITOR\n              o | Open DE filemanager\n              p | Open entry in PAGER\n              f | Archive entry\n              F | List archive\n             ^F | Extract archive\n      Space, ^K | Copy file path\n             ^Y | Toggle multi-copy\n             ^T | Toggle path quote\n             ^L | Redraw, clear prompt\n              L | Lock terminal\n              ? | Help, settings\n          Q, ^G | Quit and cd\n          q, ^X | Quit\n</code></pre>\n<p>Help &amp; settings, file details, media info and archive listing are shown in the PAGER. Please use the PAGER-specific keys in these screens.</p>\n<h4 id=\"filters\">Filters</h4>\n<p>Filters support regexes to instantly (search-as-you-type) list the matching entries in the current directory.</p>\n<p>There are 3 ways to reset a filter:</p>\n<ul>\n<li>pressing <kbd>^L</kbd> (at the new/rename prompt <kbd>^L</kbd> followed by <kbd>Enter</kbd> discards all changes and exits prompt)</li>\n<li>a search with no matches</li>\n<li>an extra backspace at the filter prompt (like vi)</li>\n</ul>\n<p>Common use cases:</p>\n<ul>\n<li>to list all matches starting with the filter expression, start the expression with a <code>^</code> (caret) symbol</li>\n<li>type <code>\\.mkv</code> to list all MKV files</li>\n<li>use <code>.*</code> to match any character (<em>sort of</em> fuzzy search)</li>\n</ul>\n<p>If <code>nnn</code> is invoked as root or the environment variable <code>NNN_SHOW_HIDDEN</code> is set the default filter will also match hidden files.</p>\n<h4 id=\"navigateasyoutypemode\">Navigate-as-you-type mode</h4>\n<p>In this mode directories are opened in filter mode, allowing continuous navigation. Works best with the <strong>arrow keys</strong>.</p>\n<p>In case of only one match and it\'s a directory, <code>nnn</code> auto selects the directory and enters it in this mode.</p>\n<h4 id=\"fileindicators\">File indicators</h4>\n<p>The following indicators are used in the detail view:</p>\n<p>| Indicator | File Type |\n|:---:| --- |\n| <code>/</code> | Directory |\n| <code>*</code> | Executable |\n| <code>&amp;#124;</code> | Fifo |\n| <code>=</code> | Socket |\n| <code>@</code> | Symbolic Link |\n| <code>@/</code> | Symbolic Link to directory |\n| <code>b</code> | Block Device |\n| <code>c</code> | Character Device |</p>\n<h4 id=\"filehandling\">File handling</h4>\n<p>| External dependency | Operation |\n| --- | --- |\n| xdg-open (Linux), open(1) (OS X), cygstart (Cygwin) | desktop opener |\n| mediainfo, exiftool | multimedia file details |\n| gnome-search-tool, catfish | desktop search utility |\n| atool, patool (<a href=\"#integrate-patool\">integration</a>) | create, list and extract archives |\n| vidir from moreutils | batch rename, move, delete dir entries |\n| vlock (Linux), bashlock (OS X), lock(1) (BSD) | terminal locker |\n| $EDITOR (overridden by $VISUAL, if defined) | edit files (fallback vi) |\n| $PAGER | page through files (fallback less) |\n| $SHELL | spawn a shell, run script (fallback sh) |</p>\n<ul>\n<li><p>To edit all text files in EDITOR (preferably CLI, fallback vi):</p>\n<p>export NNN<em>USE</em>EDITOR=1</p></li>\n<li><p>To enable the desktop file manager key, set <code>NNN_DE_FILE_MANAGER</code>. E.g.:</p>\n<p>export NNN<em>DE</em>FILE<em>MANAGER=thunar\n  export NNN</em>DE<em>FILE</em>MANAGER=nautilus</p></li>\n</ul>\n<h4 id=\"help\">Help</h4>\n<pre><code>$ nnn -h\n$ man nnn\n</code></pre>\n<p>To lookup keyboard shortcuts at runtime, press <kbd>?</kbd>.</p>\n<h3 id=\"quickstart\">Quickstart</h3>\n<ol>\n<li><p>Install the <a href=\"#file-handling\">utilities required</a> for your regular activities.</p></li>\n<li><p>Configure file path copy <a href=\"#copy-file-paths-to-clipboard\">using X clipboard</a> or <a href=\"#copy-file-paths-when-x-is-missing\">without X</a>.</p></li>\n<li><p>Configure <a href=\"#cd-on-quit\">cd on quit</a>.</p></li>\n<li><p>Optionally open all text files in EDITOR (fallback vi):</p>\n<p>export NNN<em>USE</em>EDITOR=1</p></li>\n<li><p>Run <code>n</code>.</p></li>\n<li><p>Press <kbd>?</kbd> for help on keyboard shortcuts anytime.</p></li>\n<li><p>For additional functionality <a href=\"#run-custom-scripts\">setup custom scripts</a>.</p></li>\n</ol>\n<h3 id=\"howto\">How to</h3>\n<h4 id=\"addbookmarks\">add bookmarks</h4>\n<p>Set environment variable <code>NNN_BMS</code> as a string of <code>key:location</code> pairs (max 10) separated by semicolons (<code>;</code>):</p>\n<pre><code>export NNN_BMS=\'doc:~/Documents;u:/home/user/Cam Uploads;D:~/Downloads/\'\n</code></pre>\n<p>The bookmark prompt also understands the <kbd>~</kbd> (HOME), <kbd>-</kbd> (last visited directory) and <kbd>&</kbd> (start directory) shortcuts.</p>\n<h4 id=\"usecd\">use cd …..</h4>\n<p>To jump to the n<sup>th</sup> level parent, use <code>n + 1</code> dots (the first <code>.</code> denotes PWD). For example, to jump to the 6<th> parent of the current directory, use 7 dots. If the number of dots would take you <em>beyond</em> <code>/</code> (which isn\'t possible), you\'ll be placed at <code>/</code>.</p>\n<h4 id=\"cdonquit\">cd on quit</h4>\n<p>To quit <code>nnn</code> and switch to the directory last opened follow the instructions below.</p>\n<p>Pick the appropriate file for your shell from <a href=\"scripts/quitcd\"><code>scripts/quitcd</code></a> and add the contents to your shell\'s rc file. You\'ll need to spawn a new shell for the change to take effect. You should start <code>nnn</code> as <code>n</code> (or modify the function name to something else).</p>\n<p>As you might notice, <code>nnn</code> uses the environment variable <code>NNN_TMPFILE</code> to write the last visited directory path. You can change it.</p>\n<h4 id=\"copyfilepathstoclipboard\">copy file paths to clipboard</h4>\n<p><code>nnn</code> can pipe the absolute path of the current file or multiple files to a copier script. For example, you can use <code>xsel</code> on Linux or <code>pbcopy</code> on OS X.</p>\n<p>Sample Linux copier script:</p>\n<pre><code>#!/bin/sh\n\n# comment the next line to convert newlines to spaces\nIFS=\n\necho -n $1 | xsel --clipboard --input\n</code></pre>\n<p>export <code>NNN_COPIER</code>:</p>\n<pre><code>export NNN_COPIER=\"/path/to/copier.sh\"\n</code></pre>\n<p>Use <kbd>^K</kbd> to copy the absolute path (from <code>/</code>) of the file under the cursor to clipboard.</p>\n<p>To copy multiple file paths, switch to the multi-copy mode using <kbd>^Y</kbd>. In this mode you can</p>\n<ul>\n<li>select multiple files one by one by pressing <kbd>^K</kbd> on each entry; or,</li>\n<li>navigate to another file in the same directory to select a range of files.</li>\n</ul>\n<p>Pressing <kbd>^Y</kbd> again copies the paths to clipboard and exits the multi-copy mode.</p>\n<p>To wrap each file path within single quotes, export <code>NNN_QUOTE_ON</code>:</p>\n<pre><code>export NNN_QUOTE_ON=1\n</code></pre>\n<p>This is particularly useful if you are planning to copy the whole string to the shell to run a command. Quotes can be toggled at runtime using <kbd>^T</kbd>.</p>\n<p>Note that the filename is not escaped. So copying may still fail for filenames having quote(s) in them.</p>\n<h4 id=\"copyfilepathswhenxismissing\">copy file paths when X is missing</h4>\n<p>A very common scenario on headless remote servers connected via SSH. As the clipboard is missing, <code>nnn</code> copies the path names to the tmp file <code>$HOME/.nnncp</code>.</p>\n<p><code>nnn</code> needs to know X is unavailable:</p>\n<pre><code>export NNN_NO_X=1\n</code></pre>\n<p>Use <kbd>^Y</kbd> and/or <kbd>^K</kbd> to copy file paths as usual. To use the copied paths from the cmdline, use command substitution:</p>\n<pre><code># bash/zsh\nls -ltr `cat /home/user/.nnncp`\nls -ltr $(cat /home/user/.nnncp)\n\n# fish\nls -ltr (cat /home/user/.nnncp)\n</code></pre>\n<p>An alias may be handy:</p>\n<pre><code>alias ncp=\'cat /home/user/.nnncp\'\n</code></pre>\n<p>so you can -</p>\n<pre><code># bash/zsh\nls -ltr `ncp`\nls -ltr $(ncp)\n\n# fish\nls -ltr (ncp)\n</code></pre>\n<p>Note that you may want to keep quotes disabled in this case.</p>\n<h4 id=\"runcustomscripts\">run custom scripts</h4>\n<p><code>nnn</code> can invoke custom scripts with the currently selected file name as argument 1.</p>\n<p>Export the path to the custom executable script:</p>\n<pre><code>export NNN_SCRIPT=/usr/local/bin/nscript\n</code></pre>\n<p>Press <kbd>R</kbd> to run the script in the current directory.</p>\n<p>It\'s possible to run multiple scripts with <code>nnn</code> as long as the scripts are in the same location and share the same prefix. To enable multiple scripts,</p>\n<pre><code>export NNN_MULTISCRIPT=1\n</code></pre>\n<p>With the example of <code>NNN_SCRIPT</code> above, some more scripts could be:</p>\n<pre><code>/usr/local/bin/nscript1\n/usr/local/bin/nscript2\n/usr/local/bin/nscriptcustom1\n/usr/local/bin/nscriptcustom2\nand so on...\n</code></pre>\n<p>Type the correct suffix  when prompted on pressing the keybind <kbd>R</kbd>. To use the base script (<code>NNN_SCRIPT</code>), just press <kbd>Enter</kbd>.</p>\n<h5 id=\"samplescripts\">sample scripts</h5>\n<ul>\n<li><p>Open image files in current dir in <strong>sxiv</strong>:</p>\n<p>#!/usr/bin/env sh</p>\n<p>sxiv -q * &gt;/dev/null 2&gt;&amp;1</p></li>\n<li><p>Fuzzy find files in <strong>fzy</strong> and open with xdg-open:</p>\n<p>#!/usr/bin/env sh</p>\n<p>xdg-open $(find -type f | fzy) &gt;/dev/null 2&gt;&amp;1</p></li>\n</ul>\n<h4 id=\"dualpaneormultipane\">dual-pane or multi-pane</h4>\n<p><code>nnn</code> doesn\'t have a native dual-pane or multi-pane mode. Use it with tmux, GNU Screen, Terminator or Tilix.</p>\n<h4 id=\"changedircolor\">change dir color</h4>\n<p>The default color for directories is blue. Option <code>-c</code> accepts color codes from 0 to 7 to use a different color:</p>\n<pre><code>0-black, 1-red, 2-green, 3-yellow, 4-blue, 5-magenta, 6-cyan, 7-white\n</code></pre>\n<p>Any other value disables colored directories.</p>\n<h4 id=\"filecopymovedelete\">file copy, move, delete</h4>\n<p><code>nnn</code> doesn\'t support file copy, move, delete natively. However, it simplifies the workflow:</p>\n<ol>\n<li>copy the absolute paths using <kbd>^Y</kbd> and/or <kbd>^K</kbd></li>\n<li>spawn a shell in the current directory (<kbd>!</kbd>)</li>\n<li>while typing the desired command, copy the file paths (usually <kbd>^-Shift-V</kbd>)</li>\n</ol>\n<p>In addition, <code>nnn</code> integrates with vidir. vidir supports batch file move and delete.</p>\n<h4 id=\"integratepatool\">integrate patool</h4>\n<p>On systems where <code>atool</code> is not available but <code>patool</code> is, drop two copies of the Python3 script <a href=\"https://github.com/jarun/nnn/blob/master/scripts/natool\">natool</a> as <code>atool</code> and <code>apack</code> somewhere in <code>$PATH</code>.</p>\n<h4 id=\"workfasteratrenameprompt\">work faster at rename prompt</h4>\n<p>The rename prompt supports some bash-like command-line shortcuts - <kbd>^A</kbd>, <kbd>^E</kbd>, <kbd>^U</kbd>. <kbd>^L</kbd> clears the name.</p>\n<h4 id=\"setidletimeout\">set idle timeout</h4>\n<p>The terminal screensaver is disabled by default. To set the wait time in seconds, use environment variable <code>NNN_IDLE_TIMEOUT</code>.</p>\n<h4 id=\"showhotpluggeddrives\">show hot plugged drives</h4>\n<p>Enable volume management in your DE file manager and set removable drives or media to be auto-mounted when inserted. Then visit the usual mount point location (<code>/mnt</code> or <code>/media/user</code>) in <code>nnn</code>.</p>\n<h4 id=\"tmuxconfig\">tmux config</h4>\n<p><code>nnn</code> might not handle keypresses correctly when used with tmux (see issue #104 for more details). Set <code>TERM=xterm-256color</code> to address it.</p>\n<h3 id=\"whyfork\">Why fork?</h3>\n<p>I chose to fork because:</p>\n<ul>\n<li>one can argue my approach deviates from the goal of the original project -  keep the utility <code>suckless</code>. In my opinion evolution is the taste of time.</li>\n<li>I would like to have a bit of control on what features are added in the name of desktop integration. A feature-bloat is the last thing in my mind. Check out <a href=\"https://github.com/jarun/nnn/wiki/nnn-design-considerations\">nnn design considerations</a> for more details.</li>\n</ul>\n<h3 id=\"mentions\">Mentions</h3>\n<ul>\n<li><a href=\"https://www.fossmint.com/nnn-linux-terminal-file-browser/\">FOSSMint</a></li>\n<li><a href=\"https://itsfoss.com/nnn-file-browser-linux/\">It\'s FOSS</a></li>\n<li><a href=\"https://www.linuxlinks.com/nnn-fast-and-flexible-file-manager/\">LinuxLinks</a></li>\n<li><a href=\"https://fullcirclemagazine.org/issue-135/\">Ubuntu Full Circle Magazine - Issue 135</a></li>\n</ul>\n<h3 id=\"developers\">Developers</h3>\n<ol>\n<li>Copyright © 2014-2016 Lazaros Koromilas</li>\n<li>Copyright © 2014-2016 Dimitris Papastamos</li>\n<li>Copyright © 2016-2018 <a href=\"https://github.com/jarun\">Arun Prakash Jana</a></li>\n</ol>'),
	(28,'dylanaraps','official-bash-logo','https://raw.githubusercontent.com/dylanaraps/official-bash-logo/master/README.md','2018-11-07 12:30:31','<h3 align=\"center\">\n<img src=\"https://cdn.rawgit.com/odb/official-bash-logo/master/assets/Logos/Identity/PNG/BASH_logo-transparent-bg-color.png\">\n</h3>\n\n# Official GNU Bash Logo\nEverything you need to start using the official GNU Bash logo.\n\n## Meta\n* Client: [Chet Ramey](http://tiswww.case.edu/php/chet/) (Representing GNU/FSF)\n* Commissioned by: [MaxCDN](https://www.maxcdn.com)\n* Art director: [Justin Dorfman](https://github.com/jdorfman)\n* Designed by: [ProspectOne](https://prospectone.io)\n* Font: [Roboto Mono](https://github.com/google/roboto/) (Apache License, Version 2.0)\n* Logo License: [Free Art License](http://artlibre.org/licence/lal/en/)\n* Copyright 2016 [Free Software Foundation](https://www.fsf.org/)\n\n## FAQ\n**Yes you can...**\n* Can I use this on my website?\n* What about in a presentation?\n* Any type of print media? (book, magazine, flyer, sticker)\n* Promoting a commercial project that uses Bash e.g. _Bash on Windows_?\n* Sell merchandise using this artwork? _(please consider giving some proceeds to the FSF)_\n\n**Please do not...**\n* Can I change any colors or fonts? _(see bash-style-guide.pdf for acceptable use)_\n * **Note:** any modification(s) must adhere to section `2.3` \"FREEDOM TO MODIFY\" of the Free Art License (1.3)\n* Use the icon for my logo?\n\nIf you still have questions or concerns please email [licensing@fsf.org](http://www.fsf.org/about/contact/email)\n\n## Files\n```\n.\n├── CONTRIBUTING.md\n├── LICENSE\n├── README.md\n└── assets\n    ├── LICENSE\n    ├── Logos\n    │   ├── Font\n    │   │   └── Roboto_Mono\n    │   │       ├── LICENSE.txt\n    │   │       ├── RobotoMono-Bold.ttf\n    │   │       ├── RobotoMono-BoldItalic.ttf\n    │   │       ├── RobotoMono-Italic.ttf\n    │   │       ├── RobotoMono-Light.ttf\n    │   │       ├── RobotoMono-LightItalic.ttf\n    │   │       ├── RobotoMono-Medium.ttf\n    │   │       ├── RobotoMono-MediumItalic.ttf\n    │   │       ├── RobotoMono-Regular.ttf\n    │   │       ├── RobotoMono-Thin.ttf\n    │   │       └── RobotoMono-ThinItalic.ttf\n    │   ├── Icons\n    │   │   ├── PNG\n    │   │   │   ├── 128x128.png\n    │   │   │   ├── 128x128_white.png\n    │   │   │   ├── 16x16.png\n    │   │   │   ├── 16x16_white.png\n    │   │   │   ├── 24x24.png\n    │   │   │   ├── 24x24_white.png\n    │   │   │   ├── 256x256.png\n    │   │   │   ├── 256x256_white.png\n    │   │   │   ├── 32x32.png\n    │   │   │   ├── 32x32_white.png\n    │   │   │   ├── 48x48.png\n    │   │   │   ├── 48x48_white.png\n    │   │   │   ├── 512x512.png\n    │   │   │   ├── 512x512_white.png\n    │   │   │   ├── 64x64.png\n    │   │   │   ├── 64x64_white.png\n    │   │   │   ├── Favicon-16x16.png\n    │   │   │   └── Favicon-16x16_white.png\n    │   │   ├── SVG\n    │   │   │   ├── 128x128.svg\n    │   │   │   ├── 128x128_white.svg\n    │   │   │   ├── 16x16.svg\n    │   │   │   ├── 16x16_white.svg\n    │   │   │   ├── 24x24.svg\n    │   │   │   ├── 24x24_white.svg\n    │   │   │   ├── 256x256.svg\n    │   │   │   ├── 256x256_white.svg\n    │   │   │   ├── 32x32.svg\n    │   │   │   ├── 32x32_white.svg\n    │   │   │   ├── 48x48.svg\n    │   │   │   ├── 48x48_white.svg\n    │   │   │   ├── 512x512.svg\n    │   │   │   ├── 512x512_white.svg\n    │   │   │   ├── 64x64.svg\n    │   │   │   ├── 64x64_white.svg\n    │   │   │   ├── BASH_logo-transparent-bg-bw-02.svg\n    │   │   │   ├── Favicon-16x16.svg\n    │   │   │   └── Favicon-16x16_white.svg\n    │   │   └── Source\n    │   │       ├── AI\n    │   │       │   └── BASH-icons-RGB-to-WEB.ai\n    │   │       ├── EPS\n    │   │       │   ├── BASH-icons-RGB-to-WEB-01.eps\n    │   │       │   └── BASH-icons-RGB-to-WEB-02.eps\n    │   │       └── PDF\n    │   │           └── BASH-icons-RGB-to-WEB.pdf\n    │   └── Identity\n    │       ├── PNG\n    │       │   ├── BASH_logo-transparent-bg-bw.png\n    │       │   └── BASH_logo-transparent-bg-color.png\n    │       ├── SVG\n    │       │   ├── BASH_logo-transparent-bg-bw.svg\n    │       │   └── BASH_logo-transparent-bg-color.svg\n    │       └── Source\n    │           ├── AI\n    │           │   ├── BASH_logo-transparent-bg-bw.ai\n    │           │   └── BASH_logo-transparent-bg-color.ai\n    │           └── Style_guide\n    │               ├── AI\n    │               │   ├── BASH-logo-stickers-for-PRINT-CMYK.ai\n    │               │   └── BASH_logo-vs-elements_for-PRINT-CMYK.ai\n    │               ├── EPS\n    │               │   ├── BASH-logo-stickers-for-PRINT-CMYK.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-01.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-02.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-03.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-04.eps\n    │               │   └── BASH_logo-vs-elements_for-PRINT-CMYK-05.eps\n    │               └── PDF\n    │                   ├── BASH-logo-stickers-for-PRINT-CMYK.pdf\n    │                   └── BASH_logo-vs-elements_for-PRINT-CMYK.pdf\n    ├── bash-style-guide.pdf\n    └── copyright-agreement.pdf\n\n20 directories, 74 files\n```\n\n## Sightings\n* [The GNU Bourne-Again SHell website](https://tiswww.case.edu/php/chet/bash/bashtop.html)\n* [Unixstickers](http://www.unixstickers.com/tag/bash)\n* [Unixstickers Blog](http://www.unixstickers.com/blog/new-home-for-bash-stickers-justin-dorfman-guest-post)\n* [Wikipedia](https://en.m.wikipedia.org/wiki/Bash_(Unix_shell))\n* [OpenSource.com](https://opensource.com/article/16/12/bash-logo-community)\n* [Instant Logo Search](http://instantlogosearch.com/?q=bash)\n* [HACKLOG](https://hacklog.mu/how-to-get-a-gnu-bash-sticker/)\n* [Learning bash scripting for beginners](https://www.cyberciti.biz/open-source/learning-bash-scripting-for-beginners/)\n* [OS X Password Generator in BASH](https://medium.com/@jdorfman/osx-password-generator-in-bash-48687892c4f3#.31hsjpeac)\n* [Howto: Changing Linux Login Shell](https://www.cyberciti.biz/faq/howto-change-linux-unix-freebsd-login-shell/)\n* [How to copy a single file to multiple directories in Linux or Unix](https://www.cyberciti.biz/faq/linux-unix-copy-a-file-to-multiple-directories-using-cp-command/)\n* [Maximum Character Length of Arguments In a Shell Command](https://www.cyberciti.biz/faq/linux-unix-arg_max-maximum-length-of-arguments/)\n* [Shell Scripts Matter](https://dev.to/thiht/shell-scripts-matter)\n* [bash-guide - A guide to learn bash](https://github.com/Idnan/bash-guide)\n* [Shell scripting (BASH) : How to create temporary random file name](https://www.cyberciti.biz/tips/shell-scripting-bash-how-to-create-temporary-random-file-name.html)\n* [Linux / UNIX: Find Out If File Exists With Conditional Expressions in a Bash Shell](https://www.cyberciti.biz/tips/find-out-if-file-exists-with-conditional-expressions.html)\n* [How to get domain name from URL in bash shell script](https://www.cyberciti.biz/faq/get-extract-domain-name-from-url-in-linux-unix-bash/)\n* [How To Use tar Command Through Network Over SSH Session](https://www.cyberciti.biz/faq/howto-use-tar-command-through-network-over-ssh-session/)\n* [How To Find a Directory On Linux Based System](https://www.cyberciti.biz/faq/howto-find-a-directory-linux-command/)\n* [Reddit: GNU Bash has a official logo and it looks so beautiful](https://www.reddit.com/r/linux/comments/7dupyf/just_found_out_that_gnu_bash_has_a_official_logo/)\n* [Bash Logo Media Assets](https://bashlogo.com/)\n* [Developing Console Applications with Bash](https://www.linuxjournal.com/content/developing-console-applications-bash)\n* [GitHub Topics > Bash](https://github.com/topics/bash)\n\nHave you seen the logo around? Make a [Pull Request](https://github.com/odb/official-bash-logo/pulls) with the link.\n','<h3 align=\"center\">\n<img src=\"https://cdn.rawgit.com/odb/official-bash-logo/master/assets/Logos/Identity/PNG/BASH_logo-transparent-bg-color.png\">\n</h3>\n<h1 id=\"officialgnubashlogo\">Official GNU Bash Logo</h1>\n<p>Everything you need to start using the official GNU Bash logo.</p>\n<h2 id=\"meta\">Meta</h2>\n<ul>\n<li>Client: <a href=\"http://tiswww.case.edu/php/chet/\">Chet Ramey</a> (Representing GNU/FSF)</li>\n<li>Commissioned by: <a href=\"https://www.maxcdn.com\">MaxCDN</a></li>\n<li>Art director: <a href=\"https://github.com/jdorfman\">Justin Dorfman</a></li>\n<li>Designed by: <a href=\"https://prospectone.io\">ProspectOne</a></li>\n<li>Font: <a href=\"https://github.com/google/roboto/\">Roboto Mono</a> (Apache License, Version 2.0)</li>\n<li>Logo License: <a href=\"http://artlibre.org/licence/lal/en/\">Free Art License</a></li>\n<li>Copyright 2016 <a href=\"https://www.fsf.org/\">Free Software Foundation</a></li>\n</ul>\n<h2 id=\"faq\">FAQ</h2>\n<p><strong>Yes you can…</strong></p>\n<ul>\n<li>Can I use this on my website?</li>\n<li>What about in a presentation?</li>\n<li>Any type of print media? (book, magazine, flyer, sticker)</li>\n<li>Promoting a commercial project that uses Bash e.g. <em>Bash on Windows</em>?</li>\n<li>Sell merchandise using this artwork? <em>(please consider giving some proceeds to the FSF)</em></li>\n</ul>\n<p><strong>Please do not…</strong></p>\n<ul>\n<li>Can I change any colors or fonts? <em>(see bash-style-guide.pdf for acceptable use)</em></li>\n<li><strong>Note:</strong> any modification(s) must adhere to section <code>2.3</code> \"FREEDOM TO MODIFY\" of the Free Art License (1.3)</li>\n<li>Use the icon for my logo?</li>\n</ul>\n<p>If you still have questions or concerns please email <a href=\"http://www.fsf.org/about/contact/email\">licensing@fsf.org</a></p>\n<h2 id=\"files\">Files</h2>\n<pre><code>.\n├── CONTRIBUTING.md\n├── LICENSE\n├── README.md\n└── assets\n    ├── LICENSE\n    ├── Logos\n    │   ├── Font\n    │   │   └── Roboto_Mono\n    │   │       ├── LICENSE.txt\n    │   │       ├── RobotoMono-Bold.ttf\n    │   │       ├── RobotoMono-BoldItalic.ttf\n    │   │       ├── RobotoMono-Italic.ttf\n    │   │       ├── RobotoMono-Light.ttf\n    │   │       ├── RobotoMono-LightItalic.ttf\n    │   │       ├── RobotoMono-Medium.ttf\n    │   │       ├── RobotoMono-MediumItalic.ttf\n    │   │       ├── RobotoMono-Regular.ttf\n    │   │       ├── RobotoMono-Thin.ttf\n    │   │       └── RobotoMono-ThinItalic.ttf\n    │   ├── Icons\n    │   │   ├── PNG\n    │   │   │   ├── 128x128.png\n    │   │   │   ├── 128x128_white.png\n    │   │   │   ├── 16x16.png\n    │   │   │   ├── 16x16_white.png\n    │   │   │   ├── 24x24.png\n    │   │   │   ├── 24x24_white.png\n    │   │   │   ├── 256x256.png\n    │   │   │   ├── 256x256_white.png\n    │   │   │   ├── 32x32.png\n    │   │   │   ├── 32x32_white.png\n    │   │   │   ├── 48x48.png\n    │   │   │   ├── 48x48_white.png\n    │   │   │   ├── 512x512.png\n    │   │   │   ├── 512x512_white.png\n    │   │   │   ├── 64x64.png\n    │   │   │   ├── 64x64_white.png\n    │   │   │   ├── Favicon-16x16.png\n    │   │   │   └── Favicon-16x16_white.png\n    │   │   ├── SVG\n    │   │   │   ├── 128x128.svg\n    │   │   │   ├── 128x128_white.svg\n    │   │   │   ├── 16x16.svg\n    │   │   │   ├── 16x16_white.svg\n    │   │   │   ├── 24x24.svg\n    │   │   │   ├── 24x24_white.svg\n    │   │   │   ├── 256x256.svg\n    │   │   │   ├── 256x256_white.svg\n    │   │   │   ├── 32x32.svg\n    │   │   │   ├── 32x32_white.svg\n    │   │   │   ├── 48x48.svg\n    │   │   │   ├── 48x48_white.svg\n    │   │   │   ├── 512x512.svg\n    │   │   │   ├── 512x512_white.svg\n    │   │   │   ├── 64x64.svg\n    │   │   │   ├── 64x64_white.svg\n    │   │   │   ├── BASH_logo-transparent-bg-bw-02.svg\n    │   │   │   ├── Favicon-16x16.svg\n    │   │   │   └── Favicon-16x16_white.svg\n    │   │   └── Source\n    │   │       ├── AI\n    │   │       │   └── BASH-icons-RGB-to-WEB.ai\n    │   │       ├── EPS\n    │   │       │   ├── BASH-icons-RGB-to-WEB-01.eps\n    │   │       │   └── BASH-icons-RGB-to-WEB-02.eps\n    │   │       └── PDF\n    │   │           └── BASH-icons-RGB-to-WEB.pdf\n    │   └── Identity\n    │       ├── PNG\n    │       │   ├── BASH_logo-transparent-bg-bw.png\n    │       │   └── BASH_logo-transparent-bg-color.png\n    │       ├── SVG\n    │       │   ├── BASH_logo-transparent-bg-bw.svg\n    │       │   └── BASH_logo-transparent-bg-color.svg\n    │       └── Source\n    │           ├── AI\n    │           │   ├── BASH_logo-transparent-bg-bw.ai\n    │           │   └── BASH_logo-transparent-bg-color.ai\n    │           └── Style_guide\n    │               ├── AI\n    │               │   ├── BASH-logo-stickers-for-PRINT-CMYK.ai\n    │               │   └── BASH_logo-vs-elements_for-PRINT-CMYK.ai\n    │               ├── EPS\n    │               │   ├── BASH-logo-stickers-for-PRINT-CMYK.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-01.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-02.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-03.eps\n    │               │   ├── BASH_logo-vs-elements_for-PRINT-CMYK-04.eps\n    │               │   └── BASH_logo-vs-elements_for-PRINT-CMYK-05.eps\n    │               └── PDF\n    │                   ├── BASH-logo-stickers-for-PRINT-CMYK.pdf\n    │                   └── BASH_logo-vs-elements_for-PRINT-CMYK.pdf\n    ├── bash-style-guide.pdf\n    └── copyright-agreement.pdf\n\n20 directories, 74 files\n</code></pre>\n<h2 id=\"sightings\">Sightings</h2>\n<ul>\n<li><a href=\"https://tiswww.case.edu/php/chet/bash/bashtop.html\">The GNU Bourne-Again SHell website</a></li>\n<li><a href=\"http://www.unixstickers.com/tag/bash\">Unixstickers</a></li>\n<li><a href=\"http://www.unixstickers.com/blog/new-home-for-bash-stickers-justin-dorfman-guest-post\">Unixstickers Blog</a></li>\n<li><a href=\"https://en.m.wikipedia.org/wiki/Bash_(Unix_shell)\">Wikipedia</a></li>\n<li><a href=\"https://opensource.com/article/16/12/bash-logo-community\">OpenSource.com</a></li>\n<li><a href=\"http://instantlogosearch.com/?q=bash\">Instant Logo Search</a></li>\n<li><a href=\"https://hacklog.mu/how-to-get-a-gnu-bash-sticker/\">HACKLOG</a></li>\n<li><a href=\"https://www.cyberciti.biz/open-source/learning-bash-scripting-for-beginners/\">Learning bash scripting for beginners</a></li>\n<li><a href=\"https://medium.com/@jdorfman/osx-password-generator-in-bash-48687892c4f3#.31hsjpeac\">OS X Password Generator in BASH</a></li>\n<li><a href=\"https://www.cyberciti.biz/faq/howto-change-linux-unix-freebsd-login-shell/\">Howto: Changing Linux Login Shell</a></li>\n<li><a href=\"https://www.cyberciti.biz/faq/linux-unix-copy-a-file-to-multiple-directories-using-cp-command/\">How to copy a single file to multiple directories in Linux or Unix</a></li>\n<li><a href=\"https://www.cyberciti.biz/faq/linux-unix-arg_max-maximum-length-of-arguments/\">Maximum Character Length of Arguments In a Shell Command</a></li>\n<li><a href=\"https://dev.to/thiht/shell-scripts-matter\">Shell Scripts Matter</a></li>\n<li><a href=\"https://github.com/Idnan/bash-guide\">bash-guide - A guide to learn bash</a></li>\n<li><a href=\"https://www.cyberciti.biz/tips/shell-scripting-bash-how-to-create-temporary-random-file-name.html\">Shell scripting (BASH) : How to create temporary random file name</a></li>\n<li><a href=\"https://www.cyberciti.biz/tips/find-out-if-file-exists-with-conditional-expressions.html\">Linux / UNIX: Find Out If File Exists With Conditional Expressions in a Bash Shell</a></li>\n<li><a href=\"https://www.cyberciti.biz/faq/get-extract-domain-name-from-url-in-linux-unix-bash/\">How to get domain name from URL in bash shell script</a></li>\n<li><a href=\"https://www.cyberciti.biz/faq/howto-use-tar-command-through-network-over-ssh-session/\">How To Use tar Command Through Network Over SSH Session</a></li>\n<li><a href=\"https://www.cyberciti.biz/faq/howto-find-a-directory-linux-command/\">How To Find a Directory On Linux Based System</a></li>\n<li><a href=\"https://www.reddit.com/r/linux/comments/7dupyf/just_found_out_that_gnu_bash_has_a_official_logo/\">Reddit: GNU Bash has a official logo and it looks so beautiful</a></li>\n<li><a href=\"https://bashlogo.com/\">Bash Logo Media Assets</a></li>\n<li><a href=\"https://www.linuxjournal.com/content/developing-console-applications-bash\">Developing Console Applications with Bash</a></li>\n<li><a href=\"https://github.com/topics/bash\">GitHub Topics > Bash</a></li>\n</ul>\n<p>Have you seen the logo around? Make a <a href=\"https://github.com/odb/official-bash-logo/pulls\">Pull Request</a> with the link.</p>'),
	(29,'dylanaraps','openbox-patched','https://raw.githubusercontent.com/dylanaraps/openbox-patched/master/README.md','2018-11-07 12:30:31','# openbox-patched\n\nThis repo contains a `PKGBUILD` and various patches for Openbox `3.6.2`. The purpose of this repo is to track issues and fix quirks with the Rounded Corners patch.\n\n\n![scrot](http://i.imgur.com/ThihqTS.png)\n\n\n## Installation\n\nInstall `openbox-patched` from the AUR.\n\n\n## Patches\n\nThis package uses the following patches.\n\n\n### Rounded Corners\n\nThis patch adds support for rounded corners to Openbox.\n\n> Source: https://forums.bunsenlabs.org/viewtopic.php?pid=46711#p46711\n\n\n**Enabling rounded corners:**\n\nTo enable Rounded Corners add this line to the \'<theme>\' section of your Openbox config.\n\n    \'<cornerRadius>8</cornerRadius>\'\n\nThe patch also takes an argument for menu corners.\n\n    \'<cornerRadius menu=\"yes\">8</cornerRadius>\'\n\n\n\n### Fix out of bounds\n\nThis patch fixes a crash when only a single window button is enabled.\n\n> Source: https://github.com/danakj/openbox/pull/26\n','<h1 id=\"openboxpatched\">openbox-patched</h1>\n<p>This repo contains a <code>PKGBUILD</code> and various patches for Openbox <code>3.6.2</code>. The purpose of this repo is to track issues and fix quirks with the Rounded Corners patch.</p>\n<p><img src=\"http://i.imgur.com/ThihqTS.png\" alt=\"scrot\" /></p>\n<h2 id=\"installation\">Installation</h2>\n<p>Install <code>openbox-patched</code> from the AUR.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>This package uses the following patches.</p>\n<h3 id=\"roundedcorners\">Rounded Corners</h3>\n<p>This patch adds support for rounded corners to Openbox.</p>\n<blockquote>\n  <p>Source: https://forums.bunsenlabs.org/viewtopic.php?pid=46711#p46711</p>\n</blockquote>\n<p><strong>Enabling rounded corners:</strong></p>\n<p>To enable Rounded Corners add this line to the \'<theme>\' section of your Openbox config.</p>\n<pre><code>\'&lt;cornerRadius&gt;8&lt;/cornerRadius&gt;\'\n</code></pre>\n<p>The patch also takes an argument for menu corners.</p>\n<pre><code>\'&lt;cornerRadius menu=\"yes\"&gt;8&lt;/cornerRadius&gt;\'\n</code></pre>\n<h3 id=\"fixoutofbounds\">Fix out of bounds</h3>\n<p>This patch fixes a crash when only a single window button is enabled.</p>\n<blockquote>\n  <p>Source: https://github.com/danakj/openbox/pull/26</p>\n</blockquote>'),
	(30,'x0rz','EQGRP','https://raw.githubusercontent.com/x0rz/EQGRP/master/README.md','2018-11-07 12:30:32','# Browsable content of eqgrp-auction-file.tar.xz\n- Original file: https://mega.nz/#!zEAU1AQL!oWJ63n-D6lCuCQ4AY0Cv_405hX8kn7MEsa1iLH5UjKU\n- Passphrase: `CrDj\"(;Va.*NdlnzB9M?@K2)#>deB7mN` (as disclosed by the ShadowBrokers, [source](https://medium.com/@shadowbrokerss/dont-forget-your-base-867d304a94b1))\n- This summary is provided by the community: complaints/credits to `jvoisin` @ `dustri.org` and [@x0rz](https://www.twitter.com/x0rz)\n\n⚠️ Some binaries may be picked up by your antivirus\n\nNested Tar archives have been uncompressed in the [archive_files](/archive_files) folder.\n\n# Content\n# Unknown\n- **JACKLADDER** \n- **DAMPCROWD**\n- **ELDESTMYDLE**\n- **SUAVEEYEFUL**\n- **WATCHER**\n- **YELLOWSPIRIT**\n\n# Misc\n- **DITTLELIGHT (HIDELIGHT)** unhide **NOPEN** window to run unix oracle db scripts\n- **DUL** shellcode packer\n- **egg_timer** execution delayer (equivalent to `at`)\n- **ewok** [snmpwalk](http://www.net-snmp.org/docs/man/snmpwalk.html)-like?\n- **gr** Web crontab manager? wtf. NSA are webscale dude\n- **jackladderhelper** simple port binder\n- **magicjack** [DES](https://en.wikipedia.org/wiki/Data_Encryption_Standard) implementation in Perl \n- **PORKSERVER** inetd-based server for the **PORK** implant\n- **ri** equivalent to `rpcinfo`\n- **uX_local** Micro X server, likely for remote management\n- **ITIME** Change Date/Time of a last change on a file of an unix filesystem\n\n# Remote Code Execution \n## Solaris\n- **CATFLAP** Solaris 7/8/9 (SPARC and Intel) RCE (for a [__LOT__]( https://twitter.com/hackerfantastic/status/850799265723056128 ) of versions)\n- **EASYSTREET**/**CMSEX** and **cmsd** Solaris `rpc.cmsd` remote root\n- **EBBISLAND**/**ELVISCICADA**/**snmpXdmid** and **frown**: `CVE-2001-0236`, Solaris 2.6-2.9 - snmpXdmid Buffer Overflow\n- **sneer**: *mibissa* (Sun snmpd) RCE, with *DWARF* symbols :D\n- **dtspcdx_sparc** dtspcd RCE for SunOS 5. -5.8. what a useless exploit\n- **TOOLTALK** DEC, IRIX, or Sol2.6 or earlier Tooltalk buffer overflow RCE\n- **VIOLENTSPIRIT** RCE for ttsession daemon in CDE on Solaris 2.6-2.9 on SPARC and x86\n- **EBBISLAND**  RCE Solaris 2.6 -> 2.10 Inject shellcode in vulnerable rpc service\n\n## Netscape Server\n- **xp_ns-httpd** NetScape Server RCE\n- **nsent** RCE for NetScape Enterprise server 4.1 for Solaris\n- **eggbasket** another NetScape Enterprise RCE, this time version `3.5`, likely SPARC only\n\n## FTP servers\n- **EE** proftpd 1.2.8 RCE, for RHL 7.3+/Linux, `CVE-2011-4130`? another reason not to use proftpd\n- **wuftpd** likely `CVE-2001-0550`\n\n## Web \n- **ESMARKCONANT** exploits phpBB remote command execution (<[2.0.11](https://www.phpbb.com/community/viewtopic.php?t=240636)) `CVE-2004-1315`\n- **ELIDESKEW** Public known vulnerablity in [SquirrelMail](https://squirrelmail.org/) versions 1.4.0 - 1.4.7\n- **ELITEHAMMER** Runs against RedFlag Webmail 4, yields user `nobody`\n- **ENVISIONCOLLISION** RCE for phpBB (derivative)\n- **EPICHERO** RCE for Avaya Media Server\n- **COTTONAXE** RCE to retrieve log and information on LiteSpeed Web Server\n\n## Misc\n- **calserver** spooler RPC based RCE\n- **EARLYSHOVEL** RCE RHL7 using sendmail  ` CVE-2003-0681 ` ` CVE-2003-0694 `\n- **ECHOWRECKER**/**sambal**: samba 2.2 and 3.0.2a - 3.0.12-5 RCE (with *DWARF* symbols), for FreeBSD, OpenBSD 3.1, OpenBSD 3.2 (with a non-executable stack, zomg), and Linux. Likely `CVE-2003-0201`. There is also a Solaris version\n- **ELECTRICSLIDE** RCE (heap-overflow) in [Squid](http://www.squid-cache.org/), with a chinese-looking vector\n- **EMBERSNOUT** a remote exploit against Red Hat 9.0\'s httpd-2.0.40-21\n- **ENGAGENAUGHTY**/**apache-ssl-linux** Apache2 mod-ssl RCE (2008), SSLv2\n- **ENTERSEED** Postfix RCE, for 2.0.8 - 2.1.5\n- **ERRGENTLE**/**xp-exim-3-remote-linux** Exim remote root, likely `CVE-2001-0690`, Exim 3.22 - 3.35\n- **EXPOSITTRAG** exploit pcnfsd version 2.x\n- **extinctspinash**: `Chili!Soft ASP` stuff RCE? and *Cobalt RaQ* too?\n- **KWIKEMART** (**km** binary) RCE for SSH1 padding crc32 thingy (https://packetstormsecurity.com/files/24347/ssh1.crc32.txt.html)\n- **prout** (ab)use of `pcnfs` RPC program (version 2 only) (1999)\n- **slugger**: various printers RCE, looks like `CVE-1999-0078`\n- **statdx** Redhat Linux 6.0/6.1/6.2 rpc.statd remote root exploit (IA32)\n- **telex** Telnetd RCE for RHL?  `CVE-1999-0192`?\n- **toffeehammer** RCE for `cgiecho` part of `cgimail`, exploits fprintf\n- **VS-VIOLET** Solaris 2.6 - 2.9, something related to [XDMCP](https://en.wikipedia.org/wiki/X_display_manager_(program_type)#X_Display_Manager_Control_Protocol)\n- **SKIMCOUNTRY** Steal mobile phone log data\n- **SLYHERETIC_CHECKS** Check if a target is ready for **SLYHERETIC** (not included)\n- **EMPTYBOWL** RCE for MailCenter Gateway (mcgate) - an application that comes with Asia Info Message Center mailserver; buffer overflow allows a string passed to popen() call to be controlled by an attacker; arbitraty cmd execute known to work only for AIMC Version 2.9.5.1\n- **CURSEHAPPY** Parser of CDR (Call Detail Records) (siemens, alcatel, other containing isb hki lhr files) probably upgrade of ORLEANSTRIDE\n- **ORLEANSTRIDE** Parser of CDR (Call Detail Records)\n\n# Anti-forensic\n- **toast**: `wtmps` editor/manipulator/querier\n- **pcleans**: `pacctl` manipulator/cleaner\n- **DIZZYTACHOMETER**: Alters RPM database when system file is changed so that RPM (>4.1) verify doesn\'t complain \n- **DUBMOAT** Manipulate utmp\n- **scrubhands** post-op cleanup tool?\n- **Auditcleaner** cleans up `audit.log`\n\n# Control\n## Iting HP-UX, Linux, SunOS\n- **FUNNELOUT**: database-based web-backdoor for `vbulletin`\n- **hi** UNIX bind shell\n- **jackpop** bind shell for SPARC\n- **NOPEN** Backdoor? A RAT or post-exploitation shell consisting of a client and a server that encrypts data using RC6 [source](http://electrospaces.blogspot.nl/p/nsas-tao-division-codewords.html)** SunOS5.8\n- **SAMPLEMAN / ROUTER TOUCH** Clearly hits Cisco via some sort of redirection via a tool on port 2323... (thanks to @cynicalsecurity)\n- **SECONDDATE** Implant for Linux/FreeBSD/Solaris/JunOS\n- **SHENTYSDELIGHT** Linux keylogger\n- **SIDETRACK** implant used for **PITCHIMPAIR**\n- **SIFT** Implant for Solaris/Linux/FreeBSD\n- **SLYHERETIC** SLYHERETIC is a light-weight implant for AIX 5.1:-5.2 Uses Hide-in-Plain-Sight techniques to provide stealth.\n- **STRIFEWORLD**: Network-monitoring for UNIX, needs to be launched as root. Strifeworld is a program that captures data transmitted as part of TCP connections and stores the data in a memory for analysis. Strifeworld reconstructs the actual data streams and stores each session in a file for later analysis.\n- **SUCTIONCHAR**: 32 or 64 bit OS, solaris sparc 8,9, Kernel level implant - transparent, sustained, or realtime interception of processes input/output vnode traffic, able to intercept ssh, telnet, rlogin, rsh, password, login, csh, su, …\n- **STOICSURGEON** Rootkit/Backdoor Linux MultiArchi\n- **INCISION** Rootkit/Backdoor Linux Can be upgrade to StoicSurgeon(more recent version)\n\n## CnC\n- **Seconddate_CnC**: CnC for **SECONDDATE**\n- **ELECTRICSIDE** likely a big-fat-ass CnC\n- **NOCLIENT** Seems to be the CnC for **NOPEN***\n- **DEWDROP** \n\n# Privesc\n\n## Linux\n\n- **h**: linux kernel privesc, old-day compiled `hatorihanzo.c`, do-brk() in 2.4.22  [CVE-2003-0961](https://nvd.nist.gov/vuln/detail/CVE-2003-0961)\n- **gsh**: `setreuid(0,0);execl(\"bash\",\"/bin/bash\")`\n- **PTRACE/FORKPTY**/**km3**: linux kernel lpe, kmod+ptrace, [CVE-2003-0127](https://nvd.nist.gov/vuln/detail/CVE-2003-0127), (https://mjt.nysv.org/scratch/ptrace_exploit/km3.c)\n- **EXACTCHANGE**: NULL-deref based local-root, based on various sockets protocols, compiled in 2004, made public in 2005\n- **ghost**:`statmon`/tooltalk privesc?\n- **elgingamble**:\n- **ESTOPFORBADE** local root `gds_inet_server` for, Cobalt Linux release 6.0, to be used with **complexpuzzle**\n- **ENVOYTOMATO** LPE through bluetooth stack(?)\n- **ESTOPMOONLIT** Linux LPE\n- **EPOXYRESIN** Linux LPE\n\n## AIX\n- **EXCEEDSALON-AIX** privesc\n\n## Others\n- **procsuid**: setuid perl (yes, it\'s a real thing) privesc through unsanitized environnement variables. wtf dude\n- **elatedmonkey**: cpanel privesc (0day) using `/usr/local/cpanel/3rdparty/mailman/`. Creates mailman mailing list: `mailman config_list`\n- **estesfox**: logwatch privesc, [old-day](http://www.securiteam.com/exploits/5OP0S2A6KI.html)\n- **evolvingstrategy**: privesc, likely for Kaspersky Anti-virus (`/sbin/keepup2date` is kaspersky\'s stuff) (what is `ey_vrupdate`?)\n- **eh** OpenWebMail privesc\n- **escrowupgrade** cachefsd for solaris 2.6 2.7 sparc\n- **ENGLANDBOGY** local exploit against Xorg X11R7 1.0.1, X11R7 1.0, X11R6 6.9, Includes the following distributions: MandrakeSoft Linux 10.2, Ubuntu 5.0.4, SuSE Linux 10.0, RedHat Fedora Core5, MandrakeSoft Linux 2006.0. requires a setuid Xorg\n- **endlessdonut**: Apache fastcgi privesc\n\n# Interesting stuff\n- [default passwords list](https://github.com/x0rz/EQGRP/blob/33810162273edda807363237ef7e7c5ece3e4100/Linux/etc/.oprc) (courtesy of x0rz)\n\n- [.gov.ru](https://github.com/x0rz/EQGRP/blob/1667dacddf710082a1567e4e481f416876f432b7/archive_files/stoicctrls/stoicctrls/stoicsurgeon_ctrl__v__1.5.13.4_x86-freebsd-5.3) \n (stoicsurgeon_ctrl__v__1.5.13.5_x86-freebsd-5.3-sassyninja-mail.aprf.gov.ru) (wow!)\n','<h1 id=\"browsablecontentofeqgrpauctionfiletarxz\">Browsable content of eqgrp-auction-file.tar.xz</h1>\n<ul>\n<li>Original file: https://mega.nz/#!zEAU1AQL!oWJ63n-D6lCuCQ4AY0Cv_405hX8kn7MEsa1iLH5UjKU</li>\n<li>Passphrase: <code>CrDj\"(;Va.*NdlnzB9M?@K2)#&gt;deB7mN</code> (as disclosed by the ShadowBrokers, <a href=\"https://medium.com/@shadowbrokerss/dont-forget-your-base-867d304a94b1\">source</a>)</li>\n<li>This summary is provided by the community: complaints/credits to <code>jvoisin</code> @ <code>dustri.org</code> and <a href=\"https://www.twitter.com/x0rz\">@x0rz</a></li>\n</ul>\n<p>⚠️ Some binaries may be picked up by your antivirus</p>\n<p>Nested Tar archives have been uncompressed in the <a href=\"/archive_files\">archive_files</a> folder.</p>\n<h1 id=\"content\">Content</h1>\n<h1 id=\"unknown\">Unknown</h1>\n<ul>\n<li><strong>JACKLADDER</strong> </li>\n<li><strong>DAMPCROWD</strong></li>\n<li><strong>ELDESTMYDLE</strong></li>\n<li><strong>SUAVEEYEFUL</strong></li>\n<li><strong>WATCHER</strong></li>\n<li><strong>YELLOWSPIRIT</strong></li>\n</ul>\n<h1 id=\"misc\">Misc</h1>\n<ul>\n<li><strong>DITTLELIGHT (HIDELIGHT)</strong> unhide <strong>NOPEN</strong> window to run unix oracle db scripts</li>\n<li><strong>DUL</strong> shellcode packer</li>\n<li><strong>egg_timer</strong> execution delayer (equivalent to <code>at</code>)</li>\n<li><strong>ewok</strong> <a href=\"http://www.net-snmp.org/docs/man/snmpwalk.html\">snmpwalk</a>-like?</li>\n<li><strong>gr</strong> Web crontab manager? wtf. NSA are webscale dude</li>\n<li><strong>jackladderhelper</strong> simple port binder</li>\n<li><strong>magicjack</strong> <a href=\"https://en.wikipedia.org/wiki/Data_Encryption_Standard\">DES</a> implementation in Perl </li>\n<li><strong>PORKSERVER</strong> inetd-based server for the <strong>PORK</strong> implant</li>\n<li><strong>ri</strong> equivalent to <code>rpcinfo</code></li>\n<li><strong>uX_local</strong> Micro X server, likely for remote management</li>\n<li><strong>ITIME</strong> Change Date/Time of a last change on a file of an unix filesystem</li>\n</ul>\n<h1 id=\"remotecodeexecution\">Remote Code Execution</h1>\n<h2 id=\"solaris\">Solaris</h2>\n<ul>\n<li><strong>CATFLAP</strong> Solaris 7/8/9 (SPARC and Intel) RCE (for a <a href=\"https://twitter.com/hackerfantastic/status/850799265723056128\"><strong>LOT</strong></a> of versions)</li>\n<li><strong>EASYSTREET</strong>/<strong>CMSEX</strong> and <strong>cmsd</strong> Solaris <code>rpc.cmsd</code> remote root</li>\n<li><strong>EBBISLAND</strong>/<strong>ELVISCICADA</strong>/<strong>snmpXdmid</strong> and <strong>frown</strong>: <code>CVE-2001-0236</code>, Solaris 2.6-2.9 - snmpXdmid Buffer Overflow</li>\n<li><strong>sneer</strong>: <em>mibissa</em> (Sun snmpd) RCE, with <em>DWARF</em> symbols :D</li>\n<li><strong>dtspcdx_sparc</strong> dtspcd RCE for SunOS 5. -5.8. what a useless exploit</li>\n<li><strong>TOOLTALK</strong> DEC, IRIX, or Sol2.6 or earlier Tooltalk buffer overflow RCE</li>\n<li><strong>VIOLENTSPIRIT</strong> RCE for ttsession daemon in CDE on Solaris 2.6-2.9 on SPARC and x86</li>\n<li><strong>EBBISLAND</strong>  RCE Solaris 2.6 -&gt; 2.10 Inject shellcode in vulnerable rpc service</li>\n</ul>\n<h2 id=\"netscapeserver\">Netscape Server</h2>\n<ul>\n<li><strong>xp_ns-httpd</strong> NetScape Server RCE</li>\n<li><strong>nsent</strong> RCE for NetScape Enterprise server 4.1 for Solaris</li>\n<li><strong>eggbasket</strong> another NetScape Enterprise RCE, this time version <code>3.5</code>, likely SPARC only</li>\n</ul>\n<h2 id=\"ftpservers\">FTP servers</h2>\n<ul>\n<li><strong>EE</strong> proftpd 1.2.8 RCE, for RHL 7.3+/Linux, <code>CVE-2011-4130</code>? another reason not to use proftpd</li>\n<li><strong>wuftpd</strong> likely <code>CVE-2001-0550</code></li>\n</ul>\n<h2 id=\"web\">Web</h2>\n<ul>\n<li><strong>ESMARKCONANT</strong> exploits phpBB remote command execution (&lt;<a href=\"https://www.phpbb.com/community/viewtopic.php?t=240636\">2.0.11</a>) <code>CVE-2004-1315</code></li>\n<li><strong>ELIDESKEW</strong> Public known vulnerablity in <a href=\"https://squirrelmail.org/\">SquirrelMail</a> versions 1.4.0 - 1.4.7</li>\n<li><strong>ELITEHAMMER</strong> Runs against RedFlag Webmail 4, yields user <code>nobody</code></li>\n<li><strong>ENVISIONCOLLISION</strong> RCE for phpBB (derivative)</li>\n<li><strong>EPICHERO</strong> RCE for Avaya Media Server</li>\n<li><strong>COTTONAXE</strong> RCE to retrieve log and information on LiteSpeed Web Server</li>\n</ul>\n<h2 id=\"misc-1\">Misc</h2>\n<ul>\n<li><strong>calserver</strong> spooler RPC based RCE</li>\n<li><strong>EARLYSHOVEL</strong> RCE RHL7 using sendmail  <code>CVE-2003-0681</code> <code>CVE-2003-0694</code></li>\n<li><strong>ECHOWRECKER</strong>/<strong>sambal</strong>: samba 2.2 and 3.0.2a - 3.0.12-5 RCE (with <em>DWARF</em> symbols), for FreeBSD, OpenBSD 3.1, OpenBSD 3.2 (with a non-executable stack, zomg), and Linux. Likely <code>CVE-2003-0201</code>. There is also a Solaris version</li>\n<li><strong>ELECTRICSLIDE</strong> RCE (heap-overflow) in <a href=\"http://www.squid-cache.org/\">Squid</a>, with a chinese-looking vector</li>\n<li><strong>EMBERSNOUT</strong> a remote exploit against Red Hat 9.0\'s httpd-2.0.40-21</li>\n<li><strong>ENGAGENAUGHTY</strong>/<strong>apache-ssl-linux</strong> Apache2 mod-ssl RCE (2008), SSLv2</li>\n<li><strong>ENTERSEED</strong> Postfix RCE, for 2.0.8 - 2.1.5</li>\n<li><strong>ERRGENTLE</strong>/<strong>xp-exim-3-remote-linux</strong> Exim remote root, likely <code>CVE-2001-0690</code>, Exim 3.22 - 3.35</li>\n<li><strong>EXPOSITTRAG</strong> exploit pcnfsd version 2.x</li>\n<li><strong>extinctspinash</strong>: <code>Chili!Soft ASP</code> stuff RCE? and <em>Cobalt RaQ</em> too?</li>\n<li><strong>KWIKEMART</strong> (<strong>km</strong> binary) RCE for SSH1 padding crc32 thingy (https://packetstormsecurity.com/files/24347/ssh1.crc32.txt.html)</li>\n<li><strong>prout</strong> (ab)use of <code>pcnfs</code> RPC program (version 2 only) (1999)</li>\n<li><strong>slugger</strong>: various printers RCE, looks like <code>CVE-1999-0078</code></li>\n<li><strong>statdx</strong> Redhat Linux 6.0/6.1/6.2 rpc.statd remote root exploit (IA32)</li>\n<li><strong>telex</strong> Telnetd RCE for RHL?  <code>CVE-1999-0192</code>?</li>\n<li><strong>toffeehammer</strong> RCE for <code>cgiecho</code> part of <code>cgimail</code>, exploits fprintf</li>\n<li><strong>VS-VIOLET</strong> Solaris 2.6 - 2.9, something related to <a href=\"https://en.wikipedia.org/wiki/X_display_manager_(program_type)#X_Display_Manager_Control_Protocol\">XDMCP</a></li>\n<li><strong>SKIMCOUNTRY</strong> Steal mobile phone log data</li>\n<li><strong>SLYHERETIC_CHECKS</strong> Check if a target is ready for <strong>SLYHERETIC</strong> (not included)</li>\n<li><strong>EMPTYBOWL</strong> RCE for MailCenter Gateway (mcgate) - an application that comes with Asia Info Message Center mailserver; buffer overflow allows a string passed to popen() call to be controlled by an attacker; arbitraty cmd execute known to work only for AIMC Version 2.9.5.1</li>\n<li><strong>CURSEHAPPY</strong> Parser of CDR (Call Detail Records) (siemens, alcatel, other containing isb hki lhr files) probably upgrade of ORLEANSTRIDE</li>\n<li><strong>ORLEANSTRIDE</strong> Parser of CDR (Call Detail Records)</li>\n</ul>\n<h1 id=\"antiforensic\">Anti-forensic</h1>\n<ul>\n<li><strong>toast</strong>: <code>wtmps</code> editor/manipulator/querier</li>\n<li><strong>pcleans</strong>: <code>pacctl</code> manipulator/cleaner</li>\n<li><strong>DIZZYTACHOMETER</strong>: Alters RPM database when system file is changed so that RPM (&gt;4.1) verify doesn\'t complain </li>\n<li><strong>DUBMOAT</strong> Manipulate utmp</li>\n<li><strong>scrubhands</strong> post-op cleanup tool?</li>\n<li><strong>Auditcleaner</strong> cleans up <code>audit.log</code></li>\n</ul>\n<h1 id=\"control\">Control</h1>\n<h2 id=\"itinghpuxlinuxsunos\">Iting HP-UX, Linux, SunOS</h2>\n<ul>\n<li><strong>FUNNELOUT</strong>: database-based web-backdoor for <code>vbulletin</code></li>\n<li><strong>hi</strong> UNIX bind shell</li>\n<li><strong>jackpop</strong> bind shell for SPARC</li>\n<li><strong>NOPEN</strong> Backdoor? A RAT or post-exploitation shell consisting of a client and a server that encrypts data using RC6 <a href=\"http://electrospaces.blogspot.nl/p/nsas-tao-division-codewords.html\">source</a>** SunOS5.8</li>\n<li><strong>SAMPLEMAN / ROUTER TOUCH</strong> Clearly hits Cisco via some sort of redirection via a tool on port 2323… (thanks to @cynicalsecurity)</li>\n<li><strong>SECONDDATE</strong> Implant for Linux/FreeBSD/Solaris/JunOS</li>\n<li><strong>SHENTYSDELIGHT</strong> Linux keylogger</li>\n<li><strong>SIDETRACK</strong> implant used for <strong>PITCHIMPAIR</strong></li>\n<li><strong>SIFT</strong> Implant for Solaris/Linux/FreeBSD</li>\n<li><strong>SLYHERETIC</strong> SLYHERETIC is a light-weight implant for AIX 5.1:-5.2 Uses Hide-in-Plain-Sight techniques to provide stealth.</li>\n<li><strong>STRIFEWORLD</strong>: Network-monitoring for UNIX, needs to be launched as root. Strifeworld is a program that captures data transmitted as part of TCP connections and stores the data in a memory for analysis. Strifeworld reconstructs the actual data streams and stores each session in a file for later analysis.</li>\n<li><strong>SUCTIONCHAR</strong>: 32 or 64 bit OS, solaris sparc 8,9, Kernel level implant - transparent, sustained, or realtime interception of processes input/output vnode traffic, able to intercept ssh, telnet, rlogin, rsh, password, login, csh, su, …</li>\n<li><strong>STOICSURGEON</strong> Rootkit/Backdoor Linux MultiArchi</li>\n<li><strong>INCISION</strong> Rootkit/Backdoor Linux Can be upgrade to StoicSurgeon(more recent version)</li>\n</ul>\n<h2 id=\"cnc\">CnC</h2>\n<ul>\n<li><strong>Seconddate_CnC</strong>: CnC for <strong>SECONDDATE</strong></li>\n<li><strong>ELECTRICSIDE</strong> likely a big-fat-ass CnC</li>\n<li><strong>NOCLIENT</strong> Seems to be the CnC for <strong>NOPEN</strong>*</li>\n<li><strong>DEWDROP</strong> </li>\n</ul>\n<h1 id=\"privesc\">Privesc</h1>\n<h2 id=\"linux\">Linux</h2>\n<ul>\n<li><strong>h</strong>: linux kernel privesc, old-day compiled <code>hatorihanzo.c</code>, do-brk() in 2.4.22  <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2003-0961\">CVE-2003-0961</a></li>\n<li><strong>gsh</strong>: <code>setreuid(0,0);execl(\"bash\",\"/bin/bash\")</code></li>\n<li><strong>PTRACE/FORKPTY</strong>/<strong>km3</strong>: linux kernel lpe, kmod+ptrace, <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2003-0127\">CVE-2003-0127</a>, (https://mjt.nysv.org/scratch/ptrace_exploit/km3.c)</li>\n<li><strong>EXACTCHANGE</strong>: NULL-deref based local-root, based on various sockets protocols, compiled in 2004, made public in 2005</li>\n<li><strong>ghost</strong>:<code>statmon</code>/tooltalk privesc?</li>\n<li><strong>elgingamble</strong>:</li>\n<li><strong>ESTOPFORBADE</strong> local root <code>gds_inet_server</code> for, Cobalt Linux release 6.0, to be used with <strong>complexpuzzle</strong></li>\n<li><strong>ENVOYTOMATO</strong> LPE through bluetooth stack(?)</li>\n<li><strong>ESTOPMOONLIT</strong> Linux LPE</li>\n<li><strong>EPOXYRESIN</strong> Linux LPE</li>\n</ul>\n<h2 id=\"aix\">AIX</h2>\n<ul>\n<li><strong>EXCEEDSALON-AIX</strong> privesc</li>\n</ul>\n<h2 id=\"others\">Others</h2>\n<ul>\n<li><strong>procsuid</strong>: setuid perl (yes, it\'s a real thing) privesc through unsanitized environnement variables. wtf dude</li>\n<li><strong>elatedmonkey</strong>: cpanel privesc (0day) using <code>/usr/local/cpanel/3rdparty/mailman/</code>. Creates mailman mailing list: <code>mailman config_list</code></li>\n<li><strong>estesfox</strong>: logwatch privesc, <a href=\"http://www.securiteam.com/exploits/5OP0S2A6KI.html\">old-day</a></li>\n<li><strong>evolvingstrategy</strong>: privesc, likely for Kaspersky Anti-virus (<code>/sbin/keepup2date</code> is kaspersky\'s stuff) (what is <code>ey_vrupdate</code>?)</li>\n<li><strong>eh</strong> OpenWebMail privesc</li>\n<li><strong>escrowupgrade</strong> cachefsd for solaris 2.6 2.7 sparc</li>\n<li><strong>ENGLANDBOGY</strong> local exploit against Xorg X11R7 1.0.1, X11R7 1.0, X11R6 6.9, Includes the following distributions: MandrakeSoft Linux 10.2, Ubuntu 5.0.4, SuSE Linux 10.0, RedHat Fedora Core5, MandrakeSoft Linux 2006.0. requires a setuid Xorg</li>\n<li><strong>endlessdonut</strong>: Apache fastcgi privesc</li>\n</ul>\n<h1 id=\"interestingstuff\">Interesting stuff</h1>\n<ul>\n<li><p><a href=\"https://github.com/x0rz/EQGRP/blob/33810162273edda807363237ef7e7c5ece3e4100/Linux/etc/.oprc\">default passwords list</a> (courtesy of x0rz)</p></li>\n<li><p><a href=\"https://github.com/x0rz/EQGRP/blob/1667dacddf710082a1567e4e481f416876f432b7/archive_files/stoicctrls/stoicctrls/stoicsurgeon_ctrl__v__1.5.13.4_x86-freebsd-5.3\">.gov.ru</a> \n(stoicsurgeon<em>ctrl<strong>v</strong>1.5.13.5</em>x86-freebsd-5.3-sassyninja-mail.aprf.gov.ru) (wow!)</p></li>\n</ul>');

INSERT INTO `readme` (`id`, `author`, `name`, `url`, `timestamp`, `content`, `content_html`)
VALUES
	(31,'x0rz','EQGRP_Lost_in_Translation','https://raw.githubusercontent.com/x0rz/EQGRP_Lost_in_Translation/master/README.md','2018-11-07 12:30:32','# EQGRP Lost in Translation\nDecrypted content of odd.tar.xz.gpg, swift.tar.xz.gpg and windows.tar.xz.gpg\n\nDownloaded from https://yadi.sk/d/NJqzpqo_3GxZA4\nOriginal post from the #ShadowBrokers https://steemit.com/shadowbrokers/@theshadowbrokers/lost-in-translation\n\n- **windows**: contains Windows exploits, implants and payloads\n- **swift**: contains operational notes from banking attacks\n- **oddjob**: docs related to the ODDJOB backdoor \n\n## sha256 hashes\n### Original archives\n- `7c19a67d728bc700d18d2ed389a80de495681b7097222d9b8f1d696f0986f9a2` odd.tar.xz.gpg\n- `78b89b2c4b129400150c7b60a426ff469aaea31da1588d2abc4180feaa9c41d3` swift.tar.xz.gpg\n- `c28d5c10ec78bc66d3868e4862c7f801ffd561e2116b529e0782bf78f3ef3255` windows.tar.xz.gpg\n\n\n### Decrypted archives\n- `85e03866ae7eaaedd9462054b62a10f2180983bdfd086b29631173ae4422f524` odd.tar.xz\n- `df468f01e65f3f1bc18f844d7f7bac8f8eec3664a131e2fb67ae3a55f8523004` swift.tar.xz\n- `5bb9ddfbcefb75d017a9e745b83729390617b16f4079356579ef00e5e6b5fbd0` windows.tar.xz','<h1 id=\"eqgrplostintranslation\">EQGRP Lost in Translation</h1>\n<p>Decrypted content of odd.tar.xz.gpg, swift.tar.xz.gpg and windows.tar.xz.gpg</p>\n<p>Downloaded from https://yadi.sk/d/NJqzpqo_3GxZA4\nOriginal post from the #ShadowBrokers https://steemit.com/shadowbrokers/@theshadowbrokers/lost-in-translation</p>\n<ul>\n<li><strong>windows</strong>: contains Windows exploits, implants and payloads</li>\n<li><strong>swift</strong>: contains operational notes from banking attacks</li>\n<li><strong>oddjob</strong>: docs related to the ODDJOB backdoor </li>\n</ul>\n<h2 id=\"sha256hashes\">sha256 hashes</h2>\n<h3 id=\"originalarchives\">Original archives</h3>\n<ul>\n<li><code>7c19a67d728bc700d18d2ed389a80de495681b7097222d9b8f1d696f0986f9a2</code> odd.tar.xz.gpg</li>\n<li><code>78b89b2c4b129400150c7b60a426ff469aaea31da1588d2abc4180feaa9c41d3</code> swift.tar.xz.gpg</li>\n<li><code>c28d5c10ec78bc66d3868e4862c7f801ffd561e2116b529e0782bf78f3ef3255</code> windows.tar.xz.gpg</li>\n</ul>\n<h3 id=\"decryptedarchives\">Decrypted archives</h3>\n<ul>\n<li><code>85e03866ae7eaaedd9462054b62a10f2180983bdfd086b29631173ae4422f524</code> odd.tar.xz</li>\n<li><code>df468f01e65f3f1bc18f844d7f7bac8f8eec3664a131e2fb67ae3a55f8523004</code> swift.tar.xz</li>\n<li><code>5bb9ddfbcefb75d017a9e745b83729390617b16f4079356579ef00e5e6b5fbd0</code> windows.tar.xz</li>\n</ul>'),
	(32,'x0rz','ssh-honeypot','https://raw.githubusercontent.com/x0rz/ssh-honeypot/master/README.md','2018-11-07 12:30:32','# SSH Honeypot\n\nThis program listens for incoming ssh connections and logs the ip\naddress, username, and password used. This was written to gather\nrudimentary intelligence on brute force attacks.\n\n## Quick start\n- ensure libssh is installed (apt install libssh-dev)\n- edit src/config.h\n- ssh-keygen -t rsa (save to non-default location!)\n- make\n- bin/ssh-honeypot -r ssh-honeypot.rsa\n\n','<h1 id=\"sshhoneypot\">SSH Honeypot</h1>\n<p>This program listens for incoming ssh connections and logs the ip\naddress, username, and password used. This was written to gather\nrudimentary intelligence on brute force attacks.</p>\n<h2 id=\"quickstart\">Quick start</h2>\n<ul>\n<li>ensure libssh is installed (apt install libssh-dev)</li>\n<li>edit src/config.h</li>\n<li>ssh-keygen -t rsa (save to non-default location!)</li>\n<li>make</li>\n<li>bin/ssh-honeypot -r ssh-honeypot.rsa</li>\n</ul>'),
	(33,'x0rz','tweetentropy','https://raw.githubusercontent.com/x0rz/tweetentropy/master/README.md','2018-11-07 12:30:32','# Twitter Entropy Collector\n\nTwitter is a great noise source: Russian bots, Trump rants, human interactions, malware traffic and so on. (Almost) random and unpredictable content.\nThis tool provides an extra entropy source (to be used on Linux) from the [Twitter random sample feed](https://developer.twitter.com/en/docs/tweets/sample-realtime/overview/GET_statuse_sample).\n\n![Twitter noise](https://i.imgur.com/vLdn9Az.jpg)\n\n*Twitter noise visualization*\n\n### Installation\n\nFirst, update your API keys in the *secrets.py* file. To get API keys go to https://apps.twitter.com/\n\nThe script should work fine using Python2 or Python3.\n\nYou will need the following python packages installed: tweepy & hexdump.\n\n```sh\npip install -r requirements.txt\n```\n\n\n### Usage\n\n```\n# ./tweetentro.py\n```\n\n### Caveats\n\n⚠️ **Do not use this for sensitive cryptographic operations!**\nWe can safely assume there will be repeating occurrences in the data (trending hashtags, links, ...), it isn\'t true random. Entropy is around 6.5 bits per byte. \nOnly use this as an extra source of entropy if you wish.\n\nLicense\n----\nGNU GPLv3\n\nIf this tool has been useful for you, feel free to thank me by buying me a coffee\n\n[![Coffee](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://buymeacoff.ee/x0rz)\n','<h1 id=\"twitterentropycollector\">Twitter Entropy Collector</h1>\n<p>Twitter is a great noise source: Russian bots, Trump rants, human interactions, malware traffic and so on. (Almost) random and unpredictable content.\nThis tool provides an extra entropy source (to be used on Linux) from the <a href=\"https://developer.twitter.com/en/docs/tweets/sample-realtime/overview/GET_statuse_sample\">Twitter random sample feed</a>.</p>\n<p><img src=\"https://i.imgur.com/vLdn9Az.jpg\" alt=\"Twitter noise\" /></p>\n<p><em>Twitter noise visualization</em></p>\n<h3 id=\"installation\">Installation</h3>\n<p>First, update your API keys in the <em>secrets.py</em> file. To get API keys go to https://apps.twitter.com/</p>\n<p>The script should work fine using Python2 or Python3.</p>\n<p>You will need the following python packages installed: tweepy &amp; hexdump.</p>\n<pre><code class=\"sh language-sh\">pip install -r requirements.txt\n</code></pre>\n<h3 id=\"usage\">Usage</h3>\n<pre><code># ./tweetentro.py\n</code></pre>\n<h3 id=\"caveats\">Caveats</h3>\n<p>⚠️ <strong>Do not use this for sensitive cryptographic operations!</strong>\nWe can safely assume there will be repeating occurrences in the data (trending hashtags, links,&nbsp;…), it isn\'t true random. Entropy is around 6.5 bits per byte. \nOnly use this as an extra source of entropy if you wish.</p>\n<h2 id=\"license\">License</h2>\n<p>GNU GPLv3</p>\n<p>If this tool has been useful for you, feel free to thank me by buying me a coffee</p>\n<p><a href=\"https://buymeacoff.ee/x0rz\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Coffee\" /></a></p>'),
	(34,'QuadPiece','Black-Crunchyroll','https://raw.githubusercontent.com/QuadPiece/Black-Crunchyroll/master/README.md','2018-11-07 12:30:32','Black Crunchyroll\n=================\n\nUse this with Stylish (Or any other CSS capable add-on)\n\nCurrently not finished:\n* Some divs here and there\n* Forums\n* Manga section\n\n### How to add styles to Stylish (Firefox)\n\n* Click your Stylish icon\n* Write new style -> Blank style...\n\n### Adding the actual style\n\n* Write whatever you wish in the name field.\n* Paste the content of the CSS file in the large textbox.\n* Click on **Save** and check out you new Crunchyroll!','<h1 id=\"blackcrunchyroll\">Black Crunchyroll</h1>\n<p>Use this with Stylish (Or any other CSS capable add-on)</p>\n<p>Currently not finished:</p>\n<ul>\n<li>Some divs here and there</li>\n<li>Forums</li>\n<li>Manga section</li>\n</ul>\n<h3 id=\"howtoaddstylestostylishfirefox\">How to add styles to Stylish (Firefox)</h3>\n<ul>\n<li>Click your Stylish icon</li>\n<li>Write new style -&gt; Blank style…</li>\n</ul>\n<h3 id=\"addingtheactualstyle\">Adding the actual style</h3>\n<ul>\n<li>Write whatever you wish in the name field.</li>\n<li>Paste the content of the CSS file in the large textbox.</li>\n<li>Click on <strong>Save</strong> and check out you new Crunchyroll!</li>\n</ul>'),
	(35,'QuadPiece','club-quad','https://raw.githubusercontent.com/QuadPiece/club-quad/master/README.md','2018-11-07 12:30:32','# club-quad\n\nclub-quad is a continuation of the club-Swizards rutorrent theme. Swizards was hacked and shut down, after which the original repository ([Swizards/club-Swizards](https://github.com/Swizards/club-Swizards)) seems to have been deleted. I decided to orphan the theme and fix some things.\n\n## Install\n\nNavigate to your plugins/themes directory, this is  `plugins/theme/themes` inside rutorrent\'s web root. \n\n(eg. if you cloned rutorrent into `/var/www`, then you\'re probably looking for `/var/www/rutorrent/plugins/theme/themes`)\n\nNext, simply clone the club-quad theme into your themes folder and change the owner so it belongs to your web server\n```\ngit clone https://github.com/QuadPiece/club-quad.git club-quad\nchown -R www-data: club-quad\n```\n\n## Update\n\n`cd` into your themes directory again and run a `git pull`\n\n![Sample screenshot](images/Screenshot.png)\n\n','<h1 id=\"clubquad\">club-quad</h1>\n<p>club-quad is a continuation of the club-Swizards rutorrent theme. Swizards was hacked and shut down, after which the original repository (<a href=\"https://github.com/Swizards/club-Swizards\">Swizards/club-Swizards</a>) seems to have been deleted. I decided to orphan the theme and fix some things.</p>\n<h2 id=\"install\">Install</h2>\n<p>Navigate to your plugins/themes directory, this is  <code>plugins/theme/themes</code> inside rutorrent\'s web root. </p>\n<p>(eg. if you cloned rutorrent into <code>/var/www</code>, then you\'re probably looking for <code>/var/www/rutorrent/plugins/theme/themes</code>)</p>\n<p>Next, simply clone the club-quad theme into your themes folder and change the owner so it belongs to your web server</p>\n<pre><code>git clone https://github.com/QuadPiece/club-quad.git club-quad\nchown -R www-data: club-quad\n</code></pre>\n<h2 id=\"update\">Update</h2>\n<p><code>cd</code> into your themes directory again and run a <code>git pull</code></p>\n<p><img src=\"images/Screenshot.png\" alt=\"Sample screenshot\" /></p>'),
	(36,'QuadPiece','converter-thing','https://raw.githubusercontent.com/QuadPiece/converter-thing/master/README.md','2018-11-07 12:30:32','# some-file-converter-script-thing\r\n\r\n**This is not a serious piece of code and I mostly uploaded it here just to share/archive it. If you wish to improve it. Please make a fork instead of sending pull requests, I\'m too god damn lazy to maintain this thing**\r\n\r\nDoes exactly what it sounds like.  \r\nIt transforms ~~everything~~ FLACs and M4As that are not MP3 into V0 MP3s using magic (AKA ffmpeg)  \r\nAlso copies mp3s to the new folder or something\r\n\r\nThis was made because my phone is shit at handling anything that\'s not MP3. (fkn lumia phones)\r\n\r\nIt kinda works. i luv u ffmpeg, u mah bae\r\n\r\n## Requirements\r\n\r\n* ffmpeg\r\n* lol dats it\r\n\r\n## Usage\r\n\r\n* Keep all the files you want to convert in a \"Music\" folder\r\n* Do the `./convert.sh` thing\r\n* Look in the brand new \"output\" folder\r\n* ???\r\n* PROFIT\r\n','<h1 id=\"somefileconverterscriptthing\">some-file-converter-script-thing</h1>\n<p><strong>This is not a serious piece of code and I mostly uploaded it here just to share/archive it. If you wish to improve it. Please make a fork instead of sending pull requests, I\'m too god damn lazy to maintain this thing</strong></p>\n<p>Does exactly what it sounds like.<br />\nIt transforms ~~everything~~ FLACs and M4As that are not MP3 into V0 MP3s using magic (AKA ffmpeg)<br />\nAlso copies mp3s to the new folder or something</p>\n<p>This was made because my phone is shit at handling anything that\'s not MP3. (fkn lumia phones)</p>\n<p>It kinda works. i luv u ffmpeg, u mah bae</p>\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>ffmpeg</li>\n<li>lol dats it</li>\n</ul>\n<h2 id=\"usage\">Usage</h2>\n<ul>\n<li>Keep all the files you want to convert in a \"Music\" folder</li>\n<li>Do the <code>./convert.sh</code> thing</li>\n<li>Look in the brand new \"output\" folder</li>\n<li>???</li>\n<li>PROFIT</li>\n</ul>'),
	(37,'QuadPiece','flask-blog','https://raw.githubusercontent.com/QuadPiece/flask-blog/master/README.md','2018-11-07 12:30:32','Flask blog\n==========\n\nPersonal blog written using the Flask microframework.\n\n**This is a personal project and I will probably not be actively maintaining it.**\n\nWith that being said. This software is pretty much [WTFPL](https://en.wikipedia.org/wiki/WTFPL) licenced if anything\n\nIf you do something with this code, mention me on [Twitter](http://twitter.com/QuadPiece), I\'d love to see :3\n\nRequirements\n============\n\nPython 2.7+, because that\'s just what Flask recommends.  \n`tmux` to keep the blog running.\n\nEverything else is listed in the `requirements.txt` file.  \nYou might also want to make sure that you have `sqlite3` installed on your system so that you can generate the database.\n\nI will not be providing any support for Windows users.\n\nGetting started\n===============\n\nIf you don\'t care about recent features and just want a stable working release. Check the tags. Every version of the code that I\'ve been using in production without problems for longer periods of time will be listed there.  \nNote that no real tests have been run. I just know that they\'ve been functional for multiple days without major issues.\n\nSetup is fairly easy for this application due to the nature of how it\'s built. However, I will inform you ahead of time that this is not designed for high-traffic load. Due to things like SQLite usage.\n\n1. Clone the repository into a folder anywhere you wish\n2. (Optional) Create a virtual environment for the project\n3. Install everything listed in requirements.txt using `pip install -r requirements.txt` or do it manually\n4. Proceed with the relevant procedure fitting your use case below\n\nDevelopment\n-----------\n\n1. Generate the sqlite database by running `sqlite3 blog.db < schema.sql` in the directory where you cloned the repo\n2. Do `python exec.py`\n3. Start working\n\nBy default, the application will listen on all IPs/Domains and run on port 5800.\n\nProduction\n----------\n\n1. Edit the variables in `exec.py` to fit your needs, **Make sure you remove `debug=True` from `app.run()` for security reasons, you should also make sure that `host=\"<something>\"` is set to `127.0.0.1` for step 3**\n2. Generate the sqlite database by running `sqlite3 blog.db < schema.sql` in the directory where you cloned the repo\n3. Set up a proper webserver to handle your requests. I recommend nginx. Configure it as a reverse proxy for your desired subdomain or url, pointing to `127.0.0.1` and whatever port you defined in `exec.py`\n4. Do `python exec.py`\n5. (Optional) It\'s recommended that you configure your webserver to handle static files for you. This can greatly improve performance and in some cases, security. If you don\'t know how to do it, the application will server static files for you worst-case.\n\nMigration\n---------\n\nNow this is the best part\n\n1. Do exactly the same as above, but instead of creating the database with the `schema.sql` file, just bring along your own `blog.db` file\n\nBackup\n------\n\n1. Copy the `blog.db` somewhere\n\nwhy can\'t everything be this easy\n\nUpdating\n--------\n\n1. Backup your `blog.db` file.\n2. Do a `git pull` to get the most recent code\n3. Edit any configs in the file so that it works with your existing setup\n4. Sometimes, changes are made to the database structure. To update your database, use the provided sql files. eg. to update from v1.2 to v1.3, which added support for timestamps on posts, run `sqlite3 blog.db < upgrade-v12-v13.sql`\n4. Start the application normally using `python exec.py`, preferrably in a tmux session\n\nUsage\n=====\n\nThis is really simple at the moment.\n\nPosts are written using Markdown. I recommend taking a little time to [learn it](https://daringfireball.net/projects/markdown/syntax). It\'s pretty simple and you\'ll get the basics in a minute or two\n\n* You can log in using `example.com/login`, you must do this before anything else on this list will work\n* A logout link and a link to the post editor will appear at the bottom\n* To edit a post, use the link added to the post page. Alternatively, add `/edit` to the post url. To edit `example.com/post/2`, you\'d visit `example.com/post/2/edit`\n* To delete a post, replace `post` in the URL with `del`. To delete `example.com/post/3`, you\'d just visit `exaple.com/del/3` **WARNING: No confimation, your post will be deleted the instant the server recieves the GET request from your browser**\n\nAt the moment, that\'s it.\n\nFor images, upload them somewhere else and add them using regular markdown\n\nGoals\n=====\n\nThis project was started to learn some basic Flask and Python features that could come in handy later. Mainly, these features are:\n\n* Using markdown\n* Handling files\n* Templating\n* Some lazy single-user login just to test the session feature\n* ~~Not sure if DB (prolly just SQLite) or static files~~ SQLite apparently\n* Getting used to route-based web development\n\n**Warning, most of the Python code will probably end up being written in a single, messy file. Call me old school or stupid, but \"ctrl+f\"-ing for the route I want to work on is just how I tend to go about these things**\n','<h1 id=\"flaskblog\">Flask blog</h1>\n<p>Personal blog written using the Flask microframework.</p>\n<p><strong>This is a personal project and I will probably not be actively maintaining it.</strong></p>\n<p>With that being said. This software is pretty much <a href=\"https://en.wikipedia.org/wiki/WTFPL\">WTFPL</a> licenced if anything</p>\n<p>If you do something with this code, mention me on <a href=\"http://twitter.com/QuadPiece\">Twitter</a>, I\'d love to see :3</p>\n<h1 id=\"requirements\">Requirements</h1>\n<p>Python 2.7+, because that\'s just what Flask recommends.<br />\n<code>tmux</code> to keep the blog running.</p>\n<p>Everything else is listed in the <code>requirements.txt</code> file.<br />\nYou might also want to make sure that you have <code>sqlite3</code> installed on your system so that you can generate the database.</p>\n<p>I will not be providing any support for Windows users.</p>\n<h1 id=\"gettingstarted\">Getting started</h1>\n<p>If you don\'t care about recent features and just want a stable working release. Check the tags. Every version of the code that I\'ve been using in production without problems for longer periods of time will be listed there.<br />\nNote that no real tests have been run. I just know that they\'ve been functional for multiple days without major issues.</p>\n<p>Setup is fairly easy for this application due to the nature of how it\'s built. However, I will inform you ahead of time that this is not designed for high-traffic load. Due to things like SQLite usage.</p>\n<ol>\n<li>Clone the repository into a folder anywhere you wish</li>\n<li>(Optional) Create a virtual environment for the project</li>\n<li>Install everything listed in requirements.txt using <code>pip install -r requirements.txt</code> or do it manually</li>\n<li>Proceed with the relevant procedure fitting your use case below</li>\n</ol>\n<h2 id=\"development\">Development</h2>\n<ol>\n<li>Generate the sqlite database by running <code>sqlite3 blog.db &lt; schema.sql</code> in the directory where you cloned the repo</li>\n<li>Do <code>python exec.py</code></li>\n<li>Start working</li>\n</ol>\n<p>By default, the application will listen on all IPs/Domains and run on port 5800.</p>\n<h2 id=\"production\">Production</h2>\n<ol>\n<li>Edit the variables in <code>exec.py</code> to fit your needs, <strong>Make sure you remove <code>debug=True</code> from <code>app.run()</code> for security reasons, you should also make sure that <code>host=\"&lt;something&gt;\"</code> is set to <code>127.0.0.1</code> for step 3</strong></li>\n<li>Generate the sqlite database by running <code>sqlite3 blog.db &lt; schema.sql</code> in the directory where you cloned the repo</li>\n<li>Set up a proper webserver to handle your requests. I recommend nginx. Configure it as a reverse proxy for your desired subdomain or url, pointing to <code>127.0.0.1</code> and whatever port you defined in <code>exec.py</code></li>\n<li>Do <code>python exec.py</code></li>\n<li>(Optional) It\'s recommended that you configure your webserver to handle static files for you. This can greatly improve performance and in some cases, security. If you don\'t know how to do it, the application will server static files for you worst-case.</li>\n</ol>\n<h2 id=\"migration\">Migration</h2>\n<p>Now this is the best part</p>\n<ol>\n<li>Do exactly the same as above, but instead of creating the database with the <code>schema.sql</code> file, just bring along your own <code>blog.db</code> file</li>\n</ol>\n<h2 id=\"backup\">Backup</h2>\n<ol>\n<li>Copy the <code>blog.db</code> somewhere</li>\n</ol>\n<p>why can\'t everything be this easy</p>\n<h2 id=\"updating\">Updating</h2>\n<ol>\n<li>Backup your <code>blog.db</code> file.</li>\n<li>Do a <code>git pull</code> to get the most recent code</li>\n<li>Edit any configs in the file so that it works with your existing setup</li>\n<li>Sometimes, changes are made to the database structure. To update your database, use the provided sql files. eg. to update from v1.2 to v1.3, which added support for timestamps on posts, run <code>sqlite3 blog.db &lt; upgrade-v12-v13.sql</code></li>\n<li>Start the application normally using <code>python exec.py</code>, preferrably in a tmux session</li>\n</ol>\n<h1 id=\"usage\">Usage</h1>\n<p>This is really simple at the moment.</p>\n<p>Posts are written using Markdown. I recommend taking a little time to <a href=\"https://daringfireball.net/projects/markdown/syntax\">learn it</a>. It\'s pretty simple and you\'ll get the basics in a minute or two</p>\n<ul>\n<li>You can log in using <code>example.com/login</code>, you must do this before anything else on this list will work</li>\n<li>A logout link and a link to the post editor will appear at the bottom</li>\n<li>To edit a post, use the link added to the post page. Alternatively, add <code>/edit</code> to the post url. To edit <code>example.com/post/2</code>, you\'d visit <code>example.com/post/2/edit</code></li>\n<li>To delete a post, replace <code>post</code> in the URL with <code>del</code>. To delete <code>example.com/post/3</code>, you\'d just visit <code>exaple.com/del/3</code> <strong>WARNING: No confimation, your post will be deleted the instant the server recieves the GET request from your browser</strong></li>\n</ul>\n<p>At the moment, that\'s it.</p>\n<p>For images, upload them somewhere else and add them using regular markdown</p>\n<h1 id=\"goals\">Goals</h1>\n<p>This project was started to learn some basic Flask and Python features that could come in handy later. Mainly, these features are:</p>\n<ul>\n<li>Using markdown</li>\n<li>Handling files</li>\n<li>Templating</li>\n<li>Some lazy single-user login just to test the session feature</li>\n<li>~~Not sure if DB (prolly just SQLite) or static files~~ SQLite apparently</li>\n<li>Getting used to route-based web development</li>\n</ul>\n<p><strong>Warning, most of the Python code will probably end up being written in a single, messy file. Call me old school or stupid, but \"ctrl+f\"-ing for the route I want to work on is just how I tend to go about these things</strong></p>'),
	(38,'QuadPiece','hugo-casper-two','https://raw.githubusercontent.com/QuadPiece/hugo-casper-two/master/README.md','2018-11-07 12:30:32','# Casper Two\n\n[Casper Two](https://github.com/eueung/hugo-casper-two) is a port of the [Casper](https://github.com/TryGhost/Casper), the default personal blogging theme for Ghost. While a legacy version (v1.x) has [already been ported](https://github.com/vjeantet/hugo-theme-casper) to Hugo years ago, it is incompatible with the recent 2.x version. So I ended up porting this new Casper version. \n\n![Screenshot](https://raw.githubusercontent.com/eueung/hugo-casper-two/master/images/screenshot.png)\n\n## Theme Demo\n\n- [telematika.org](https://telematika.org/)\n- sample site - [github pages](https://eueung.github.io/hugo-casper-two/)\n\n## Installation\n\nInside the folder of your Hugo site run:\n\n    $ cd themes\n    $ git clone https://github.com/eueung/hugo-casper-two.git casper-two\n\nFor more information read the official [setup guide](//gohugo.io/overview/installing/) of Hugo.\n\n## Sample Configuration\n\nThe following `config.toml` is used for the demo site. \n\n```toml\nbaseurl         = \"/\"\ntheme           = \"casper-two\"\nlanguageCode    = \"en-US\"\ndisqusShortname = \"\"\npaginate        = 6\n#SectionPagesMenu = \"main\"\n\n[params]\n  title       = \"Hugo Casper Two\"\n  subtitle    = \"Port of Casper 2.x for Hugo\"\n\n  cover       = \"img/blog-cover.jpg\"\n  description = \"Here is a description of your site.\"\n  metaDescription = \"\"\n  googleAnalytics = \"\"\n  customCSS = []\n  RSSLink = \"\"\n\n  twitterName = \"faketryghost\"\n  fbName = \"fakeghost\"\n  githubName = \"eueung\"\n\n  logo = \"hugo-logo.png\"\n  orgName = \"EM\"\n  orgWebsite = \"https://www.telematika.org\"\n  orgDescription = \"Here is a description placeholder for your org\"\n\n  author = \"EM\"\n  authorAvatar = \"img/ghost-icon.png\"\n  authorLocation = \"Bandung, ID\"\n  authorWebsite = \"https://eueung.github.io\"\n  authorDescription = \"Describe yourself..\"\n\n  pageNotFoundTitle = \"404 - Page not found\"\n\n  #casper or caspertwo\n  singleViewStyle = \"casper\"\n\n[permalinks]\n  post = \"/:slug/\"\n\n[[menu.main]]\n  name = \"Home\"\n  url = \"/\"\n  weight = 200\n\n[[menu.main]]\n  name = \"Go\"\n  url = \"/tags/golang/\"\n  weight = 100\n\n[[menu.main]]\n  name = \"Food\"\n  url = \"/categories/food/\"\n  weight = 99\n\n[[menu.main]]\n  name = \"External\"\n  url = \"https://google.com/\"\n  weight = 95\n```\n\nSample content structure is given in the `exampleSite` folder. Have fun!\n\n![Screenshot](https://raw.githubusercontent.com/eueung/hugo-casper-two/master/images/telematika1.jpg)\n![Screenshot](https://raw.githubusercontent.com/eueung/hugo-casper-two/master/images/telematika2.jpg)\n\n## License\n\nThis theme is released under the MIT license. For more information read the [License](//github.com/eueung/hugo-casper-two/blob/master/LICENSE.md).\n\n\n','<h1 id=\"caspertwo\">Casper Two</h1>\n<p><a href=\"https://github.com/eueung/hugo-casper-two\">Casper Two</a> is a port of the <a href=\"https://github.com/TryGhost/Casper\">Casper</a>, the default personal blogging theme for Ghost. While a legacy version (v1.x) has <a href=\"https://github.com/vjeantet/hugo-theme-casper\">already been ported</a> to Hugo years ago, it is incompatible with the recent 2.x version. So I ended up porting this new Casper version. </p>\n<p><img src=\"https://raw.githubusercontent.com/eueung/hugo-casper-two/master/images/screenshot.png\" alt=\"Screenshot\" /></p>\n<h2 id=\"themedemo\">Theme Demo</h2>\n<ul>\n<li><a href=\"https://telematika.org/\">telematika.org</a></li>\n<li>sample site - <a href=\"https://eueung.github.io/hugo-casper-two/\">github pages</a></li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<p>Inside the folder of your Hugo site run:</p>\n<pre><code>$ cd themes\n$ git clone https://github.com/eueung/hugo-casper-two.git casper-two\n</code></pre>\n<p>For more information read the official <a href=\"//gohugo.io/overview/installing/\">setup guide</a> of Hugo.</p>\n<h2 id=\"sampleconfiguration\">Sample Configuration</h2>\n<p>The following <code>config.toml</code> is used for the demo site. </p>\n<pre><code class=\"toml language-toml\">baseurl         = \"/\"\ntheme           = \"casper-two\"\nlanguageCode    = \"en-US\"\ndisqusShortname = \"\"\npaginate        = 6\n#SectionPagesMenu = \"main\"\n\n[params]\n  title       = \"Hugo Casper Two\"\n  subtitle    = \"Port of Casper 2.x for Hugo\"\n\n  cover       = \"img/blog-cover.jpg\"\n  description = \"Here is a description of your site.\"\n  metaDescription = \"\"\n  googleAnalytics = \"\"\n  customCSS = []\n  RSSLink = \"\"\n\n  twitterName = \"faketryghost\"\n  fbName = \"fakeghost\"\n  githubName = \"eueung\"\n\n  logo = \"hugo-logo.png\"\n  orgName = \"EM\"\n  orgWebsite = \"https://www.telematika.org\"\n  orgDescription = \"Here is a description placeholder for your org\"\n\n  author = \"EM\"\n  authorAvatar = \"img/ghost-icon.png\"\n  authorLocation = \"Bandung, ID\"\n  authorWebsite = \"https://eueung.github.io\"\n  authorDescription = \"Describe yourself..\"\n\n  pageNotFoundTitle = \"404 - Page not found\"\n\n  #casper or caspertwo\n  singleViewStyle = \"casper\"\n\n[permalinks]\n  post = \"/:slug/\"\n\n[[menu.main]]\n  name = \"Home\"\n  url = \"/\"\n  weight = 200\n\n[[menu.main]]\n  name = \"Go\"\n  url = \"/tags/golang/\"\n  weight = 100\n\n[[menu.main]]\n  name = \"Food\"\n  url = \"/categories/food/\"\n  weight = 99\n\n[[menu.main]]\n  name = \"External\"\n  url = \"https://google.com/\"\n  weight = 95\n</code></pre>\n<p>Sample content structure is given in the <code>exampleSite</code> folder. Have fun!</p>\n<p><img src=\"https://raw.githubusercontent.com/eueung/hugo-casper-two/master/images/telematika1.jpg\" alt=\"Screenshot\" />\n<img src=\"https://raw.githubusercontent.com/eueung/hugo-casper-two/master/images/telematika2.jpg\" alt=\"Screenshot\" /></p>\n<h2 id=\"license\">License</h2>\n<p>This theme is released under the MIT license. For more information read the <a href=\"//github.com/eueung/hugo-casper-two/blob/master/LICENSE.md\">License</a>.</p>'),
	(39,'QuadPiece','LazyWebM','https://raw.githubusercontent.com/QuadPiece/LazyWebM/master/README.md','2018-11-07 12:30:32','Lazy WebM\n=====\n### The lazy way to convert video to WebM\n\nA simple batch script that runs through all files in a folder and converts them to WebM files using ffmpeg\n\n### How to use:\n\n* Run convert.bat once to create the folders\n* Put video files in the input folder\n* Run convert.bat\n* ???\n* PROFIT (Hopefully)\n\nYou can also edit the batch file to change some of the ffmpeg settings if you wish.  \nThe standard settings create decent 720p video files in most cases, it\'s overkill for 480p and a little low for 1080p.\n\n(Personally I\'d recommend changing \"-threads 1\" to a higher number if possible, such as 2 for a dual core or 4 if you have a quad-core processor, no matter what quality you wish for)\n','<h1 id=\"lazywebm\">Lazy WebM</h1>\n<h3 id=\"thelazywaytoconvertvideotowebm\">The lazy way to convert video to WebM</h3>\n<p>A simple batch script that runs through all files in a folder and converts them to WebM files using ffmpeg</p>\n<h3 id=\"howtouse\">How to use:</h3>\n<ul>\n<li>Run convert.bat once to create the folders</li>\n<li>Put video files in the input folder</li>\n<li>Run convert.bat</li>\n<li>???</li>\n<li>PROFIT (Hopefully)</li>\n</ul>\n<p>You can also edit the batch file to change some of the ffmpeg settings if you wish.<br />\nThe standard settings create decent 720p video files in most cases, it\'s overkill for 480p and a little low for 1080p.</p>\n<p>(Personally I\'d recommend changing \"-threads 1\" to a higher number if possible, such as 2 for a dual core or 4 if you have a quad-core processor, no matter what quality you wish for)</p>'),
	(40,'QuadPiece','list-fm','https://raw.githubusercontent.com/QuadPiece/list-fm/master/README.md','2018-11-07 12:30:32','list-fm\n=======\n\nlist.fm is a simple site to show your recent last.fm tracks that requires minimal setup\n\nYou can find a demo here: http://test.quad.moe/tracks/\n\nHow to set up\n=======\n\n* Place the files on a web server that supports PHP\n* Change the feed url in fetch.php to your own (Read below for details)\n* Change the username in index.php (To whatever, doesn\'t have to be your last.fm name)\n\nWhere do I find my feed URL?\n======\n\nThe feed URL is always:\n\n```\nhttp://ws.audioscrobbler.com/2.0/user/**yourusername**/recenttracks\n```\n\nSo for the user \'quadpiece\' the URL would be:\n\n```\nhttp://ws.audioscrobbler.com/2.0/user/quadpiece/recenttracks\n```\n','<h1 id=\"listfm\">list-fm</h1>\n<p>list.fm is a simple site to show your recent last.fm tracks that requires minimal setup</p>\n<p>You can find a demo here: http://test.quad.moe/tracks/</p>\n<h1 id=\"howtosetup\">How to set up</h1>\n<ul>\n<li>Place the files on a web server that supports PHP</li>\n<li>Change the feed url in fetch.php to your own (Read below for details)</li>\n<li>Change the username in index.php (To whatever, doesn\'t have to be your last.fm name)</li>\n</ul>\n<h1 id=\"wheredoifindmyfeedurl\">Where do I find my feed URL?</h1>\n<p>The feed URL is always:</p>\n<pre><code>http://ws.audioscrobbler.com/2.0/user/**yourusername**/recenttracks\n</code></pre>\n<p>So for the user \'quadpiece\' the URL would be:</p>\n<pre><code>http://ws.audioscrobbler.com/2.0/user/quadpiece/recenttracks\n</code></pre>'),
	(41,'QuadPiece','logic','https://raw.githubusercontent.com/QuadPiece/logic/master/README.md','2018-11-07 12:30:32','logic\n=====\n\npro logic for the geniuses who skip to the important parts\n','<h1 id=\"logic\">logic</h1>\n<p>pro logic for the geniuses who skip to the important parts</p>'),
	(42,'QuadPiece','metrodeck','https://raw.githubusercontent.com/QuadPiece/metrodeck/master/README.md','2018-11-07 12:30:32','MetroDeck\n================\n__MetroDeck is no longer under active development, see [this post](http://corbindavenport.com/?p=400) for more details.__\n\nMetroDeck is an extension for Google Chrome and Opera that alters the appearance of TweetDeck to match Microsoft\'s Metro UI (also known as Modern/Universal UI). It works with both TweetDeck\'s light and dark themes.\n\nI\'ve designed MetroDeck in a way that shouldn\'t break with future TweetDeck updates, but should that happen, simply disable the MetroDeck extension until a patch is released. MetroDeck is licensed under the GPL v3 license.\n\n[Follow the MetroDeck Twitter account for updates!](https://twitter.com/metrodeck)\n\n__TweetDeck is a trademark of Twitter, inc. MetroDeck is not affiliated with Twitter in any way. Due to a Chrome limitation, this does not work with the TweetDeck app for Chrome. Please use the web version (tweetdeck.twitter.com) instead.__\n\n---------------------------------------------------------\n__New in MetroDeck 1.6:__\n* Updated to support TweetDeck 3.9.1123-052575c\n\n__New in MetroDeck 1.5:__\n* Updated to support TweetDeck 3.9.963-582e0b8\n* Updated to support Twitter likes\n* Removed custom sprite sheets due to bugs\n* Minor bug fixes and UI tweaks\n\n__New in MetroDeck 1.4:__\n* Updated to support TweetDeck 3.9.837-8abeadb\n* Adjusted colors to better match Metro color scheme\n* Fixed problem where welcome screen wouldn\'t load\n\n__New in MetroDeck 1.3.1:__\n* Fixed bug where fonts would not load\n\n__New in MetroDeck 1.3:__\n* Updated to support TweetDeck 3.9.798-f9da451\n* Improved console messages\n* Overall improvements to codebase\n\n__New in MetroDeck 1.2:__\n* Scrollbars now follow Metro UI design\n* Fixed bug where TweetDeck\'s new \'New Tweets\' indicator was broken\n* Fixed bugs in dark mode\n* Other minor fixes\n\n__New in MetroDeck 1.1:__\n* Added Metro loading animations to loading timelines/posting tweets\n* Fixed bug where some text was invisible\n\n__New in MetroDeck 1.0:__\n* Initial release!\n\n---------------------------------------------------------\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n','<h1 id=\"metrodeck\">MetroDeck</h1>\n<p><strong>MetroDeck is no longer under active development, see <a href=\"http://corbindavenport.com/?p=400\">this post</a> for more details.</strong></p>\n<p>MetroDeck is an extension for Google Chrome and Opera that alters the appearance of TweetDeck to match Microsoft\'s Metro UI (also known as Modern/Universal UI). It works with both TweetDeck\'s light and dark themes.</p>\n<p>I\'ve designed MetroDeck in a way that shouldn\'t break with future TweetDeck updates, but should that happen, simply disable the MetroDeck extension until a patch is released. MetroDeck is licensed under the GPL v3 license.</p>\n<p><a href=\"https://twitter.com/metrodeck\">Follow the MetroDeck Twitter account for updates!</a></p>\n<p><strong>TweetDeck is a trademark of Twitter, inc. MetroDeck is not affiliated with Twitter in any way. Due to a Chrome limitation, this does not work with the TweetDeck app for Chrome. Please use the web version (tweetdeck.twitter.com) instead.</strong></p>\n<hr />\n<p><strong>New in MetroDeck 1.6:</strong></p>\n<ul>\n<li>Updated to support TweetDeck 3.9.1123-052575c</li>\n</ul>\n<p><strong>New in MetroDeck 1.5:</strong></p>\n<ul>\n<li>Updated to support TweetDeck 3.9.963-582e0b8</li>\n<li>Updated to support Twitter likes</li>\n<li>Removed custom sprite sheets due to bugs</li>\n<li>Minor bug fixes and UI tweaks</li>\n</ul>\n<p><strong>New in MetroDeck 1.4:</strong></p>\n<ul>\n<li>Updated to support TweetDeck 3.9.837-8abeadb</li>\n<li>Adjusted colors to better match Metro color scheme</li>\n<li>Fixed problem where welcome screen wouldn\'t load</li>\n</ul>\n<p><strong>New in MetroDeck 1.3.1:</strong></p>\n<ul>\n<li>Fixed bug where fonts would not load</li>\n</ul>\n<p><strong>New in MetroDeck 1.3:</strong></p>\n<ul>\n<li>Updated to support TweetDeck 3.9.798-f9da451</li>\n<li>Improved console messages</li>\n<li>Overall improvements to codebase</li>\n</ul>\n<p><strong>New in MetroDeck 1.2:</strong></p>\n<ul>\n<li>Scrollbars now follow Metro UI design</li>\n<li>Fixed bug where TweetDeck\'s new \'New Tweets\' indicator was broken</li>\n<li>Fixed bugs in dark mode</li>\n<li>Other minor fixes</li>\n</ul>\n<p><strong>New in MetroDeck 1.1:</strong></p>\n<ul>\n<li>Added Metro loading animations to loading timelines/posting tweets</li>\n<li>Fixed bug where some text was invisible</li>\n</ul>\n<p><strong>New in MetroDeck 1.0:</strong></p>\n<ul>\n<li>Initial release!</li>\n</ul>\n<hr />\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License\nalong with this program.  If not, see <a href=\"http://www.gnu.org/licenses/\">http://www.gnu.org/licenses/</a>.</p>'),
	(43,'QuadPiece','node-test','https://raw.githubusercontent.com/QuadPiece/node-test/master/README.md','2018-11-07 12:30:32','Wow. Node is somehow even worse than I expected it to be. Good job.  \nNote: Jade is okay at least. But node is more annoying than when I tried C++','<p>Wow. Node is somehow even worse than I expected it to be. Good job.<br />\nNote: Jade is okay at least. But node is more annoying than when I tried C++</p>'),
	(44,'QuadPiece','openings-helper','https://raw.githubusercontent.com/QuadPiece/openings-helper/master/README.md','2018-11-07 12:30:32','# openings-helper\nA simple command-line openings.moe batch downloader.\n\n## Requires\n* Python 2.7+ or 3+.\n\nCreated and tested with Python 2.7 and 3.\n\n## Features\n* Video search and listing.\n* (Batch) download.\n\n## Usage\n`python main.py` or `python3 main.py` depending on your Python version. Details will be displayed.\n','<h1 id=\"openingshelper\">openings-helper</h1>\n<p>A simple command-line openings.moe batch downloader.</p>\n<h2 id=\"requires\">Requires</h2>\n<ul>\n<li>Python 2.7+ or 3+.</li>\n</ul>\n<p>Created and tested with Python 2.7 and 3.</p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Video search and listing.</li>\n<li>(Batch) download.</li>\n</ul>\n<h2 id=\"usage\">Usage</h2>\n<p><code>python main.py</code> or <code>python3 main.py</code> depending on your Python version. Details will be displayed.</p>'),
	(45,'QuadPiece','pybench','https://raw.githubusercontent.com/QuadPiece/pybench/master/README.md','2018-11-07 12:30:33','# pybench\n\nQuick multiplication benchmark in Python\n\n## Notice\n\nThis is not an accurate benchmark. Don\'t use this to determine the processing power of a computer. It can\'t even use more than one CPU core.\n\nIt was just a little thing that was born out of boredom. Also the code is pretty messy, so good luck with that\n\n## Using it\n\n* Clone it\n* `python3 bench.py`\n* ???\n\nThere are no requirements to install. Well, other than a Python3 interpreter.\n\n# Scores\n\nScores are based on the time taken by each section. This is then averaged out,\nboosted and rounded to make the numbers look less intimidating.\nThe formula isn\'t hard at all:\n\n```\nscores = 2 / (100 * ((time_multiplication * time_squares) / 2))\n```\n\nThis number is then rounded off, and you get your score. The lower the score, the better.\n','<h1 id=\"pybench\">pybench</h1>\n<p>Quick multiplication benchmark in Python</p>\n<h2 id=\"notice\">Notice</h2>\n<p>This is not an accurate benchmark. Don\'t use this to determine the processing power of a computer. It can\'t even use more than one CPU core.</p>\n<p>It was just a little thing that was born out of boredom. Also the code is pretty messy, so good luck with that</p>\n<h2 id=\"usingit\">Using it</h2>\n<ul>\n<li>Clone it</li>\n<li><code>python3 bench.py</code></li>\n<li>???</li>\n</ul>\n<p>There are no requirements to install. Well, other than a Python3 interpreter.</p>\n<h1 id=\"scores\">Scores</h1>\n<p>Scores are based on the time taken by each section. This is then averaged out,\nboosted and rounded to make the numbers look less intimidating.\nThe formula isn\'t hard at all:</p>\n<pre><code>scores = 2 / (100 * ((time_multiplication * time_squares) / 2))\n</code></pre>\n<p>This number is then rounded off, and you get your score. The lower the score, the better.</p>'),
	(46,'QuadPiece','quad-devices','https://raw.githubusercontent.com/QuadPiece/quad-devices/master/README.md','2018-11-07 12:30:33','Echoes a bunch of HTML for your devices, use with caution, extrmeley ugly code.\n\n* Please don\'t expect it to work well\n* This was never designed to be touched again after the first version\n* pls dont h8 me ;-;\n','<p>Echoes a bunch of HTML for your devices, use with caution, extrmeley ugly code.</p>\n<ul>\n<li>Please don\'t expect it to work well</li>\n<li>This was never designed to be touched again after the first version</li>\n<li>pls dont h8 me ;-;</li>\n</ul>'),
	(47,'QuadPiece','Quad-Devices-Two','https://raw.githubusercontent.com/QuadPiece/Quad-Devices-Two/master/README.md','2018-11-07 12:30:33','I rewrote this is flask because i was bored\n\nFill in your device info, install flask, run with python, bam, magic','<p>I rewrote this is flask because i was bored</p>\n<p>Fill in your device info, install flask, run with python, bam, magic</p>'),
	(48,'QuadPiece','Quad-New-Tab','https://raw.githubusercontent.com/QuadPiece/Quad-New-Tab/master/README.md','2018-11-07 12:30:33','Custom New Tab Page\n===================\nSo one day I decided to make a new tab page to use in my Firefox browser.\n\nHere\'s the files because why not right?\n\n![Preview screenshot](http://file.quad.moe/file/10E4A5.png)\n\n# Features:\n* Kawaii anime grill image\n* (Kind of) Responsive design\n* Lots of stupidly labeled links\n* ~~Easy~~ Possible to edit with your own links\n* Now with far less spaghetti code! (Thanks Avail)\n* Googel search\n* Customizable two color (material inspired) design\n\n# Installation (in Firefox):\n* Write \'about:config\' in your adress bar to reach your advanced settings.\n* Find \'browser.newtab.url\'\n* Set the value to the local path of the index.html file\n* Open a new tab and be happy!\n![help screenshot](http://a.pomf.se/zgiakz.png)\n\n# Installation (in Chrome):\n* Install the [Replace New Tab Page](https://chrome.google.com/webstore/detail/replace-new-tab-page/cnkhddihkmmiiclaipbaaelfojkmlkja?utm_source=chrome-app-launcher-info-dialog) Chrome extension\n* Click the extension icon and then select \'Options\'\n* Set the value to the local path of the index.html file\n* Open a new tab and be happy!\n![help screenshot 2](http://i.imgur.com/xijRWf4.png)\n','<h1 id=\"customnewtabpage\">Custom New Tab Page</h1>\n<p>So one day I decided to make a new tab page to use in my Firefox browser.</p>\n<p>Here\'s the files because why not right?</p>\n<p><img src=\"http://file.quad.moe/file/10E4A5.png\" alt=\"Preview screenshot\" /></p>\n<h1 id=\"features\">Features:</h1>\n<ul>\n<li>Kawaii anime grill image</li>\n<li>(Kind of) Responsive design</li>\n<li>Lots of stupidly labeled links</li>\n<li>~~Easy~~ Possible to edit with your own links</li>\n<li>Now with far less spaghetti code! (Thanks Avail)</li>\n<li>Googel search</li>\n<li>Customizable two color (material inspired) design</li>\n</ul>\n<h1 id=\"installationinfirefox\">Installation (in Firefox):</h1>\n<ul>\n<li>Write \'about:config\' in your adress bar to reach your advanced settings.</li>\n<li>Find \'browser.newtab.url\'</li>\n<li>Set the value to the local path of the index.html file</li>\n<li>Open a new tab and be happy!\n<img src=\"http://a.pomf.se/zgiakz.png\" alt=\"help screenshot\" /></li>\n</ul>\n<h1 id=\"installationinchrome\">Installation (in Chrome):</h1>\n<ul>\n<li>Install the <a href=\"https://chrome.google.com/webstore/detail/replace-new-tab-page/cnkhddihkmmiiclaipbaaelfojkmlkja?utm_source=chrome-app-launcher-info-dialog\">Replace New Tab Page</a> Chrome extension</li>\n<li>Click the extension icon and then select \'Options\'</li>\n<li>Set the value to the local path of the index.html file</li>\n<li>Open a new tab and be happy!\n<img src=\"http://i.imgur.com/xijRWf4.png\" alt=\"help screenshot 2\" /></li>\n</ul>'),
	(49,'QuadPiece','quad.moe','https://raw.githubusercontent.com/QuadPiece/quad.moe/master/README.md','2018-11-07 12:30:33','# quad.moe\nnew website lol\n','<h1 id=\"quadmoe\">quad.moe</h1>\n<p>new website lol</p>'),
	(50,'QuadPiece','QuadFile','https://raw.githubusercontent.com/QuadPiece/QuadFile/master/README.md','2018-11-07 12:30:33','# QuadFile Version 2\n\nA temporary (or permanent, depending on configuration) file sharing service written in Flask.\n\n# Features\n\n* Automatically remove files that aren\'t accessed often enough\n* Supports all filetypes\n* Prevents duplicate filenames\n* Works on all platforms (as long as they can use basic JavaScript)\n* Both easy to set up and use\n* Threaded for effective use of resources (Unless you\'re not on SSD, in which case, enjoy your I/O clogs m8)\n* Color-coded and real-time console log\n* Easy to use with most applications, such as ShareX\n\n# Requirements\n\nNeeded: \n\n* Python 3 (Python 2 might work, dunno, i don\'t test that, don\'t care either)\n* sqlite3 package for your OS (To create the database)\n* Install flask, currently that should be the only requirement and hopefully forever (``pip install -r requirements.txt``)\n\nRecommended:\n\n* nginx, great for proxy_pass\n* gunicorn, allows you to use QuadFile with multiple workers\n\n# Using the thing\n\n## Test deployment\n\n* Clone the repo somewhere\n* ``pip install -r requirements.txt``\n* Do ``cp conf.py.sample conf.py``\n* Edit ``conf.py`` so that the information is correct\n* ``sqlite3 files.db < schema.sql``\n* ``chmod +x run.py`` and then ``./run.py``\n* ???\n* PROFIT (Hopefully)\n\n## Production deployment\n\n* Clone the repo somewhere\n* Set up a virtual environment for QuadFile\n* ``pip install -r requirements.txt``\n* Do ``cp conf.py.sample conf.py``\n* Edit ``conf.py`` so that the information is correct\n* ``sqlite3 files.db < schema.sql``\n* ``gunicorn wsgi:app -w 4 --bind 127.0.0.1:8282 --log-file $HOME/quadfile.log`` (Use supervisor to run it on boot if needed)\n* Configure nginx and proxy_pass it to gunicorn\n* ???\n* PROFIT (Hopefully)\n','<h1 id=\"quadfileversion2\">QuadFile Version 2</h1>\n<p>A temporary (or permanent, depending on configuration) file sharing service written in Flask.</p>\n<h1 id=\"features\">Features</h1>\n<ul>\n<li>Automatically remove files that aren\'t accessed often enough</li>\n<li>Supports all filetypes</li>\n<li>Prevents duplicate filenames</li>\n<li>Works on all platforms (as long as they can use basic JavaScript)</li>\n<li>Both easy to set up and use</li>\n<li>Threaded for effective use of resources (Unless you\'re not on SSD, in which case, enjoy your I/O clogs m8)</li>\n<li>Color-coded and real-time console log</li>\n<li>Easy to use with most applications, such as ShareX</li>\n</ul>\n<h1 id=\"requirements\">Requirements</h1>\n<p>Needed: </p>\n<ul>\n<li>Python 3 (Python 2 might work, dunno, i don\'t test that, don\'t care either)</li>\n<li>sqlite3 package for your OS (To create the database)</li>\n<li>Install flask, currently that should be the only requirement and hopefully forever (<code>pip install -r requirements.txt</code>)</li>\n</ul>\n<p>Recommended:</p>\n<ul>\n<li>nginx, great for proxy_pass</li>\n<li>gunicorn, allows you to use QuadFile with multiple workers</li>\n</ul>\n<h1 id=\"usingthething\">Using the thing</h1>\n<h2 id=\"testdeployment\">Test deployment</h2>\n<ul>\n<li>Clone the repo somewhere</li>\n<li><code>pip install -r requirements.txt</code></li>\n<li>Do <code>cp conf.py.sample conf.py</code></li>\n<li>Edit <code>conf.py</code> so that the information is correct</li>\n<li><code>sqlite3 files.db &lt; schema.sql</code></li>\n<li><code>chmod +x run.py</code> and then <code>./run.py</code></li>\n<li>???</li>\n<li>PROFIT (Hopefully)</li>\n</ul>\n<h2 id=\"productiondeployment\">Production deployment</h2>\n<ul>\n<li>Clone the repo somewhere</li>\n<li>Set up a virtual environment for QuadFile</li>\n<li><code>pip install -r requirements.txt</code></li>\n<li>Do <code>cp conf.py.sample conf.py</code></li>\n<li>Edit <code>conf.py</code> so that the information is correct</li>\n<li><code>sqlite3 files.db &lt; schema.sql</code></li>\n<li><code>gunicorn wsgi:app -w 4 --bind 127.0.0.1:8282 --log-file $HOME/quadfile.log</code> (Use supervisor to run it on boot if needed)</li>\n<li>Configure nginx and proxy_pass it to gunicorn</li>\n<li>???</li>\n<li>PROFIT (Hopefully)</li>\n</ul>'),
	(51,'QuadPiece','QuadFile-legacy','https://raw.githubusercontent.com/QuadPiece/QuadFile-legacy/master/README.md','2018-11-07 12:30:33','QuadFile\n========\n\n**This is the old QuadFile. The new one is written in python and can be found [here](https://github.com/QuadPiece/QuadFile)**\n\nFilesharing written in PHP, spaghetti edition\n(Meaning that you deserve a medal if you can decode this PHP code)\n\nHow to use\n========\n\n**Requirements**\n\n* A webserver capable of PHP\n* The abillity to use .htaccess files or do your own rewrites in nginx\n\n**How to set up**\n\nPretty simple actually:\n\n* Drag all the shit into a folder\n* Create an empty folder named \'file\' in the root folder\n* Make sure that your webserver\'s config allows .htaccess in the folders that contain one\n* Enable rewrites (Google it, not too hard) or deal with them yourself if you use nginx\n\n**Optinally, but heavily recommended**\n\nScan through the files to look for any base URLs that need to be changed.  \nThe site will work well without doing this. But things such as Twitter cards and opengraph will probably be broken.\n','<h1 id=\"quadfile\">QuadFile</h1>\n<p><strong>This is the old QuadFile. The new one is written in python and can be found <a href=\"https://github.com/QuadPiece/QuadFile\">here</a></strong></p>\n<p>Filesharing written in PHP, spaghetti edition\n(Meaning that you deserve a medal if you can decode this PHP code)</p>\n<h1 id=\"howtouse\">How to use</h1>\n<p><strong>Requirements</strong></p>\n<ul>\n<li>A webserver capable of PHP</li>\n<li>The abillity to use .htaccess files or do your own rewrites in nginx</li>\n</ul>\n<p><strong>How to set up</strong></p>\n<p>Pretty simple actually:</p>\n<ul>\n<li>Drag all the shit into a folder</li>\n<li>Create an empty folder named \'file\' in the root folder</li>\n<li>Make sure that your webserver\'s config allows .htaccess in the folders that contain one</li>\n<li>Enable rewrites (Google it, not too hard) or deal with them yourself if you use nginx</li>\n</ul>\n<p><strong>Optinally, but heavily recommended</strong></p>\n<p>Scan through the files to look for any base URLs that need to be changed.<br />\nThe site will work well without doing this. But things such as Twitter cards and opengraph will probably be broken.</p>'),
	(52,'QuadPiece','sickrage.github.io','https://raw.githubusercontent.com/QuadPiece/sickrage.github.io/master/README.md','2018-11-07 12:30:33','**BEFORE YOU OPEN AN ISSUE**\n===============\n\nFeature Requests are not allowed on the issue tracker. We now use [FeatHub](http://feathub.com/SickRage/SickRage) for feature requests: [![Feature Requests](https://cloud.githubusercontent.com/assets/390379/10127973/045b3a96-6560-11e5-9b20-31a2032956b2.png)](http://feathub.com/SickRage/SickRage)\n\nSearch for the error in the search box. Re-use the existing issue if it already exists, even if it is closed.\nIf you don\'t find it please follow the guidelines below, otherwise the issue will be closed.\n\n**Update problems? Try this first:**\n\nStop SickRage, SSH(Linux)/CMD(Windows) and enter SickRage folder\n```\ngit remote set-url origin https://github.com/SickRage/SickRage.git\ngit fetch origin\ngit checkout master\ngit branch -u origin/master\ngit reset --hard origin/master\ngit pull\n```\n\n## SickRage Bug/Issue Tracker\n===============\n\nThis repo is dedicated to tracking bugs and issue reports only.\n\n## SUBMITTING A BUG/ISSUE TICKET\n(DO NOT POST ANYTHING THAT CONTAINS YOUR LOGIN INFORMATION OR API KEY)<br />\nPlease include the following when opening a new ticket:\n - Branch\n - Commit hash\n - Your operating system and python version\n - What you did\n - What happened\n - What you expected\n - Link to a copy/paste of your logfile with clear debug info of the error on [GIST](http://gist.github.com)\n\n## ENABLING DETAILED DEBUGGING FOR LOGS\n1. Open SR interface\n2. Menu General Settings > Advanced Settings\n3. Enable \'Enable debug\'\n\nNote: Synology users can use WinSCP to gain access/browse to the root where the Sickrage log is located. /volume1/@appstore/sickbeard-custom/var/Logs/sickrage.log\n\n## FAQ\n\nhttps://github.com/SickRage/SickRage/wiki/Frequently-Asked-Questions\n\n## Wiki\n\nhttps://github.com/SickRage/SickRage/wiki\n','<h1 id=\"beforeyouopenanissue\"><strong>BEFORE YOU OPEN AN ISSUE</strong></h1>\n<p>Feature Requests are not allowed on the issue tracker. We now use <a href=\"http://feathub.com/SickRage/SickRage\">FeatHub</a> for feature requests: <a href=\"http://feathub.com/SickRage/SickRage\"><img src=\"https://cloud.githubusercontent.com/assets/390379/10127973/045b3a96-6560-11e5-9b20-31a2032956b2.png\" alt=\"Feature Requests\" /></a></p>\n<p>Search for the error in the search box. Re-use the existing issue if it already exists, even if it is closed.\nIf you don\'t find it please follow the guidelines below, otherwise the issue will be closed.</p>\n<p><strong>Update problems? Try this first:</strong></p>\n<p>Stop SickRage, SSH(Linux)/CMD(Windows) and enter SickRage folder</p>\n<pre><code>git remote set-url origin https://github.com/SickRage/SickRage.git\ngit fetch origin\ngit checkout master\ngit branch -u origin/master\ngit reset --hard origin/master\ngit pull\n</code></pre>\n<h1 id=\"sickragebugissuetracker\">## SickRage Bug/Issue Tracker</h1>\n<p>This repo is dedicated to tracking bugs and issue reports only.</p>\n<h2 id=\"submittingabugissueticket\">SUBMITTING A BUG/ISSUE TICKET</h2>\n<p>(DO NOT POST ANYTHING THAT CONTAINS YOUR LOGIN INFORMATION OR API KEY)<br />\nPlease include the following when opening a new ticket:</p>\n<ul>\n<li>Branch</li>\n<li>Commit hash</li>\n<li>Your operating system and python version</li>\n<li>What you did</li>\n<li>What happened</li>\n<li>What you expected</li>\n<li>Link to a copy/paste of your logfile with clear debug info of the error on <a href=\"http://gist.github.com\">GIST</a></li>\n</ul>\n<h2 id=\"enablingdetaileddebuggingforlogs\">ENABLING DETAILED DEBUGGING FOR LOGS</h2>\n<ol>\n<li>Open SR interface</li>\n<li>Menu General Settings &gt; Advanced Settings</li>\n<li>Enable \'Enable debug\'</li>\n</ol>\n<p>Note: Synology users can use WinSCP to gain access/browse to the root where the Sickrage log is located. /volume1/@appstore/sickbeard-custom/var/Logs/sickrage.log</p>\n<h2 id=\"faq\">FAQ</h2>\n<p>https://github.com/SickRage/SickRage/wiki/Frequently-Asked-Questions</p>\n<h2 id=\"wiki\">Wiki</h2>\n<p>https://github.com/SickRage/SickRage/wiki</p>'),
	(53,'QuadPiece','TweetDeck-Stealth','https://raw.githubusercontent.com/QuadPiece/TweetDeck-Stealth/master/README.md','2018-11-07 12:30:33','Tweetdeck Stealth\n=================\n\nUse this with Stylish (Or any other CSS capable add-on)\n\nThis CSS is for hipsters, you have been warned.\n\n[Preview Screenhot](http://a.pomf.se/zrenoq.png)\n\n### How to add styles to Stylish (Firefox)\n\n* Click your Stylish icon\n* Write new style -> Blank style...\n\n### Adding the actual style\n\n* Write whatever you wish in the name field.\n* Paste the content of the CSS file in the large textbox.\n* Click on **Save** and check out yo new look bro!\n','<h1 id=\"tweetdeckstealth\">Tweetdeck Stealth</h1>\n<p>Use this with Stylish (Or any other CSS capable add-on)</p>\n<p>This CSS is for hipsters, you have been warned.</p>\n<p><a href=\"http://a.pomf.se/zrenoq.png\">Preview Screenhot</a></p>\n<h3 id=\"howtoaddstylestostylishfirefox\">How to add styles to Stylish (Firefox)</h3>\n<ul>\n<li>Click your Stylish icon</li>\n<li>Write new style -&gt; Blank style…</li>\n</ul>\n<h3 id=\"addingtheactualstyle\">Adding the actual style</h3>\n<ul>\n<li>Write whatever you wish in the name field.</li>\n<li>Paste the content of the CSS file in the large textbox.</li>\n<li>Click on <strong>Save</strong> and check out yo new look bro!</li>\n</ul>'),
	(54,'QuadPiece','youtube-checker','https://raw.githubusercontent.com/QuadPiece/youtube-checker/master/README.md','2018-11-07 12:30:33','# parse.py\n\nAlright, this thing just checks for dead YouTube links. Originally made for [a friend](http://twitter.com/benjisild),\nbut I\'ll leave the code here because why not.\n\n_Note: The videos must have the link format\n `https://www.youtube.com/watch?v=VideoID`\n because I\'m too lazy for RegEx and shit._\n\n## Using this\n\nDo the standard python shit\n ( navigate to the folder, create virtual environment, and so on)\n\n* Install the requirements with `pip install -r requirements.txt`\n* Place your HTML file with links to YouTube videos in the folder and name it index.html\n* `python3 parse.py`\n* ???\n* PROFIT (Hopefully)\n\n## End note\n\nAs I said, this was made for\n [a friend](http://twitter.com/benjisild) who needed it for a pretty special case.\n I doubt anyone else will have a need for this,\n but it\'s here if someone wants to learn by reading python code \n or use it as a starting point for their own little thing.\n','<h1 id=\"parsepy\">parse.py</h1>\n<p>Alright, this thing just checks for dead YouTube links. Originally made for <a href=\"http://twitter.com/benjisild\">a friend</a>,\nbut I\'ll leave the code here because why not.</p>\n<p><em>Note: The videos must have the link format\n <code>https://www.youtube.com/watch?v=VideoID</code>\n because I\'m too lazy for RegEx and shit.</em></p>\n<h2 id=\"usingthis\">Using this</h2>\n<p>Do the standard python shit\n ( navigate to the folder, create virtual environment, and so on)</p>\n<ul>\n<li>Install the requirements with <code>pip install -r requirements.txt</code></li>\n<li>Place your HTML file with links to YouTube videos in the folder and name it index.html</li>\n<li><code>python3 parse.py</code></li>\n<li>???</li>\n<li>PROFIT (Hopefully)</li>\n</ul>\n<h2 id=\"endnote\">End note</h2>\n<p>As I said, this was made for\n <a href=\"http://twitter.com/benjisild\">a friend</a> who needed it for a pretty special case.\n I doubt anyone else will have a need for this,\n but it\'s here if someone wants to learn by reading python code \n or use it as a starting point for their own little thing.</p>'),
	(55,'louisdh','AlamofireObjectMapper','https://raw.githubusercontent.com/louisdh/AlamofireObjectMapper/master/README.md','2018-11-07 12:30:33','AlamofireObjectMapper\n============\n[![Build Status](https://travis-ci.org/tristanhimmelman/AlamofireObjectMapper.svg?branch=master)](https://travis-ci.org/tristanhimmelman/AlamofireObjectMapper)\n[![CocoaPods](https://img.shields.io/cocoapods/v/AlamofireObjectMapper.svg)](https://github.com/tristanhimmelman/AlamofireObjectMapper)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n\n\nAn extension to [Alamofire](https://github.com/Alamofire/Alamofire) which automatically converts JSON response data into swift objects using [ObjectMapper](https://github.com/Hearst-DD/ObjectMapper/). \n\n#Usage\n\nGiven a URL which returns weather data in the following form:\n```\n{\n    \"location\": \"Toronto, Canada\",    \n    \"three_day_forecast\": [\n        { \n            \"conditions\": \"Partly cloudy\",\n            \"day\" : \"Monday\",\n            \"temperature\": 20 \n        },\n        { \n            \"conditions\": \"Showers\",\n            \"day\" : \"Tuesday\",\n            \"temperature\": 22 \n        },\n        { \n            \"conditions\": \"Sunny\",\n            \"day\" : \"Wednesday\",\n            \"temperature\": 28 \n        }\n    ]\n}\n```\n\nYou can use the extension as the follows:\n```swift\nlet URL = \"https://raw.githubusercontent.com/tristanhimmelman/AlamofireObjectMapper/d8bb95982be8a11a2308e779bb9a9707ebe42ede/sample_json\"\nAlamofire.request(URL).responseObject { (response: DataResponse<WeatherResponse>) in\n\n    let weatherResponse = response.result.value\n    print(weatherResponse?.location)\n    \n    if let threeDayForecast = weatherResponse?.threeDayForecast {\n        for forecast in threeDayForecast {\n            print(forecast.day)\n            print(forecast.temperature)           \n        }\n    }\n}\n```\n\nThe `WeatherResponse` object in the completion handler is a custom object which you define. The only requirement is that the object must conform to [ObjectMapper\'s](https://github.com/Hearst-DD/ObjectMapper/) `Mappable` protocol. In the above example, the `WeatherResponse` object looks like the following:\n\n```swift\nclass WeatherResponse: Mappable {\n    var location: String?\n    var threeDayForecast: [Forecast]?\n    \n	required init?(map: Map){\n\n	}\n    \n    func mapping(map: Map) {\n        location <- map[\"location\"]\n        threeDayForecast <- map[\"three_day_forecast\"]\n    }\n}\n\nclass Forecast: Mappable {\n    var day: String?\n    var temperature: Int?\n    var conditions: String?\n    \n	required init?(map: Map){\n\n	}\n    \n    func mapping(map: Map) {\n        day <- map[\"day\"]\n        temperature <- map[\"temperature\"]\n        conditions <- map[\"conditions\"]\n    }\n}\n```\n\nThe extension uses Generics to allow you to create your own custom response objects. Below is the `responseObject` function definition. Just replace `T` in the completionHandler with your custom response object and the extension handles the rest: \n```swift\npublic func responseObject<T: Mappable>(queue queue: dispatch_queue_t? = nil, keyPath: String? = nil, mapToObject object: T? = nil, completionHandler: DataResponse<T> -> Void) -> Self\n```\nThe `responseObject` function has 3 optional parameters and a required completionHandler:\n- `queue`: The queue on which the completion handler is dispatched.\n- `keyPath`: The key path of the JSON where object mapping should be performed\n- `mapToObject`: An object to perform the mapping on to\n- `completionHandler`: A closure to be executed once the request has finished and the data has been mapped by ObjectMapper.\n\n###KeyPath\n\nThe `keyPath` variable is used to drill down into a JSON response and only map the data found at that `keyPath`. It supports nested values such as `data.weather` to drill down several levels in a JSON response.\n```swift\nlet URL = \"https://raw.githubusercontent.com/tristanhimmelman/AlamofireObjectMapper/2ee8f34d21e8febfdefb2b3a403f18a43818d70a/sample_keypath_json\"\nlet expectation = expectationWithDescription(\"\\(URL)\")\n\nAlamofire.request(URL).responseObject(keyPath: \"data\") { (response: DataResponse<WeatherResponse>) in\n    expectation.fulfill()\n    \n    let weatherResponse = response.result.value\n    print(weatherResponse?.location)\n    \n    if let threeDayForecast = weatherResponse?.threeDayForecast {\n        for forecast in threeDayForecast {\n            print(forecast.day)\n            print(forecast.temperature)           \n        }\n    }\n}\n```\n\n#Array Responses\nIf you have an endpoint that returns data in `Array` form you can map it with the following function:\n```swift\npublic func responseArray<T: Mappable>(queue queue: dispatch_queue_t? = nil, keyPath: String? = nil, completionHandler: DataResponse<[T]> -> Void) -> Self\n```\n\nFor example, if your endpoint returns the following:\n```\n[\n    { \n        \"conditions\": \"Partly cloudy\",\n        \"day\" : \"Monday\",\n        \"temperature\": 20 \n    },\n    { \n        \"conditions\": \"Showers\",\n        \"day\" : \"Tuesday\",\n        \"temperature\": 22 \n    },\n    { \n        \"conditions\": \"Sunny\",\n        \"day\" : \"Wednesday\",\n        \"temperature\": 28 \n    }\n]\n```\nYou can request and map it as follows:\n```swift\nlet URL = \"https://raw.githubusercontent.com/tristanhimmelman/AlamofireObjectMapper/f583be1121dbc5e9b0381b3017718a70c31054f7/sample_array_json\"\nAlamofire.request(URL).responseArray { (response: DataResponse<[Forecast]>) in\n\n    let forecastArray = response.result.value\n    \n    if let forecastArray = forecastArray {\n        for forecast in forecastArray {\n            print(forecast.day)\n            print(forecast.temperature)           \n        }\n    }\n}\n\n```\n\n#Installation\nAlamofireObjectMapper can be added to your project using [CocoaPods](https://cocoapods.org/) by adding the following line to your Podfile:\n```\npod \'AlamofireObjectMapper\', \'~> 4.0\'\n```\n\nIf you\'re using [Carthage](https://github.com/Carthage/Carthage) you can add a dependency on AlamofireObjectMapper by adding it to your Cartfile:\n```\ngithub \"tristanhimmelman/AlamofireObjectMapper\" ~> 4.0\n```\n','<h1 id=\"alamofireobjectmapper\">AlamofireObjectMapper</h1>\n<p><a href=\"https://travis-ci.org/tristanhimmelman/AlamofireObjectMapper\"><img src=\"https://travis-ci.org/tristanhimmelman/AlamofireObjectMapper.svg?branch=master\" alt=\"Build Status\" /></a>\n<a href=\"https://github.com/tristanhimmelman/AlamofireObjectMapper\"><img src=\"https://img.shields.io/cocoapods/v/AlamofireObjectMapper.svg\" alt=\"CocoaPods\" /></a>\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage compatible\" /></a></p>\n<p>An extension to <a href=\"https://github.com/Alamofire/Alamofire\">Alamofire</a> which automatically converts JSON response data into swift objects using <a href=\"https://github.com/Hearst-DD/ObjectMapper/\">ObjectMapper</a>. </p>\n<h1 id=\"usage\">Usage</h1>\n<p>Given a URL which returns weather data in the following form:</p>\n<pre><code>{\n    \"location\": \"Toronto, Canada\",    \n    \"three_day_forecast\": [\n        { \n            \"conditions\": \"Partly cloudy\",\n            \"day\" : \"Monday\",\n            \"temperature\": 20 \n        },\n        { \n            \"conditions\": \"Showers\",\n            \"day\" : \"Tuesday\",\n            \"temperature\": 22 \n        },\n        { \n            \"conditions\": \"Sunny\",\n            \"day\" : \"Wednesday\",\n            \"temperature\": 28 \n        }\n    ]\n}\n</code></pre>\n<p>You can use the extension as the follows:</p>\n<pre><code class=\"swift language-swift\">let URL = \"https://raw.githubusercontent.com/tristanhimmelman/AlamofireObjectMapper/d8bb95982be8a11a2308e779bb9a9707ebe42ede/sample_json\"\nAlamofire.request(URL).responseObject { (response: DataResponse&lt;WeatherResponse&gt;) in\n\n    let weatherResponse = response.result.value\n    print(weatherResponse?.location)\n\n    if let threeDayForecast = weatherResponse?.threeDayForecast {\n        for forecast in threeDayForecast {\n            print(forecast.day)\n            print(forecast.temperature)           \n        }\n    }\n}\n</code></pre>\n<p>The <code>WeatherResponse</code> object in the completion handler is a custom object which you define. The only requirement is that the object must conform to <a href=\"https://github.com/Hearst-DD/ObjectMapper/\">ObjectMapper\'s</a> <code>Mappable</code> protocol. In the above example, the <code>WeatherResponse</code> object looks like the following:</p>\n<pre><code class=\"swift language-swift\">class WeatherResponse: Mappable {\n    var location: String?\n    var threeDayForecast: [Forecast]?\n\n    required init?(map: Map){\n\n    }\n\n    func mapping(map: Map) {\n        location &lt;- map[\"location\"]\n        threeDayForecast &lt;- map[\"three_day_forecast\"]\n    }\n}\n\nclass Forecast: Mappable {\n    var day: String?\n    var temperature: Int?\n    var conditions: String?\n\n    required init?(map: Map){\n\n    }\n\n    func mapping(map: Map) {\n        day &lt;- map[\"day\"]\n        temperature &lt;- map[\"temperature\"]\n        conditions &lt;- map[\"conditions\"]\n    }\n}\n</code></pre>\n<p>The extension uses Generics to allow you to create your own custom response objects. Below is the <code>responseObject</code> function definition. Just replace <code>T</code> in the completionHandler with your custom response object and the extension handles the rest: </p>\n<pre><code class=\"swift language-swift\">public func responseObject&lt;T: Mappable&gt;(queue queue: dispatch_queue_t? = nil, keyPath: String? = nil, mapToObject object: T? = nil, completionHandler: DataResponse&lt;T&gt; -&gt; Void) -&gt; Self\n</code></pre>\n<p>The <code>responseObject</code> function has 3 optional parameters and a required completionHandler:</p>\n<ul>\n<li><code>queue</code>: The queue on which the completion handler is dispatched.</li>\n<li><code>keyPath</code>: The key path of the JSON where object mapping should be performed</li>\n<li><code>mapToObject</code>: An object to perform the mapping on to</li>\n<li><code>completionHandler</code>: A closure to be executed once the request has finished and the data has been mapped by ObjectMapper.</li>\n</ul>\n<h3 id=\"keypath\">KeyPath</h3>\n<p>The <code>keyPath</code> variable is used to drill down into a JSON response and only map the data found at that <code>keyPath</code>. It supports nested values such as <code>data.weather</code> to drill down several levels in a JSON response.</p>\n<pre><code class=\"swift language-swift\">let URL = \"https://raw.githubusercontent.com/tristanhimmelman/AlamofireObjectMapper/2ee8f34d21e8febfdefb2b3a403f18a43818d70a/sample_keypath_json\"\nlet expectation = expectationWithDescription(\"\\(URL)\")\n\nAlamofire.request(URL).responseObject(keyPath: \"data\") { (response: DataResponse&lt;WeatherResponse&gt;) in\n    expectation.fulfill()\n\n    let weatherResponse = response.result.value\n    print(weatherResponse?.location)\n\n    if let threeDayForecast = weatherResponse?.threeDayForecast {\n        for forecast in threeDayForecast {\n            print(forecast.day)\n            print(forecast.temperature)           \n        }\n    }\n}\n</code></pre>\n<h1 id=\"arrayresponses\">Array Responses</h1>\n<p>If you have an endpoint that returns data in <code>Array</code> form you can map it with the following function:</p>\n<pre><code class=\"swift language-swift\">public func responseArray&lt;T: Mappable&gt;(queue queue: dispatch_queue_t? = nil, keyPath: String? = nil, completionHandler: DataResponse&lt;[T]&gt; -&gt; Void) -&gt; Self\n</code></pre>\n<p>For example, if your endpoint returns the following:</p>\n<pre><code>[\n    { \n        \"conditions\": \"Partly cloudy\",\n        \"day\" : \"Monday\",\n        \"temperature\": 20 \n    },\n    { \n        \"conditions\": \"Showers\",\n        \"day\" : \"Tuesday\",\n        \"temperature\": 22 \n    },\n    { \n        \"conditions\": \"Sunny\",\n        \"day\" : \"Wednesday\",\n        \"temperature\": 28 \n    }\n]\n</code></pre>\n<p>You can request and map it as follows:</p>\n<pre><code class=\"swift language-swift\">let URL = \"https://raw.githubusercontent.com/tristanhimmelman/AlamofireObjectMapper/f583be1121dbc5e9b0381b3017718a70c31054f7/sample_array_json\"\nAlamofire.request(URL).responseArray { (response: DataResponse&lt;[Forecast]&gt;) in\n\n    let forecastArray = response.result.value\n\n    if let forecastArray = forecastArray {\n        for forecast in forecastArray {\n            print(forecast.day)\n            print(forecast.temperature)           \n        }\n    }\n}\n</code></pre>\n<h1 id=\"installation\">Installation</h1>\n<p>AlamofireObjectMapper can be added to your project using <a href=\"https://cocoapods.org/\">CocoaPods</a> by adding the following line to your Podfile:</p>\n<pre><code>pod \'AlamofireObjectMapper\', \'~&gt; 4.0\'\n</code></pre>\n<p>If you\'re using <a href=\"https://github.com/Carthage/Carthage\">Carthage</a> you can add a dependency on AlamofireObjectMapper by adding it to your Cartfile:</p>\n<pre><code>github \"tristanhimmelman/AlamofireObjectMapper\" ~&gt; 4.0\n</code></pre>'),
	(56,'louisdh','animated-tab-bar','https://raw.githubusercontent.com/louisdh/animated-tab-bar/master/README.md','2018-11-07 12:30:34','[![header](https://raw.githubusercontent.com/Ramotion/animated-tab-bar/master/header.png)](https://business.ramotion.com?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar-logo)\n# RAMAnimatedTabBarController\n[![CocoaPods](https://img.shields.io/cocoapods/p/RAMAnimatedTabBarController.svg)](http://cocoapods.org/pods/RAMAnimatedTabBarController)\n[![CocoaPods](https://img.shields.io/cocoapods/v/RAMAnimatedTabBarController.svg)](http://cocoapods.org/pods/RAMAnimatedTabBarController)\n[![CocoaPods](https://img.shields.io/cocoapods/metrics/doc-percent/RAMAnimatedTabBarController.svg)](https://cdn.rawgit.com/Ramotion/animated-tab-bar/master/docs/index.html)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Ramotion/animated-tab-bar)\n[![Twitter](https://img.shields.io/badge/Twitter-@Ramotion-blue.svg?style=flat)](http://twitter.com/Ramotion)\n[![Travis](https://img.shields.io/travis/Ramotion/animated-tab-bar.svg)](https://travis-ci.org/Ramotion/animated-tab-bar)\n\n## About\nThis project is maintained by Ramotion, Inc.<br>\nWe specialize in the designing and coding of custom UI for Mobile Apps and Websites.<br><br>**Looking for developers for your project?** \n\n<a href=\"http://business.ramotion.com?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar-contact-us/#Get_in_Touch\" > <img src=\"https://github.com/Ramotion/navigation-stack/raw/master/contact_our_team@2x.png\" width=\"150\" height=\"30\"></a>\n\n\n\n[![Animation](https://raw.githubusercontent.com/Ramotion/animated-tab-bar/master/Screenshots/tab-bar-icons-iphone-ramotion-animation-interface-design.gif)](https://dribbble.com/shots/1766396-Animated-Tab-Bar-Icons)\n\nThe [iPhone mockup](https://store.ramotion.com/product/iphone-6-mockups?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar) available [here](https://store.ramotion.com/product/iphone-6-mockups?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar).\n\n## Try this UI control in action\n\n<a href=\"https://itunes.apple.com/app/apple-store/id1182360240?pt=550053&ct=gthb-animated-tab-bar&mt=8\" > <img src=\"https://github.com/Ramotion/navigation-stack/raw/master/Download_on_the_App_Store_Badge_US-UK_135x40.png\" width=\"170\" height=\"58\"></a>\n\nScreencast from our Demo\n\n![Animation](https://raw.githubusercontent.com/Ramotion/animated-tab-bar/master/Screenshots/RAMAnimatedTabBarDemo.gif)\n\n## Requirements\n\n- iOS 9.0+\n- xCode 8\n\n## Installation\n\nJust add the RAMAnimatedTabBarController folder to your project.\n\nor use [CocoaPods](https://cocoapods.org) with Podfile:\n``` ruby\npod \'RAMAnimatedTabBarController\', \"~> 1.5.3\"  swift 2.2\npod \'RAMAnimatedTabBarController\', \"~> 2.0.13\"  swift 3\n```\n\nor [Carthage](https://github.com/Carthage/Carthage) users can simply add to their `Cartfile`:\n```\ngithub \"Ramotion/animated-tab-bar\"\n\n```\n\n\n## Usage\n\n1. Create a new UITabBarController in your storyboard or nib.\n\n2. Set the class of the UITabBarController to RAMAnimatedTabBarController in your Storyboard or nib.\n\n3. For each UITabBarItem, set the class to RAMAnimatedTabBarItem.\n\n4. Add a custom image icon for each RAMAnimatedTabBarItem\n\n5. Add animation for each RAMAnimatedTabBarItem :\n   * drag and drop an NSObject item into your ViewController\n   * set its class to ANIMATION_CLASS (where ANIMATION_CLASS is the class name of the animation you want to use)\n   * connect the outlet animation in RAMAnimatedTabBarItem to your ANIMATION_CLASS\n   [Demonstration video for step 5](http://vimeo.com/112390386)\n\n\n## Included Animations\n\n* RAMBounceAnimation\n* RAMLeftRotationAnimation\n* RAMRightRotationAnimation\n* RAMFlipLeftTransitionItemAnimations\n* RAMFlipRightTransitionItemAnimations\n* RAMFlipTopTransitionItemAnimations\n* RAMFlipBottomTransitionItemAnimations\n* RAMFrameItemAnimation\n* RAMFumeAnimation\n\n## Creating Custom Animations\n1. Create a new class which inherits from RAMItemAnimation:\n\n  ``` swift\n     class NewAnimation : RAMItemAnimation\n  ```\n2. Implement the methods in RAMItemAnimationProtocol:\n\n\n  ``` swift\n    // method call when Tab Bar Item is selected\n    override func playAnimation(icon: UIImageView, textLabel: UILabel) {\n      // add animation\n    }\n  ```  \n  ``` swift\n    // method call when Tab Bar Item is deselected\n    override func deselectAnimation(icon: UIImageView, textLabel: UILabel, defaultTextColor: UIColor, defaultIconColor: UIColor) {\n      // add animation\n    }\n  ```    \n  ``` swift\n    // method call when TabBarController did load\n    override func selectedState(icon: UIImageView, textLabel: UILabel) {\n      // set selected state  \n    }\n  ```\n\n3. Example:\n\n``` swift\nimport RAMAnimatedTabBarController\n\nclass RAMBounceAnimation : RAMItemAnimation {\n\n    override func playAnimation(_ icon: UIImageView, textLabel: UILabel) {\n        playBounceAnimation(icon)\n        textLabel.textColor = textSelectedColor\n    }\n    \n    override func deselectAnimation(_ icon: UIImageView, textLabel: UILabel, defaultTextColor: UIColor, defaultIconColor: UIColor) {\n        textLabel.textColor = defaultTextColor\n    }\n    \n    override func selectedState(_ icon: UIImageView, textLabel: UILabel) {\n        textLabel.textColor = textSelectedColor\n    }\n    \n    func playBounceAnimation(_ icon : UIImageView) {\n        \n        let bounceAnimation = CAKeyframeAnimation(keyPath: \"transform.scale\")\n        bounceAnimation.values = [1.0 ,1.4, 0.9, 1.15, 0.95, 1.02, 1.0]\n        bounceAnimation.duration = TimeInterval(duration)\n        bounceAnimation.calculationMode = kCAAnimationCubic\n        \n        icon.layer.add(bounceAnimation, forKey: \"bounceAnimation\")\n    }\n}\n```\n\n## Follow us\n\n[![Twitter URL](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=https://github.com/ramotion/animated-tab-bar)\n[![Twitter Follow](https://img.shields.io/twitter/follow/ramotion.svg?style=social)](https://twitter.com/ramotion)\n','<p><a href=\"https://business.ramotion.com?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar-logo\"><img src=\"https://raw.githubusercontent.com/Ramotion/animated-tab-bar/master/header.png\" alt=\"header\" /></a></p>\n<h1 id=\"ramanimatedtabbarcontroller\">RAMAnimatedTabBarController</h1>\n<p><a href=\"http://cocoapods.org/pods/RAMAnimatedTabBarController\"><img src=\"https://img.shields.io/cocoapods/p/RAMAnimatedTabBarController.svg\" alt=\"CocoaPods\" /></a>\n<a href=\"http://cocoapods.org/pods/RAMAnimatedTabBarController\"><img src=\"https://img.shields.io/cocoapods/v/RAMAnimatedTabBarController.svg\" alt=\"CocoaPods\" /></a>\n<a href=\"https://cdn.rawgit.com/Ramotion/animated-tab-bar/master/docs/index.html\"><img src=\"https://img.shields.io/cocoapods/metrics/doc-percent/RAMAnimatedTabBarController.svg\" alt=\"CocoaPods\" /></a>\n<a href=\"https://github.com/Ramotion/animated-tab-bar\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage compatible\" /></a>\n<a href=\"http://twitter.com/Ramotion\"><img src=\"https://img.shields.io/badge/Twitter-@Ramotion-blue.svg?style=flat\" alt=\"Twitter\" /></a>\n<a href=\"https://travis-ci.org/Ramotion/animated-tab-bar\"><img src=\"https://img.shields.io/travis/Ramotion/animated-tab-bar.svg\" alt=\"Travis\" /></a></p>\n<h2 id=\"about\">About</h2>\n<p>This project is maintained by Ramotion, Inc.<br>\nWe specialize in the designing and coding of custom UI for Mobile Apps and Websites.<br><br><strong>Looking for developers for your project?</strong> </p>\n<p><a href=\"http://business.ramotion.com?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar-contact-us/#Get_in_Touch\" > <img src=\"https://github.com/Ramotion/navigation-stack/raw/master/contact_our_team@2x.png\" width=\"150\" height=\"30\"></a></p>\n<p><a href=\"https://dribbble.com/shots/1766396-Animated-Tab-Bar-Icons\"><img src=\"https://raw.githubusercontent.com/Ramotion/animated-tab-bar/master/Screenshots/tab-bar-icons-iphone-ramotion-animation-interface-design.gif\" alt=\"Animation\" /></a></p>\n<p>The <a href=\"https://store.ramotion.com/product/iphone-6-mockups?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar\">iPhone mockup</a> available <a href=\"https://store.ramotion.com/product/iphone-6-mockups?utm_source=gthb&utm_medium=special&utm_campaign=animated-tab-bar\">here</a>.</p>\n<h2 id=\"trythisuicontrolinaction\">Try this UI control in action</h2>\n<p><a href=\"https://itunes.apple.com/app/apple-store/id1182360240?pt=550053&ct=gthb-animated-tab-bar&mt=8\" > <img src=\"https://github.com/Ramotion/navigation-stack/raw/master/Download_on_the_App_Store_Badge_US-UK_135x40.png\" width=\"170\" height=\"58\"></a></p>\n<p>Screencast from our Demo</p>\n<p><img src=\"https://raw.githubusercontent.com/Ramotion/animated-tab-bar/master/Screenshots/RAMAnimatedTabBarDemo.gif\" alt=\"Animation\" /></p>\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>iOS 9.0+</li>\n<li>xCode 8</li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<p>Just add the RAMAnimatedTabBarController folder to your project.</p>\n<p>or use <a href=\"https://cocoapods.org\">CocoaPods</a> with Podfile:</p>\n<pre><code class=\"ruby language-ruby\">pod \'RAMAnimatedTabBarController\', \"~&gt; 1.5.3\"  swift 2.2\npod \'RAMAnimatedTabBarController\', \"~&gt; 2.0.13\"  swift 3\n</code></pre>\n<p>or <a href=\"https://github.com/Carthage/Carthage\">Carthage</a> users can simply add to their <code>Cartfile</code>:</p>\n<pre><code>github \"Ramotion/animated-tab-bar\"\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<ol>\n<li><p>Create a new UITabBarController in your storyboard or nib.</p></li>\n<li><p>Set the class of the UITabBarController to RAMAnimatedTabBarController in your Storyboard or nib.</p></li>\n<li><p>For each UITabBarItem, set the class to RAMAnimatedTabBarItem.</p></li>\n<li><p>Add a custom image icon for each RAMAnimatedTabBarItem</p></li>\n<li><p>Add animation for each RAMAnimatedTabBarItem :</p></li>\n</ol>\n<ul>\n<li>drag and drop an NSObject item into your ViewController</li>\n<li>set its class to ANIMATION<em>CLASS (where ANIMATION</em>CLASS is the class name of the animation you want to use)</li>\n<li>connect the outlet animation in RAMAnimatedTabBarItem to your ANIMATION_CLASS\n<a href=\"http://vimeo.com/112390386\">Demonstration video for step 5</a></li>\n</ul>\n<h2 id=\"includedanimations\">Included Animations</h2>\n<ul>\n<li>RAMBounceAnimation</li>\n<li>RAMLeftRotationAnimation</li>\n<li>RAMRightRotationAnimation</li>\n<li>RAMFlipLeftTransitionItemAnimations</li>\n<li>RAMFlipRightTransitionItemAnimations</li>\n<li>RAMFlipTopTransitionItemAnimations</li>\n<li>RAMFlipBottomTransitionItemAnimations</li>\n<li>RAMFrameItemAnimation</li>\n<li>RAMFumeAnimation</li>\n</ul>\n<h2 id=\"creatingcustomanimations\">Creating Custom Animations</h2>\n<ol>\n<li>Create a new class which inherits from RAMItemAnimation:</li>\n</ol>\n<pre><code class=\"swift language-swift\">     class NewAnimation : RAMItemAnimation\n</code></pre>\n<ol start=\"2\">\n<li>Implement the methods in RAMItemAnimationProtocol:</li>\n</ol>\n<pre><code class=\"swift language-swift\">    // method call when Tab Bar Item is selected\n    override func playAnimation(icon: UIImageView, textLabel: UILabel) {\n      // add animation\n    }\n</code></pre>\n<pre><code class=\"swift language-swift\">    // method call when Tab Bar Item is deselected\n    override func deselectAnimation(icon: UIImageView, textLabel: UILabel, defaultTextColor: UIColor, defaultIconColor: UIColor) {\n      // add animation\n    }\n</code></pre>\n<pre><code>\n</code></pre>\n<pre><code class=\"swift language-swift\">    // method call when TabBarController did load\n    override func selectedState(icon: UIImageView, textLabel: UILabel) {\n      // set selected state  \n    }\n</code></pre>\n<ol start=\"3\">\n<li>Example:</li>\n</ol>\n<pre><code class=\"swift language-swift\">import RAMAnimatedTabBarController\n\nclass RAMBounceAnimation : RAMItemAnimation {\n\n    override func playAnimation(_ icon: UIImageView, textLabel: UILabel) {\n        playBounceAnimation(icon)\n        textLabel.textColor = textSelectedColor\n    }\n\n    override func deselectAnimation(_ icon: UIImageView, textLabel: UILabel, defaultTextColor: UIColor, defaultIconColor: UIColor) {\n        textLabel.textColor = defaultTextColor\n    }\n\n    override func selectedState(_ icon: UIImageView, textLabel: UILabel) {\n        textLabel.textColor = textSelectedColor\n    }\n\n    func playBounceAnimation(_ icon : UIImageView) {\n\n        let bounceAnimation = CAKeyframeAnimation(keyPath: \"transform.scale\")\n        bounceAnimation.values = [1.0 ,1.4, 0.9, 1.15, 0.95, 1.02, 1.0]\n        bounceAnimation.duration = TimeInterval(duration)\n        bounceAnimation.calculationMode = kCAAnimationCubic\n\n        icon.layer.add(bounceAnimation, forKey: \"bounceAnimation\")\n    }\n}\n</code></pre>\n<h2 id=\"followus\">Follow us</h2>\n<p><a href=\"https://twitter.com/intent/tweet?text=https://github.com/ramotion/animated-tab-bar\"><img src=\"https://img.shields.io/twitter/url/http/shields.io.svg?style=social\" alt=\"Twitter URL\" /></a>\n<a href=\"https://twitter.com/ramotion\"><img src=\"https://img.shields.io/twitter/follow/ramotion.svg?style=social\" alt=\"Twitter Follow\" /></a></p>'),
	(57,'louisdh','bezierpath-length','https://raw.githubusercontent.com/louisdh/bezierpath-length/master/README.md','2018-11-07 12:30:34','# [UI/NS]BezierPath + Length\n\n[![Build Status](https://travis-ci.org/louisdh/bezierpath-length.svg?branch=master)](https://travis-ci.org/louisdh/bezierpath-length)\n[![codecov](https://codecov.io/gh/louisdh/bezierpath-length/branch/master/graph/badge.svg)](https://codecov.io/gh/louisdh/bezierpath-length)\n[![Code Climate](https://codeclimate.com/github/louisdh/bezierpath-length/badges/gpa.svg)](https://codeclimate.com/github/louisdh/bezierpath-length)\n[![Swift](https://img.shields.io/badge/Swift-4.0-orange.svg?style=flat\")](https://developer.apple.com/swift/)\n[![PodVersion](https://img.shields.io/cocoapods/v/BezierPathLength.svg)](https://cocoapods.org/pods/BezierPathLength)\n![platform](https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-lightgrey.svg)\n[![Twitter](https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat)](http://twitter.com/LouisDhauwe)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://paypal.me/louisdhauwe)\n\nThis project provides a simple API to get the length of either a ```UIBezierPath``` or ```NSBezierPath```. Example:\n\n```swift\nlet rect = CGRect(origin: .zero, size: CGSize(width: 100, height: 300))\nlet path = UIBezierPath(ovalIn: rect)\n\n// Length in pt.\nlet length = path.length\n```\n\n\nThere\'s also an API for getting a point on a path at a certain percentage, example:\n\n```swift\n// CGPoint at 50% of path\nlet point = path.point(at: 0.5)\n```\n\n\n## Requirements\n\n* iOS 8.0+ / macOS 10.9+ / tvOS 9.0+ / watchOS 2.0+\n* Xcode 9.0+\n\n## Installation\n\n### [CocoaPods](http://cocoapods.org)\n\nTo install, add the following line to your ```Podfile```:\n\n```ruby\npod \'BezierPathLength\', \'~> 1.0.0\'\n```\n\n## How does it work?\n\nThe actual calculations are implemented on a ```CGPath``` extension, but a ```[UI/NS]BezierPath``` extension is available for convenience.\n\nAny ```CGPath``` can be split into subpaths. Of which there are three types:\n\n* Linear\n* Quadratic curve\n* Cubic curve\n \n \nSee [calculations.md](calculations.md) for a detailed mathematical explanation of how the length of these three can be calculated.\n\n## License\n\nThis project is available under the MIT license. See the LICENSE file for more info.','<h1 id=\"uinsbezierpathlength\">[UI/NS]BezierPath + Length</h1>\n<p><a href=\"https://travis-ci.org/louisdh/bezierpath-length\"><img src=\"https://travis-ci.org/louisdh/bezierpath-length.svg?branch=master\" alt=\"Build Status\" /></a>\n<a href=\"https://codecov.io/gh/louisdh/bezierpath-length\"><img src=\"https://codecov.io/gh/louisdh/bezierpath-length/branch/master/graph/badge.svg\" alt=\"codecov\" /></a>\n<a href=\"https://codeclimate.com/github/louisdh/bezierpath-length\"><img src=\"https://codeclimate.com/github/louisdh/bezierpath-length/badges/gpa.svg\" alt=\"Code Climate\" /></a>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.0-orange.svg?style=flat\"\" alt=\"Swift\" /></a>\n<a href=\"https://cocoapods.org/pods/BezierPathLength\"><img src=\"https://img.shields.io/cocoapods/v/BezierPathLength.svg\" alt=\"PodVersion\" /></a>\n<img src=\"https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-lightgrey.svg\" alt=\"platform\" />\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" alt=\"Twitter\" /></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg\" alt=\"Donate\" /></a></p>\n<p>This project provides a simple API to get the length of either a <code>UIBezierPath</code> or <code>NSBezierPath</code>. Example:</p>\n<pre><code class=\"swift language-swift\">let rect = CGRect(origin: .zero, size: CGSize(width: 100, height: 300))\nlet path = UIBezierPath(ovalIn: rect)\n\n// Length in pt.\nlet length = path.length\n</code></pre>\n<p>There\'s also an API for getting a point on a path at a certain percentage, example:</p>\n<pre><code class=\"swift language-swift\">// CGPoint at 50% of path\nlet point = path.point(at: 0.5)\n</code></pre>\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>iOS 8.0+ / macOS 10.9+ / tvOS 9.0+ / watchOS 2.0+</li>\n<li>Xcode 9.0+</li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<h3 id=\"cocoapodshttpcocoapodsorg\"><a href=\"http://cocoapods.org\">CocoaPods</a></h3>\n<p>To install, add the following line to your <code>Podfile</code>:</p>\n<pre><code class=\"ruby language-ruby\">pod \'BezierPathLength\', \'~&gt; 1.0.0\'\n</code></pre>\n<h2 id=\"howdoesitwork\">How does it work?</h2>\n<p>The actual calculations are implemented on a <code>CGPath</code> extension, but a <code>[UI/NS]BezierPath</code> extension is available for convenience.</p>\n<p>Any <code>CGPath</code> can be split into subpaths. Of which there are three types:</p>\n<ul>\n<li>Linear</li>\n<li>Quadratic curve</li>\n<li>Cubic curve</li>\n</ul>\n<p>See <a href=\"calculations.md\">calculations.md</a> for a detailed mathematical explanation of how the length of these three can be calculated.</p>\n<h2 id=\"license\">License</h2>\n<p>This project is available under the MIT license. See the LICENSE file for more info.</p>'),
	(58,'louisdh','bugsnag-cocoa','https://raw.githubusercontent.com/louisdh/bugsnag-cocoa/master/README.md','2018-11-07 12:30:34','# Bugsnag exception reporter for iOS and macOS\n[![iOS Documentation](https://img.shields.io/badge/ios_documentation-latest-blue.svg)](http://docs.bugsnag.com/platforms/ios/)\n[![macOS Documentation](https://img.shields.io/badge/macos_documentation-latest-blue.svg)](http://docs.bugsnag.com/platforms/osx/)\n[![Build status](https://travis-ci.org/bugsnag/bugsnag-cocoa.svg?branch=master)](https://travis-ci.org/bugsnag/bugsnag-cocoa)\n\nThe Bugsnag crash reporter for Cocoa library automatically detects crashes and fatal signals in your iOS 6.0+ or OS X 10.8+  apps, collecting diagnostic information and immediately notifying your development team, helping you to understand and resolve issues as fast as possible. Learn more about [iOS crash reporting with Bugsnag](https://www.bugsnag.com/platforms/ios-crash-reporting/). \n\n## Features\n\n* Automatically report unhandled exceptions and crashes\n* Report handled exceptions\n* Log breadcrumbs which are attached to crash reports and add insight to users\' actions\n* Attach user information and custom diagnostic data to determine how many people are affected by a crash\n\n\n## Getting started\n\n### iOS\n\n1. [Create a Bugsnag account](https://bugsnag.com)\n1. Complete the instructions in the integration guide for [iOS](http://docs.bugsnag.com/platforms/ios/)\n1. Report handled exceptions using [`[Bugsnag notify:]`](http://docs.bugsnag.com/platforms/ios/reporting-handled-exceptions/)\n1. Customize your integration using the [configuration options](http://docs.bugsnag.com/platforms/ios/configuration-options/)\n\n### macOS\n\n1. [Create a Bugsnag account](https://bugsnag.com)\n1. Complete the instructions in the integration guide for [macOS](http://docs.bugsnag.com/platforms/osx/)\n1. Report handled exceptions using [`[Bugsnag notify:]`](http://docs.bugsnag.com/platforms/osx/reporting-handled-exceptions/)\n1. Customize your integration using the [configuration options](http://docs.bugsnag.com/platforms/osx/configuration-options/)\n\n## Support\n\n* Read the [iOS](http://docs.bugsnag.com/platforms/ios/configuration-options) or [macOS](http://docs.bugsnag.com/platforms/osx/configuration-options) configuration reference\n* [Search open and closed issues](https://github.com/bugsnag/bugsnag-cocoa/issues?utf8=✓&q=is%3Aissue) for similar problems\n* [Report a bug or request a feature](https://github.com/bugsnag/bugsnag-cocoa/issues/new)\n\n\n## Contributing\n\nAll contributors are welcome! For information on how to build, test,\nand release `bugsnag-cocoa`, see our\n[contributing guide](https://github.com/bugsnag/bugsnag-cocoa/blob/master/CONTRIBUTING.md).\n\n\n## License\n\nThe Bugsnag Cocoa library is free software released under the MIT License.\nSee [LICENSE.txt](https://github.com/bugsnag/bugsnag-cocoa/blob/master/LICENSE.txt)\nfor details.\n\n','<h1 id=\"bugsnagexceptionreporterforiosandmacos\">Bugsnag exception reporter for iOS and macOS</h1>\n<p><a href=\"http://docs.bugsnag.com/platforms/ios/\"><img src=\"https://img.shields.io/badge/ios_documentation-latest-blue.svg\" alt=\"iOS Documentation\" /></a>\n<a href=\"http://docs.bugsnag.com/platforms/osx/\"><img src=\"https://img.shields.io/badge/macos_documentation-latest-blue.svg\" alt=\"macOS Documentation\" /></a>\n<a href=\"https://travis-ci.org/bugsnag/bugsnag-cocoa\"><img src=\"https://travis-ci.org/bugsnag/bugsnag-cocoa.svg?branch=master\" alt=\"Build status\" /></a></p>\n<p>The Bugsnag crash reporter for Cocoa library automatically detects crashes and fatal signals in your iOS 6.0+ or OS X 10.8+  apps, collecting diagnostic information and immediately notifying your development team, helping you to understand and resolve issues as fast as possible. Learn more about <a href=\"https://www.bugsnag.com/platforms/ios-crash-reporting/\">iOS crash reporting with Bugsnag</a>. </p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Automatically report unhandled exceptions and crashes</li>\n<li>Report handled exceptions</li>\n<li>Log breadcrumbs which are attached to crash reports and add insight to users\' actions</li>\n<li>Attach user information and custom diagnostic data to determine how many people are affected by a crash</li>\n</ul>\n<h2 id=\"gettingstarted\">Getting started</h2>\n<h3 id=\"ios\">iOS</h3>\n<ol>\n<li><a href=\"https://bugsnag.com\">Create a Bugsnag account</a></li>\n<li>Complete the instructions in the integration guide for <a href=\"http://docs.bugsnag.com/platforms/ios/\">iOS</a></li>\n<li>Report handled exceptions using <a href=\"http://docs.bugsnag.com/platforms/ios/reporting-handled-exceptions/\"><code>[Bugsnag notify:]</code></a></li>\n<li>Customize your integration using the <a href=\"http://docs.bugsnag.com/platforms/ios/configuration-options/\">configuration options</a></li>\n</ol>\n<h3 id=\"macos\">macOS</h3>\n<ol>\n<li><a href=\"https://bugsnag.com\">Create a Bugsnag account</a></li>\n<li>Complete the instructions in the integration guide for <a href=\"http://docs.bugsnag.com/platforms/osx/\">macOS</a></li>\n<li>Report handled exceptions using <a href=\"http://docs.bugsnag.com/platforms/osx/reporting-handled-exceptions/\"><code>[Bugsnag notify:]</code></a></li>\n<li>Customize your integration using the <a href=\"http://docs.bugsnag.com/platforms/osx/configuration-options/\">configuration options</a></li>\n</ol>\n<h2 id=\"support\">Support</h2>\n<ul>\n<li>Read the <a href=\"http://docs.bugsnag.com/platforms/ios/configuration-options\">iOS</a> or <a href=\"http://docs.bugsnag.com/platforms/osx/configuration-options\">macOS</a> configuration reference</li>\n<li><a href=\"https://github.com/bugsnag/bugsnag-cocoa/issues?utf8=✓&q=is%3Aissue\">Search open and closed issues</a> for similar problems</li>\n<li><a href=\"https://github.com/bugsnag/bugsnag-cocoa/issues/new\">Report a bug or request a feature</a></li>\n</ul>\n<h2 id=\"contributing\">Contributing</h2>\n<p>All contributors are welcome! For information on how to build, test,\nand release <code>bugsnag-cocoa</code>, see our\n<a href=\"https://github.com/bugsnag/bugsnag-cocoa/blob/master/CONTRIBUTING.md\">contributing guide</a>.</p>\n<h2 id=\"license\">License</h2>\n<p>The Bugsnag Cocoa library is free software released under the MIT License.\nSee <a href=\"https://github.com/bugsnag/bugsnag-cocoa/blob/master/LICENSE.txt\">LICENSE.txt</a>\nfor details.</p>'),
	(59,'louisdh','caffe2','https://raw.githubusercontent.com/louisdh/caffe2/master/README.md','2018-11-07 12:30:34','# Caffe2\n\nCaffe2 is a lightweight, modular, and scalable deep learning framework. Building on the original [Caffe](http://caffe.berkeleyvision.org), Caffe2 is designed with expression, speed, and modularity in mind.\n\n## Questions and Feedback\n\nPlease use Github issues (https://github.com/caffe2/caffe2/issues) to ask questions, report bugs, and request new features.\n\nPlease participate in our survey (https://www.surveymonkey.com/r/caffe2). We will send you information about new releases and special developer events/webinars.\n\n## License and Citation\n\nCaffe2 is released under the [BSD 2-Clause license](https://github.com/Yangqing/caffe2/blob/master/LICENSE).\n\n### Build Status\n\n[![Travis Build Status](https://travis-ci.org/caffe2/caffe2.svg?branch=master)](https://travis-ci.org/caffe2/caffe2)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/kec4ta779stuyb83?svg=true)](https://ci.appveyor.com/project/Yangqing/caffe2)\n\nDetailed build matrix (hit refresh if you see icons not showing up due to heroku):\n\n| Target      | Status |\n|-------------|----|\n| Linux       | [![Build Linux](https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/1)](https://travis-ci.org/caffe2/caffe2) |\n| Mac (CPU)   | [![Build Mac](https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/2)](https://travis-ci.org/caffe2/caffe2) |\n| Android     | [![Build Android](https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/3)](https://travis-ci.org/caffe2/caffe2) |\n| iOS         | [![Build iOS](https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/5)](https://travis-ci.org/caffe2/caffe2) |\n| Linux + MKL | [![Build LinuxMKL](https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/6)](https://travis-ci.org/caffe2/caffe2) |\n| Windows     | [![Build status](https://ci.appveyor.com/api/projects/status/kec4ta779stuyb83?svg=true)](https://ci.appveyor.com/project/Yangqing/caffe2) |\n\n### Further Resources on [Caffe2.ai](http://caffe2.ai)\n\n* [Installation](http://caffe2.ai/docs/getting-started.html)\n* [Learn More](http://caffe2.ai/docs/learn-more.html)\n* [Upgrading to Caffe2](http://caffe2.ai/docs/caffe-migration.html)\n* [Datasets](http://caffe2.ai/docs/datasets.html)\n* [Model Zoo](http://caffe2.ai/docs/zoo.html)\n* [Tutorials](http://caffe2.ai/docs/tutorials.html)\n* [Operators Catalogue](http://caffe2.ai/docs/operators-catalogue.html)\n* [C++ API](http://caffe2.ai/doxygen-c/html/classes.html)\n* [Python API](http://caffe2.ai/doxygen-python/html/namespaces.html)\n','<h1 id=\"caffe2\">Caffe2</h1>\n<p>Caffe2 is a lightweight, modular, and scalable deep learning framework. Building on the original <a href=\"http://caffe.berkeleyvision.org\">Caffe</a>, Caffe2 is designed with expression, speed, and modularity in mind.</p>\n<h2 id=\"questionsandfeedback\">Questions and Feedback</h2>\n<p>Please use Github issues (https://github.com/caffe2/caffe2/issues) to ask questions, report bugs, and request new features.</p>\n<p>Please participate in our survey (https://www.surveymonkey.com/r/caffe2). We will send you information about new releases and special developer events/webinars.</p>\n<h2 id=\"licenseandcitation\">License and Citation</h2>\n<p>Caffe2 is released under the <a href=\"https://github.com/Yangqing/caffe2/blob/master/LICENSE\">BSD 2-Clause license</a>.</p>\n<h3 id=\"buildstatus\">Build Status</h3>\n<p><a href=\"https://travis-ci.org/caffe2/caffe2\"><img src=\"https://travis-ci.org/caffe2/caffe2.svg?branch=master\" alt=\"Travis Build Status\" /></a>\n<a href=\"https://ci.appveyor.com/project/Yangqing/caffe2\"><img src=\"https://ci.appveyor.com/api/projects/status/kec4ta779stuyb83?svg=true\" alt=\"Windows Build status\" /></a></p>\n<p>Detailed build matrix (hit refresh if you see icons not showing up due to heroku):</p>\n<p>| Target      | Status |\n|-------------|----|\n| Linux       | <a href=\"https://travis-ci.org/caffe2/caffe2\"><img src=\"https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/1\" alt=\"Build Linux\" /></a> |\n| Mac (CPU)   | <a href=\"https://travis-ci.org/caffe2/caffe2\"><img src=\"https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/2\" alt=\"Build Mac\" /></a> |\n| Android     | <a href=\"https://travis-ci.org/caffe2/caffe2\"><img src=\"https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/3\" alt=\"Build Android\" /></a> |\n| iOS         | <a href=\"https://travis-ci.org/caffe2/caffe2\"><img src=\"https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/5\" alt=\"Build iOS\" /></a> |\n| Linux + MKL | <a href=\"https://travis-ci.org/caffe2/caffe2\"><img src=\"https://travis-matrix-badges.herokuapp.com/repos/caffe2/caffe2/branches/master/6\" alt=\"Build LinuxMKL\" /></a> |\n| Windows     | <a href=\"https://ci.appveyor.com/project/Yangqing/caffe2\"><img src=\"https://ci.appveyor.com/api/projects/status/kec4ta779stuyb83?svg=true\" alt=\"Build status\" /></a> |</p>\n<h3 id=\"furtherresourcesoncaffe2aihttpcaffe2ai\">Further Resources on <a href=\"http://caffe2.ai\">Caffe2.ai</a></h3>\n<ul>\n<li><a href=\"http://caffe2.ai/docs/getting-started.html\">Installation</a></li>\n<li><a href=\"http://caffe2.ai/docs/learn-more.html\">Learn More</a></li>\n<li><a href=\"http://caffe2.ai/docs/caffe-migration.html\">Upgrading to Caffe2</a></li>\n<li><a href=\"http://caffe2.ai/docs/datasets.html\">Datasets</a></li>\n<li><a href=\"http://caffe2.ai/docs/zoo.html\">Model Zoo</a></li>\n<li><a href=\"http://caffe2.ai/docs/tutorials.html\">Tutorials</a></li>\n<li><a href=\"http://caffe2.ai/docs/operators-catalogue.html\">Operators Catalogue</a></li>\n<li><a href=\"http://caffe2.ai/doxygen-c/html/classes.html\">C++ API</a></li>\n<li><a href=\"http://caffe2.ai/doxygen-python/html/namespaces.html\">Python API</a></li>\n</ul>'),
	(60,'louisdh','Carthage','https://raw.githubusercontent.com/louisdh/Carthage/master/README.md','2018-11-07 12:30:34','![](Logo/PNG/header.png)\n\n# Carthage [![GitHub license](https://img.shields.io/badge/license-MIT-lightgrey.svg)](https://raw.githubusercontent.com/Carthage/Carthage/master/LICENSE.md) [![GitHub release](https://img.shields.io/github/release/carthage/carthage.svg)](https://github.com/Carthage/Carthage/releases)\n\nCarthage is intended to be the simplest way to add frameworks to your Cocoa application.\n\nThe basic [workflow](#adding-frameworks-to-an-application) looks something like this:\n\n1. Create a [Cartfile][] that lists the frameworks you’d like to use in your project.\n1. [Run Carthage](#adding-frameworks-to-an-application), which fetches and builds each framework you’ve listed.\n1. Drag the built `.framework` binaries into your application’s Xcode project.\n\nCarthage builds your dependencies and provides you with binary frameworks, but you retain full control over your project structure and setup. Carthage does not automatically modify your project files or your build settings.\n\n## Differences between Carthage and CocoaPods\n\n[CocoaPods](http://cocoapods.org/) is a long-standing dependency manager for Cocoa. So why was Carthage created?\n\nFirstly, CocoaPods (by default) automatically creates and updates an Xcode workspace for your application and all dependencies. Carthage builds framework binaries using `xcodebuild`, but leaves the responsibility of integrating them up to the user. CocoaPods’ approach is easier to use, while Carthage’s is flexible and unintrusive.\n\nThe goal of CocoaPods is listed in its [README](https://github.com/CocoaPods/CocoaPods/blob/1703a3464674baecf54bd7e766f4b37ed8fc43f7/README.md) as follows:\n\n> … to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem.\n\nBy contrast, Carthage has been created as a _decentralized_ dependency manager. There is no central list of projects, which reduces maintenance work and avoids any central point of failure. However, project discovery is more difficult—users must resort to GitHub’s [Trending](https://github.com/trending?l=swift) pages or similar.\n\nCocoaPods projects must also have what’s known as a [podspec](http://guides.cocoapods.org/syntax/podspec.html) file, which includes metadata about the project and specifies how it should be built. Carthage uses `xcodebuild` to build dependencies, instead of integrating them into a single workspace, it doesn’t have a similar specification file but your dependencies must include their own Xcode project that describes how to build their products.\n\nUltimately, we created Carthage because we wanted the simplest tool possible—a dependency manager that gets the job done without taking over the responsibility of Xcode, and without creating extra work for framework authors. CocoaPods offers many amazing features that Carthage will never have, at the expense of additional complexity.\n\n## Installing Carthage\n\nThere are multiple options for installing Carthage:\n\n* **Installer:** Download and run the `Carthage.pkg` file for the latest [release](https://github.com/Carthage/Carthage/releases), then follow the on-screen instructions.\n\n* **Homebrew:** You can use [Homebrew](http://brew.sh) and install the `carthage` tool on your system simply by running `brew update` and `brew install carthage`. (note: if you previously installed the binary version of Carthage, you should delete `/Library/Frameworks/CarthageKit.framework`).\n\n* **From source:** If you’d like to run the latest development version (which may be highly unstable or incompatible), simply clone the `master` branch of the repository, then run `make install`. Requires Xcode 8.2 (Swift 3.0.2).\n\n## Adding frameworks to an application\n\nOnce you have Carthage [installed](#installing-carthage), you can begin adding frameworks to your project. Note that Carthage only supports dynamic frameworks, which are **only available on iOS 8 or later** (or any version of OS X).\n\n### Getting started\n\n##### If you\'re building for OS X\n\n1. Create a [Cartfile][] that lists the frameworks you’d like to use in your project.\n1. Run `carthage update`. This will fetch dependencies into a [Carthage/Checkouts][] folder and build each one or download a pre-compiled framework.\n1. On your application targets’ “General” settings tab, in the “Embedded Binaries” section, drag and drop each framework you want to use from the [Carthage/Build][] folder on disk.\n\nAdditionally, you\'ll need to copy debug symbols for debugging and crash reporting on OS X.\n\n1. On your application target’s “Build Phases” settings tab, click the “+” icon and choose “New Copy Files Phase”.\n1. Click the “Destination” drop-down menu and select “Products Directory”.\n1. For each framework you’re using, drag and drop its corresponding dSYM file.\n\n##### If you\'re building for iOS, tvOS, or watchOS\n\n1. Create a [Cartfile][] that lists the frameworks you’d like to use in your project.\n1. Run `carthage update`. This will fetch dependencies into a [Carthage/Checkouts][] folder, then build each one or download a pre-compiled framework.\n1. On your application targets’ “General” settings tab, in the “Linked Frameworks and Libraries” section, drag and drop each framework you want to use from the [Carthage/Build][] folder on disk.\n1. On your application targets’ “Build Phases” settings tab, click the “+” icon and choose “New Run Script Phase”. Create a Run Script in which you specify your shell (ex: `bin/sh`), add the following contents to the script area below the shell:\n\n  ```sh\n  /usr/local/bin/carthage copy-frameworks\n  ```\n\n  and add the paths to the frameworks you want to use under “Input Files”, e.g.:\n\n  ```\n  $(SRCROOT)/Carthage/Build/iOS/Box.framework\n  $(SRCROOT)/Carthage/Build/iOS/Result.framework\n  $(SRCROOT)/Carthage/Build/iOS/ReactiveCocoa.framework\n  ```\n  This script works around an [App Store submission bug](http://www.openradar.me/radar?id=6409498411401216) triggered by universal binaries and ensures that necessary bitcode-related files and dSYMs are copied when archiving.\n\nWith the debug information copied into the built products directory, Xcode will be able to symbolicate the stack trace whenever you stop at a breakpoint. This will also enable you to step through third-party code in the debugger.\n\nWhen archiving your application for submission to the App Store or TestFlight, Xcode will also copy these files into the dSYMs subdirectory of your application’s `.xcarchive` bundle.\n\n##### For both platforms\n\nAlong the way, Carthage will have created some [build artifacts][Artifacts]. The most important of these is the [Cartfile.resolved][] file, which lists the versions that were actually built for each framework. **Make sure to commit your [Cartfile.resolved][]**, because anyone else using the project will need that file to build the same framework versions.\n\n##### Swift binary framework download compatibility\n\nCarthage will check to make sure that downloaded Swift (and mixed Objective-C/Swift) frameworks were built with the same version of Swift that is in use locally. If there is a version mismatch, Carthage will proceed to build the framework from source. If the framework cannot be built from source, Carthage will fail.\n\n### Running a project that uses Carthage\n\nAfter you’ve finished the above steps and pushed your changes, other users of the project only need to fetch the repository and run `carthage bootstrap` to get started with the frameworks you’ve added.\n\n### Adding frameworks to unit tests or a framework\n\nUsing Carthage for the dependencies of any arbitrary target is fairly similar to [using Carthage for an application](#adding-frameworks-to-an-application). The main difference lies in how the frameworks are actually set up and linked in Xcode.\n\nBecause unit test targets are missing the “Linked Frameworks and Libraries” section in their “General” settings tab, you must instead drag the [built frameworks][Carthage/Build] to the “Link Binaries With Libraries” build phase.\n\nIn the Test target under the \"Build Settings\" tab, add `@loader_path/Frameworks` to the \"Runpath Search Paths\" if it isn\'t already present.\n\nIn rare cases, you may want to also copy each dependency into the build product (e.g., to embed dependencies within the outer framework, or make sure dependencies are present in a test bundle). To do this, create a new “Copy Files” build phase with the “Frameworks” destination, then add the framework reference there as well.\n\n### Upgrading frameworks\n\nIf you’ve modified your [Cartfile][], or you want to update to the newest versions of each framework (subject to the requirements you’ve specified), simply run the `carthage update` command again.\n\nIf you only want to update one , or specific, dependencies, pass them as a space-separated list to the `update` command. e.g.\n\n```\ncarthage update Box\n```\n\nor \n\n```\ncarthage update Box Result\n```\n\n### Nested dependencies\n\nIf the framework you want to add to your project has dependencies explicitly listed in a [Cartfile][], Carthage will automatically retrieve them for you. You will then have to **drag them yourself into your project** from the [Carthage/Build] folder.\n\nIf the embedded framework in your project has dependencies to other frameworks you must  **link them to application target** (even if application target does not have dependency to that frameworks and never uses them).\n\n### Using submodules for dependencies\n\nBy default, Carthage will directly [check out][Carthage/Checkouts] dependencies’ source files into your project folder, leaving you to commit or ignore them as you choose. If you’d like to have dependencies available as Git submodules instead (perhaps so you can commit and push changes within them), you can run `carthage update` or `carthage checkout` with the `--use-submodules` flag.\n\nWhen run this way, Carthage will write to your repository’s `.gitmodules` and `.git/config` files, and automatically update the submodules when the dependencies’ versions change.\n\n### Automatically rebuilding dependencies\n\nIf you want to work on your dependencies during development, and want them to be automatically rebuilt when you build your parent project, you can add a Run Script build phase that invokes Carthage like so:\n\n```sh\n/usr/local/bin/carthage build --platform \"$PLATFORM_NAME\" --project-directory \"$SRCROOT\"\n```\n\nNote that you should be [using submodules](#using-submodules-for-dependencies) before doing this, because plain checkouts [should not be modified][Carthage/Checkouts] directly.\n\n### Caching builds\n\nBy default Carthage will rebuild a dependency regardless of whether it\'s the same resolved version as before. Passing the `--cache-builds` will cause carthage to avoid rebuilding a dependency if it can. See information on [version files][VersionFile] for details on how carthage performs this caching. \n\n### Bash/Zsh/Fish completion\n\nAuto completion of Carthage commands and options are available as documented in [Bash/Zsh/Fish Completion][Bash/Zsh/Fish Completion].\n\n## Supporting Carthage for your framework\n\n**Carthage only officially supports dynamic frameworks**. Dynamic frameworks can be used on any version of OS X, but only on **iOS 8 or later**.\n\nBecause Carthage has no centralized package list, and no project specification format, **most frameworks should build automatically**.\n\nThe specific requirements of any framework project are listed below.\n\n### Share your Xcode schemes\n\nCarthage will only build Xcode schemes that are shared from your `.xcodeproj`. You can see if all of your intended schemes build successfully by running `carthage build --no-skip-current`, then checking the [Carthage/Build][] folder.\n\nIf an important scheme is not built when you run that command, open Xcode and make sure that the [scheme is marked as “Shared,”](https://developer.apple.com/library/content/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/ConfigureBots.html#//apple_ref/doc/uid/TP40013292-CH9-SW3) so Carthage can discover it.\n\n\n### Resolve build failures\n\nIf you encounter build failures in `carthage build --no-skip-current`, try running `xcodebuild -scheme SCHEME -workspace WORKSPACE build` or `xcodebuild -scheme SCHEME -project PROJECT build` (with the actual values) and see if the same failure occurs there. This should hopefully yield enough information to resolve the problem.\n\nIf you have multiple versions of the Apple developer tools installed (an Xcode beta, for example), use `xcode-select` to change which version Carthage uses.\n\nIf you’re still not able to build your framework with Carthage, please [open an issue](https://github.com/Carthage/Carthage/issues/new) and we’d be happy to help!\n\n### Tag stable releases\n\nCarthage determines which versions of your framework are available by searching through the tags published on the repository, and trying to interpret each tag name as a [semantic version](http://semver.org/). For example, in the tag `v1.2`, the semantic version is 1.2.0.\n\nTags without any version number, or with any characters following the version number (e.g., `1.2-alpha-1`) are currently unsupported, and will be ignored.\n\n### Archive prebuilt frameworks into one zip file\n\nCarthage can automatically use prebuilt frameworks, instead of building from scratch, if they are attached to a [GitHub Release](https://help.github.com/articles/about-releases/) on your project’s repository or via a binary project definition file.\n\nTo offer prebuilt frameworks for a specific tag, the binaries for _all_ supported platforms should be zipped up together into _one_ archive, and that archive should be attached to a published Release corresponding to that tag. The attachment should include `.framework` in its name (e.g., `ReactiveCocoa.framework.zip`), to indicate to Carthage that it contains binaries.\n\nYou can perform the archiving operation above with the `carthage archive` command as follows:\n\n```sh\ncarthage build --no-skip-current\ncarthage archive YourFrameworkName\n```    \n\nDraft Releases will be automatically ignored, even if they correspond to the desired tag.\n\n#### Use travis-ci to upload your tagged prebuild frameworks\n\nIt is possible to use travis-ci in order to build and upload your tagged releases.\n\n1. [Install travis CLI](https://github.com/travis-ci/travis.rb#installation) with `gem install travis`\n1. [Setup](https://docs.travis-ci.com/user/getting-started/) travis-ci for your repository (Steps 1 and 2)\n1. Create `.travis.yml` file at the root of your repository based on that template. Set `FRAMEWORK_NAME` to the correct value.\n\n	Replace PROJECT_PLACEHOLDER and SCHEME_PLACEHOLDER\n	\n	If you are using a *workspace* instead of a *project* remove the xcode_project line and uncomment the xcode_workspace line.\n	\n	The project should be in the format: MyProject.xcodeproj\n	\n	The workspace should be in the format: MyWorkspace.xcworkspace\n	\n	Feel free to update the `xcode_sdk` value to another SDK, note that testing on iphoneos SDK would require you to upload a code signing identity\n\n	For more informations you can visit [travis docs for objective-c projects](https://docs.travis-ci.com/user/languages/objective-c)\n	\n	```YAML\n	language: objective-c\n	osx_image: xcode7.3\n	xcode_project: <PROJECT_PLACEHOLDER>\n	# xcode_workspace: <WORKSPACE_PLACEHOLDER>\n	xcode_scheme: <SCHEME_PLACEHOLDER>\n	xcode_sdk: iphonesimulator9.3\n	env:\n	  global: \n	    - FRAMEWORK_NAME=<THIS_IS_A_PLACEHOLDER_REPLACE_ME>\n	before_install:\n	  - brew update\n	  - brew outdated carthage || brew upgrade carthage\n	before_script:\n	  # bootstrap the dependencies for the project\n	  # you can remove if you don\'t have dependencies\n	  - carthage bootstrap	\n	before_deploy:\n	  - carthage build --no-skip-current\n	  - carthage archive $FRAMEWORK_NAME\n	```\n1. Run `travis setup releases`, follow documentation [here](https://docs.travis-ci.com/user/deployment/releases/)\n\n	This command will encode your github credentials into the .travis.yml file in order to let travis upload the release to github.com\n	When prompted for the file to upload, enter $FRAMEWORK_NAME.framework.zip\n	\n1. Update the deploy section to run on tags:\n	\n	In `.travis.yml` locate: \n	\n	```YAML\n	on: \n	  repo: repo/repo\n	```\n		\n	And add `tags: true` and `skip_cleanup: true`:\n		\n	```YAML\n	skip_cleanup: true\n	on:\n	  repo: repo/repo\n	  tags: true\n	```\n	\n	That will let travis know to create a deployment when a new tag is pushed and prevent travis to cleanup the generated zip file\n\n### Declare your compatibility\n\nWant to advertise that your project can be used with Carthage? You can add a compatibility badge:\n\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n\n… to your README, by simply inserting the following Markdown:\n\n```markdown\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n```\n## Known issues\n\n##### DWARFs symbol problem\nPre-built framework cannot be debugged using step execution on other machine than on which the framework was built. Simply `carthage bootstrap/build/update --no-use-binaries` should fix this, but for more automated workaround, see [#924](https://github.com/Carthage/Carthage/issues/924). Dupe [rdar://23551273](http://www.openradar.me/23551273) if you want Apple to fix the root cause of this problem.\n\n## CarthageKit\n\nMost of the functionality of the `carthage` command line tool is actually encapsulated in a framework named CarthageKit.\n\nIf you’re interested in using Carthage as part of another tool, or perhaps extending the functionality of Carthage, take a look at the [CarthageKit][] source code to see if the API fits your needs.\n\n## License\n\nCarthage is released under the [MIT License](LICENSE.md).\n\nHeader backdrop photo is released under the [CC BY-NC-SA 2.0](https://creativecommons.org/licenses/by-nc-sa/2.0/) license. Original photo by [Richard Mortel](https://www.flickr.com/photos/prof_richard/).\n\n[Artifacts]: Documentation/Artifacts.md\n[Cartfile]: Documentation/Artifacts.md#cartfile\n[Cartfile.resolved]: Documentation/Artifacts.md#cartfileresolved\n[Carthage/Build]: Documentation/Artifacts.md#carthagebuild\n[Carthage/Checkouts]: Documentation/Artifacts.md#carthagecheckouts\n[Bash/Zsh/Fish Completion]: Documentation/BashZshFishCompletion.md\n[CarthageKit]: Source/CarthageKit\n[VersionFile]: Documentation/VersionFile.md\n','<p><img src=\"Logo/PNG/header.png\" alt=\"\" /></p>\n<h1 id=\"carthagegithublicensehttpsimgshieldsiobadgelicensemitlightgreysvghttpsrawgithubusercontentcomcarthagecarthagemasterlicensemdgithubreleasehttpsimgshieldsiogithubreleasecarthagecarthagesvghttpsgithubcomcarthagecarthagereleases\">Carthage <a href=\"https://raw.githubusercontent.com/Carthage/Carthage/master/LICENSE.md\"><img src=\"https://img.shields.io/badge/license-MIT-lightgrey.svg\" alt=\"GitHub license\" /></a> <a href=\"https://github.com/Carthage/Carthage/releases\"><img src=\"https://img.shields.io/github/release/carthage/carthage.svg\" alt=\"GitHub release\" /></a></h1>\n<p>Carthage is intended to be the simplest way to add frameworks to your Cocoa application.</p>\n<p>The basic <a href=\"#adding-frameworks-to-an-application\">workflow</a> looks something like this:</p>\n<ol>\n<li>Create a <a href=\"Documentation/Artifacts.md#cartfile\">Cartfile</a> that lists the frameworks you’d like to use in your project.</li>\n<li><a href=\"#adding-frameworks-to-an-application\">Run Carthage</a>, which fetches and builds each framework you’ve listed.</li>\n<li>Drag the built <code>.framework</code> binaries into your application’s Xcode project.</li>\n</ol>\n<p>Carthage builds your dependencies and provides you with binary frameworks, but you retain full control over your project structure and setup. Carthage does not automatically modify your project files or your build settings.</p>\n<h2 id=\"differencesbetweencarthageandcocoapods\">Differences between Carthage and CocoaPods</h2>\n<p><a href=\"http://cocoapods.org/\">CocoaPods</a> is a long-standing dependency manager for Cocoa. So why was Carthage created?</p>\n<p>Firstly, CocoaPods (by default) automatically creates and updates an Xcode workspace for your application and all dependencies. Carthage builds framework binaries using <code>xcodebuild</code>, but leaves the responsibility of integrating them up to the user. CocoaPods’ approach is easier to use, while Carthage’s is flexible and unintrusive.</p>\n<p>The goal of CocoaPods is listed in its <a href=\"https://github.com/CocoaPods/CocoaPods/blob/1703a3464674baecf54bd7e766f4b37ed8fc43f7/README.md\">README</a> as follows:</p>\n<blockquote>\n  <p>… to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem.</p>\n</blockquote>\n<p>By contrast, Carthage has been created as a <em>decentralized</em> dependency manager. There is no central list of projects, which reduces maintenance work and avoids any central point of failure. However, project discovery is more difficult—users must resort to GitHub’s <a href=\"https://github.com/trending?l=swift\">Trending</a> pages or similar.</p>\n<p>CocoaPods projects must also have what’s known as a <a href=\"http://guides.cocoapods.org/syntax/podspec.html\">podspec</a> file, which includes metadata about the project and specifies how it should be built. Carthage uses <code>xcodebuild</code> to build dependencies, instead of integrating them into a single workspace, it doesn’t have a similar specification file but your dependencies must include their own Xcode project that describes how to build their products.</p>\n<p>Ultimately, we created Carthage because we wanted the simplest tool possible—a dependency manager that gets the job done without taking over the responsibility of Xcode, and without creating extra work for framework authors. CocoaPods offers many amazing features that Carthage will never have, at the expense of additional complexity.</p>\n<h2 id=\"installingcarthage\">Installing Carthage</h2>\n<p>There are multiple options for installing Carthage:</p>\n<ul>\n<li><p><strong>Installer:</strong> Download and run the <code>Carthage.pkg</code> file for the latest <a href=\"https://github.com/Carthage/Carthage/releases\">release</a>, then follow the on-screen instructions.</p></li>\n<li><p><strong>Homebrew:</strong> You can use <a href=\"http://brew.sh\">Homebrew</a> and install the <code>carthage</code> tool on your system simply by running <code>brew update</code> and <code>brew install carthage</code>. (note: if you previously installed the binary version of Carthage, you should delete <code>/Library/Frameworks/CarthageKit.framework</code>).</p></li>\n<li><p><strong>From source:</strong> If you’d like to run the latest development version (which may be highly unstable or incompatible), simply clone the <code>master</code> branch of the repository, then run <code>make install</code>. Requires Xcode 8.2 (Swift 3.0.2).</p></li>\n</ul>\n<h2 id=\"addingframeworkstoanapplication\">Adding frameworks to an application</h2>\n<p>Once you have Carthage <a href=\"#installing-carthage\">installed</a>, you can begin adding frameworks to your project. Note that Carthage only supports dynamic frameworks, which are <strong>only available on iOS 8 or later</strong> (or any version of OS X).</p>\n<h3 id=\"gettingstarted\">Getting started</h3>\n<h5 id=\"ifyourebuildingforosx\">If you\'re building for OS X</h5>\n<ol>\n<li>Create a <a href=\"Documentation/Artifacts.md#cartfile\">Cartfile</a> that lists the frameworks you’d like to use in your project.</li>\n<li>Run <code>carthage update</code>. This will fetch dependencies into a <a href=\"Documentation/Artifacts.md#carthagecheckouts\">Carthage/Checkouts</a> folder and build each one or download a pre-compiled framework.</li>\n<li>On your application targets’ “General” settings tab, in the “Embedded Binaries” section, drag and drop each framework you want to use from the <a href=\"Documentation/Artifacts.md#carthagebuild\">Carthage/Build</a> folder on disk.</li>\n</ol>\n<p>Additionally, you\'ll need to copy debug symbols for debugging and crash reporting on OS X.</p>\n<ol>\n<li>On your application target’s “Build Phases” settings tab, click the “+” icon and choose “New Copy Files Phase”.</li>\n<li>Click the “Destination” drop-down menu and select “Products Directory”.</li>\n<li>For each framework you’re using, drag and drop its corresponding dSYM file.</li>\n</ol>\n<h5 id=\"ifyourebuildingforiostvosorwatchos\">If you\'re building for iOS, tvOS, or watchOS</h5>\n<ol>\n<li>Create a <a href=\"Documentation/Artifacts.md#cartfile\">Cartfile</a> that lists the frameworks you’d like to use in your project.</li>\n<li>Run <code>carthage update</code>. This will fetch dependencies into a <a href=\"Documentation/Artifacts.md#carthagecheckouts\">Carthage/Checkouts</a> folder, then build each one or download a pre-compiled framework.</li>\n<li>On your application targets’ “General” settings tab, in the “Linked Frameworks and Libraries” section, drag and drop each framework you want to use from the <a href=\"Documentation/Artifacts.md#carthagebuild\">Carthage/Build</a> folder on disk.</li>\n<li>On your application targets’ “Build Phases” settings tab, click the “+” icon and choose “New Run Script Phase”. Create a Run Script in which you specify your shell (ex: <code>bin/sh</code>), add the following contents to the script area below the shell:</li>\n</ol>\n<pre><code class=\"sh language-sh\">  /usr/local/bin/carthage copy-frameworks\n</code></pre>\n<p>and add the paths to the frameworks you want to use under “Input Files”, e.g.:</p>\n<pre><code>  $(SRCROOT)/Carthage/Build/iOS/Box.framework\n  $(SRCROOT)/Carthage/Build/iOS/Result.framework\n  $(SRCROOT)/Carthage/Build/iOS/ReactiveCocoa.framework\n</code></pre>\n<p>This script works around an <a href=\"http://www.openradar.me/radar?id=6409498411401216\">App Store submission bug</a> triggered by universal binaries and ensures that necessary bitcode-related files and dSYMs are copied when archiving.</p>\n<p>With the debug information copied into the built products directory, Xcode will be able to symbolicate the stack trace whenever you stop at a breakpoint. This will also enable you to step through third-party code in the debugger.</p>\n<p>When archiving your application for submission to the App Store or TestFlight, Xcode will also copy these files into the dSYMs subdirectory of your application’s <code>.xcarchive</code> bundle.</p>\n<h5 id=\"forbothplatforms\">For both platforms</h5>\n<p>Along the way, Carthage will have created some <a href=\"Documentation/Artifacts.md\">build artifacts</a>. The most important of these is the <a href=\"Documentation/Artifacts.md#cartfileresolved\">Cartfile.resolved</a> file, which lists the versions that were actually built for each framework. <strong>Make sure to commit your <a href=\"Documentation/Artifacts.md#cartfileresolved\">Cartfile.resolved</a></strong>, because anyone else using the project will need that file to build the same framework versions.</p>\n<h5 id=\"swiftbinaryframeworkdownloadcompatibility\">Swift binary framework download compatibility</h5>\n<p>Carthage will check to make sure that downloaded Swift (and mixed Objective-C/Swift) frameworks were built with the same version of Swift that is in use locally. If there is a version mismatch, Carthage will proceed to build the framework from source. If the framework cannot be built from source, Carthage will fail.</p>\n<h3 id=\"runningaprojectthatusescarthage\">Running a project that uses Carthage</h3>\n<p>After you’ve finished the above steps and pushed your changes, other users of the project only need to fetch the repository and run <code>carthage bootstrap</code> to get started with the frameworks you’ve added.</p>\n<h3 id=\"addingframeworkstounittestsoraframework\">Adding frameworks to unit tests or a framework</h3>\n<p>Using Carthage for the dependencies of any arbitrary target is fairly similar to <a href=\"#adding-frameworks-to-an-application\">using Carthage for an application</a>. The main difference lies in how the frameworks are actually set up and linked in Xcode.</p>\n<p>Because unit test targets are missing the “Linked Frameworks and Libraries” section in their “General” settings tab, you must instead drag the <a href=\"Documentation/Artifacts.md#carthagebuild\">built frameworks</a> to the “Link Binaries With Libraries” build phase.</p>\n<p>In the Test target under the \"Build Settings\" tab, add <code>@loader_path/Frameworks</code> to the \"Runpath Search Paths\" if it isn\'t already present.</p>\n<p>In rare cases, you may want to also copy each dependency into the build product (e.g., to embed dependencies within the outer framework, or make sure dependencies are present in a test bundle). To do this, create a new “Copy Files” build phase with the “Frameworks” destination, then add the framework reference there as well.</p>\n<h3 id=\"upgradingframeworks\">Upgrading frameworks</h3>\n<p>If you’ve modified your <a href=\"Documentation/Artifacts.md#cartfile\">Cartfile</a>, or you want to update to the newest versions of each framework (subject to the requirements you’ve specified), simply run the <code>carthage update</code> command again.</p>\n<p>If you only want to update one , or specific, dependencies, pass them as a space-separated list to the <code>update</code> command. e.g.</p>\n<pre><code>carthage update Box\n</code></pre>\n<p>or </p>\n<pre><code>carthage update Box Result\n</code></pre>\n<h3 id=\"nesteddependencies\">Nested dependencies</h3>\n<p>If the framework you want to add to your project has dependencies explicitly listed in a <a href=\"Documentation/Artifacts.md#cartfile\">Cartfile</a>, Carthage will automatically retrieve them for you. You will then have to <strong>drag them yourself into your project</strong> from the <a href=\"Documentation/Artifacts.md#carthagebuild\">Carthage/Build</a> folder.</p>\n<p>If the embedded framework in your project has dependencies to other frameworks you must  <strong>link them to application target</strong> (even if application target does not have dependency to that frameworks and never uses them).</p>\n<h3 id=\"usingsubmodulesfordependencies\">Using submodules for dependencies</h3>\n<p>By default, Carthage will directly <a href=\"Documentation/Artifacts.md#carthagecheckouts\">check out</a> dependencies’ source files into your project folder, leaving you to commit or ignore them as you choose. If you’d like to have dependencies available as Git submodules instead (perhaps so you can commit and push changes within them), you can run <code>carthage update</code> or <code>carthage checkout</code> with the <code>--use-submodules</code> flag.</p>\n<p>When run this way, Carthage will write to your repository’s <code>.gitmodules</code> and <code>.git/config</code> files, and automatically update the submodules when the dependencies’ versions change.</p>\n<h3 id=\"automaticallyrebuildingdependencies\">Automatically rebuilding dependencies</h3>\n<p>If you want to work on your dependencies during development, and want them to be automatically rebuilt when you build your parent project, you can add a Run Script build phase that invokes Carthage like so:</p>\n<pre><code class=\"sh language-sh\">/usr/local/bin/carthage build --platform \"$PLATFORM_NAME\" --project-directory \"$SRCROOT\"\n</code></pre>\n<p>Note that you should be <a href=\"#using-submodules-for-dependencies\">using submodules</a> before doing this, because plain checkouts <a href=\"Documentation/Artifacts.md#carthagecheckouts\">should not be modified</a> directly.</p>\n<h3 id=\"cachingbuilds\">Caching builds</h3>\n<p>By default Carthage will rebuild a dependency regardless of whether it\'s the same resolved version as before. Passing the <code>--cache-builds</code> will cause carthage to avoid rebuilding a dependency if it can. See information on <a href=\"Documentation/VersionFile.md\">version files</a> for details on how carthage performs this caching. </p>\n<h3 id=\"bashzshfishcompletion\">Bash/Zsh/Fish completion</h3>\n<p>Auto completion of Carthage commands and options are available as documented in <a href=\"Documentation/BashZshFishCompletion.md\">Bash/Zsh/Fish Completion</a>.</p>\n<h2 id=\"supportingcarthageforyourframework\">Supporting Carthage for your framework</h2>\n<p><strong>Carthage only officially supports dynamic frameworks</strong>. Dynamic frameworks can be used on any version of OS X, but only on <strong>iOS 8 or later</strong>.</p>\n<p>Because Carthage has no centralized package list, and no project specification format, <strong>most frameworks should build automatically</strong>.</p>\n<p>The specific requirements of any framework project are listed below.</p>\n<h3 id=\"shareyourxcodeschemes\">Share your Xcode schemes</h3>\n<p>Carthage will only build Xcode schemes that are shared from your <code>.xcodeproj</code>. You can see if all of your intended schemes build successfully by running <code>carthage build --no-skip-current</code>, then checking the <a href=\"Documentation/Artifacts.md#carthagebuild\">Carthage/Build</a> folder.</p>\n<p>If an important scheme is not built when you run that command, open Xcode and make sure that the <a href=\"https://developer.apple.com/library/content/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/ConfigureBots.html#//apple_ref/doc/uid/TP40013292-CH9-SW3\">scheme is marked as “Shared,”</a> so Carthage can discover it.</p>\n<h3 id=\"resolvebuildfailures\">Resolve build failures</h3>\n<p>If you encounter build failures in <code>carthage build --no-skip-current</code>, try running <code>xcodebuild -scheme SCHEME -workspace WORKSPACE build</code> or <code>xcodebuild -scheme SCHEME -project PROJECT build</code> (with the actual values) and see if the same failure occurs there. This should hopefully yield enough information to resolve the problem.</p>\n<p>If you have multiple versions of the Apple developer tools installed (an Xcode beta, for example), use <code>xcode-select</code> to change which version Carthage uses.</p>\n<p>If you’re still not able to build your framework with Carthage, please <a href=\"https://github.com/Carthage/Carthage/issues/new\">open an issue</a> and we’d be happy to help!</p>\n<h3 id=\"tagstablereleases\">Tag stable releases</h3>\n<p>Carthage determines which versions of your framework are available by searching through the tags published on the repository, and trying to interpret each tag name as a <a href=\"http://semver.org/\">semantic version</a>. For example, in the tag <code>v1.2</code>, the semantic version is 1.2.0.</p>\n<p>Tags without any version number, or with any characters following the version number (e.g., <code>1.2-alpha-1</code>) are currently unsupported, and will be ignored.</p>\n<h3 id=\"archiveprebuiltframeworksintoonezipfile\">Archive prebuilt frameworks into one zip file</h3>\n<p>Carthage can automatically use prebuilt frameworks, instead of building from scratch, if they are attached to a <a href=\"https://help.github.com/articles/about-releases/\">GitHub Release</a> on your project’s repository or via a binary project definition file.</p>\n<p>To offer prebuilt frameworks for a specific tag, the binaries for <em>all</em> supported platforms should be zipped up together into <em>one</em> archive, and that archive should be attached to a published Release corresponding to that tag. The attachment should include <code>.framework</code> in its name (e.g., <code>ReactiveCocoa.framework.zip</code>), to indicate to Carthage that it contains binaries.</p>\n<p>You can perform the archiving operation above with the <code>carthage archive</code> command as follows:</p>\n<pre><code class=\"sh language-sh\">carthage build --no-skip-current\ncarthage archive YourFrameworkName\n</code></pre>\n<pre><code>\n</code></pre>\n<p>Draft Releases will be automatically ignored, even if they correspond to the desired tag.</p>\n<h4 id=\"usetraviscitouploadyourtaggedprebuildframeworks\">Use travis-ci to upload your tagged prebuild frameworks</h4>\n<p>It is possible to use travis-ci in order to build and upload your tagged releases.</p>\n<ol>\n<li><p><a href=\"https://github.com/travis-ci/travis.rb#installation\">Install travis CLI</a> with <code>gem install travis</code></p></li>\n<li><p><a href=\"https://docs.travis-ci.com/user/getting-started/\">Setup</a> travis-ci for your repository (Steps 1 and 2)</p></li>\n<li><p>Create <code>.travis.yml</code> file at the root of your repository based on that template. Set <code>FRAMEWORK_NAME</code> to the correct value.</p>\n<p>Replace PROJECT<em>PLACEHOLDER and SCHEME</em>PLACEHOLDER</p>\n<p>If you are using a <em>workspace</em> instead of a <em>project</em> remove the xcode<em>project line and uncomment the xcode</em>workspace line.</p>\n<p>The project should be in the format: MyProject.xcodeproj</p>\n<p>The workspace should be in the format: MyWorkspace.xcworkspace</p>\n<p>Feel free to update the <code>xcode_sdk</code> value to another SDK, note that testing on iphoneos SDK would require you to upload a code signing identity</p>\n<p>For more informations you can visit <a href=\"https://docs.travis-ci.com/user/languages/objective-c\">travis docs for objective-c projects</a></p>\n<pre><code class=\"YAML language-YAML\">language: objective-c\nosx_image: xcode7.3\nxcode_project: &lt;PROJECT_PLACEHOLDER&gt;\n# xcode_workspace: &lt;WORKSPACE_PLACEHOLDER&gt;\nxcode_scheme: &lt;SCHEME_PLACEHOLDER&gt;\nxcode_sdk: iphonesimulator9.3\nenv:\n  global: \n    - FRAMEWORK_NAME=&lt;THIS_IS_A_PLACEHOLDER_REPLACE_ME&gt;\nbefore_install:\n  - brew update\n  - brew outdated carthage || brew upgrade carthage\nbefore_script:\n  # bootstrap the dependencies for the project\n  # you can remove if you don\'t have dependencies\n  - carthage bootstrap  \nbefore_deploy:\n  - carthage build --no-skip-current\n  - carthage archive $FRAMEWORK_NAME\n</code></pre></li>\n<li><p>Run <code>travis setup releases</code>, follow documentation <a href=\"https://docs.travis-ci.com/user/deployment/releases/\">here</a></p>\n<p>This command will encode your github credentials into the .travis.yml file in order to let travis upload the release to github.com\nWhen prompted for the file to upload, enter $FRAMEWORK_NAME.framework.zip</p></li>\n<li><p>Update the deploy section to run on tags:</p>\n<p>In <code>.travis.yml</code> locate: </p>\n<pre><code class=\"YAML language-YAML\">on: \n  repo: repo/repo\n</code></pre>\n<p>And add <code>tags: true</code> and <code>skip_cleanup: true</code>:</p>\n<pre><code class=\"YAML language-YAML\">skip_cleanup: true\non:\n  repo: repo/repo\n  tags: true\n</code></pre>\n<p>That will let travis know to create a deployment when a new tag is pushed and prevent travis to cleanup the generated zip file</p></li>\n</ol>\n<h3 id=\"declareyourcompatibility\">Declare your compatibility</h3>\n<p>Want to advertise that your project can be used with Carthage? You can add a compatibility badge:</p>\n<p><a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage compatible\" /></a></p>\n<p>… to your README, by simply inserting the following Markdown:</p>\n<pre><code class=\"markdown language-markdown\">[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n</code></pre>\n<h2 id=\"knownissues\">Known issues</h2>\n<h5 id=\"dwarfssymbolproblem\">DWARFs symbol problem</h5>\n<p>Pre-built framework cannot be debugged using step execution on other machine than on which the framework was built. Simply <code>carthage bootstrap/build/update --no-use-binaries</code> should fix this, but for more automated workaround, see <a href=\"https://github.com/Carthage/Carthage/issues/924\">#924</a>. Dupe <a href=\"http://www.openradar.me/23551273\">rdar://23551273</a> if you want Apple to fix the root cause of this problem.</p>\n<h2 id=\"carthagekit\">CarthageKit</h2>\n<p>Most of the functionality of the <code>carthage</code> command line tool is actually encapsulated in a framework named CarthageKit.</p>\n<p>If you’re interested in using Carthage as part of another tool, or perhaps extending the functionality of Carthage, take a look at the <a href=\"Source/CarthageKit\">CarthageKit</a> source code to see if the API fits your needs.</p>\n<h2 id=\"license\">License</h2>\n<p>Carthage is released under the <a href=\"LICENSE.md\">MIT License</a>.</p>\n<p>Header backdrop photo is released under the <a href=\"https://creativecommons.org/licenses/by-nc-sa/2.0/\">CC BY-NC-SA 2.0</a> license. Original photo by <a href=\"https://www.flickr.com/photos/prof_richard/\">Richard Mortel</a>.</p>'),
	(61,'louisdh','CocoaPods','https://raw.githubusercontent.com/louisdh/CocoaPods/master/README.md','2018-11-07 12:30:34','![CocoaPods Logo](https://raw.github.com/CocoaPods/shared_resources/master/assets/cocoapods-banner-readme.png)\n\n### CocoaPods: The Cocoa dependency manager\n\n[![Build Status](http://img.shields.io/travis/CocoaPods/CocoaPods/master.svg?style=flat)](https://travis-ci.org/CocoaPods/CocoaPods)\n[![Gem Version](http://img.shields.io/gem/v/cocoapods.svg?style=flat)](http://badge.fury.io/rb/cocoapods)\n[![Code Climate](http://img.shields.io/codeclimate/github/CocoaPods/CocoaPods.svg?style=flat)](https://codeclimate.com/github/CocoaPods/CocoaPods)\n\nCocoaPods manages dependencies for your Xcode projects.\n\nYou specify the dependencies for your project in a simple text file: your `Podfile`. \nCocoaPods recursively resolves dependencies between libraries, fetches \nsource code for all dependencies, and creates and maintains an Xcode \nworkspace to build your project.\n\nInstalling and updating CocoaPods is very easy. Don\'t miss the [Installation\nguide](http://guides.cocoapods.org/using/getting-started.html#installation) and the\n[Getting Started guide](https://guides.cocoapods.org/using/getting-started.html).\n\n## Project Goals\n\nCocoaPods aims to improve the engagement with, and discoverability \nof, third party open-source Cocoa libraries. These\nproject goals influence and drive the design of CocoaPods:\n\n- Create and share libraries, and use them in your own projects,\n  without creating extra work for library authors. Integrate\n  non-CocoaPods libraries and hack on your own fork of any\n  CocoaPods library with a simple transparent `Podspec` standard.\n- Allow library authors to structure their libraries however they like.\n- Save time for library authors by automating a lot of Xcode work not \n  related to their libraries\' functionality.\n- Support any source management system. (Currently supported are `git`, \n  `svn`, `mercurial`, `bazaar`, and various types of archives downloaded over HTTP.)\n- Promote a culture of distributed collaboration on pods, but also provide\n  features only possible with a centralised solution to foster a community.\n- Build tools on top of the core Cocoa development system, including those \n  typically deployed to other operating systems, such as web-services.\n- Provide opinionated and automated integration, but make it completely\n  optional. You may manually integrate your CocoaPods dependencies\n  into your Xcode project as you see fit, with or without a workspace.\n- Solve everyday problems for Cocoa and Xcode developers.\n\n## Sponsors\n\nLovingly sponsored by a collection of companies, see the footer of [CocoaPods.org](https://cocoapods.org) for an up-to-date list. \n\n## Collaborate\n\nAll CocoaPods development happens on GitHub. Contributions make for good karma and\nwe [welcome new](https://blog.cocoapods.org/starting-open-source/) contributors with joy. We take contributors seriously, and thus have a \ncontributor [code of conduct](CODE_OF_CONDUCT.md).\n\n## Links\n\n| Link | Description |\n| :----- | :------ |\n[CocoaPods.org](https://cocoapods.org/) | Homepage and search for Pods.\n[@CocoaPods](https://twitter.com/CocoaPods) | Follow CocoaPods on Twitter to stay up to date.\n[Blog](https://blog.cocoapods.org) | The CocoaPods blog.\n[Mailing List](http://groups.google.com/group/cocoapods) | Feel free to ask any kind of question.\n[Guides](https://guides.cocoapods.org) | Everything you want to know about CocoaPods.\n[Changelog](https://github.com/CocoaPods/CocoaPods/blob/master/CHANGELOG.md) | See the changes introduced in each CocoaPods version.\n[New Pods RSS](https://feeds.cocoapods.org/new-pods.rss) | Don\'t miss any new Pods.\n[Code of Conduct](CODE_OF_CONDUCT.md) | Find out the standards we hold ourselves to.\n\n## Projects\n\nCocoaPods is composed of the following projects:\n\n| Status | Project | Description | Info |\n| :----- | :------ | :--- | :--- |\n| [![Build Status](http://img.shields.io/travis/CocoaPods/CocoaPods/master.svg?style=flat)](http://travis-ci.org/CocoaPods/CocoaPods) | [CocoaPods](https://github.com/CocoaPods/CocoaPods) | The CocoaPods command line tool. | [guides](https://guides.cocoapods.org)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/Core/master.svg?style=flat)](http://travis-ci.org/CocoaPods/Core) | [CocoaPods Core](https://github.com/CocoaPods/Core) | Support for working with specifications and podfiles. | [docs](http://docs.cocoapods.org/cocoapods_core)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/cocoapods-downloader/master.svg?style=flat)](http://travis-ci.org/CocoaPods/cocoapods-downloader) |[CocoaPods Downloader](https://github.com/CocoaPods/cocoapods-downloader) |  Downloaders for various source types. |  [docs](http://docs.cocoapods.org/cocoapods_downloader/index.html)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/Xcodeproj/master.svg?style=flat)](https://travis-ci.org/CocoaPods/Xcodeproj) | [Xcodeproj](https://github.com/CocoaPods/Xcodeproj) | Create and modify Xcode projects from Ruby. |  [docs](http://docs.cocoapods.org/xcodeproj/index.html)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/CLAide/master.svg?style=flat)](https://travis-ci.org/CocoaPods/CLAide) | [CLAide](https://github.com/CocoaPods/CLAide) | A small command-line interface framework.  | [docs](http://docs.cocoapods.org/claide/index.html)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/Molinillo/master.svg?style=flat)](https://travis-ci.org/CocoaPods/Molinillo) | [Molinillo](https://github.com/CocoaPods/Molinillo) | A powerful generic dependency resolver.  | [docs](http://www.rubydoc.info/gems/molinillo)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/CocoaPods-app/master.svg?style=flat)](https://travis-ci.org/CocoaPods/CocoaPods-app) | [CocoaPods.app](https://github.com/CocoaPods/CocoaPods-app) | A full-featured and standalone installation of CocoaPods.  | [info](https://cocoapods.org/app)\n|  | [Master Repo ](https://github.com/CocoaPods/Specs) | Master repository of specifications. | [guides](http://docs.cocoapods.org/guides/contributing_to_the_master_repo.html)\n','<p><img src=\"https://raw.github.com/CocoaPods/shared_resources/master/assets/cocoapods-banner-readme.png\" alt=\"CocoaPods Logo\" /></p>\n<h3 id=\"cocoapodsthecocoadependencymanager\">CocoaPods: The Cocoa dependency manager</h3>\n<p><a href=\"https://travis-ci.org/CocoaPods/CocoaPods\"><img src=\"http://img.shields.io/travis/CocoaPods/CocoaPods/master.svg?style=flat\" alt=\"Build Status\" /></a>\n<a href=\"http://badge.fury.io/rb/cocoapods\"><img src=\"http://img.shields.io/gem/v/cocoapods.svg?style=flat\" alt=\"Gem Version\" /></a>\n<a href=\"https://codeclimate.com/github/CocoaPods/CocoaPods\"><img src=\"http://img.shields.io/codeclimate/github/CocoaPods/CocoaPods.svg?style=flat\" alt=\"Code Climate\" /></a></p>\n<p>CocoaPods manages dependencies for your Xcode projects.</p>\n<p>You specify the dependencies for your project in a simple text file: your <code>Podfile</code>. \nCocoaPods recursively resolves dependencies between libraries, fetches \nsource code for all dependencies, and creates and maintains an Xcode \nworkspace to build your project.</p>\n<p>Installing and updating CocoaPods is very easy. Don\'t miss the <a href=\"http://guides.cocoapods.org/using/getting-started.html#installation\">Installation\nguide</a> and the\n<a href=\"https://guides.cocoapods.org/using/getting-started.html\">Getting Started guide</a>.</p>\n<h2 id=\"projectgoals\">Project Goals</h2>\n<p>CocoaPods aims to improve the engagement with, and discoverability \nof, third party open-source Cocoa libraries. These\nproject goals influence and drive the design of CocoaPods:</p>\n<ul>\n<li>Create and share libraries, and use them in your own projects,\nwithout creating extra work for library authors. Integrate\nnon-CocoaPods libraries and hack on your own fork of any\nCocoaPods library with a simple transparent <code>Podspec</code> standard.</li>\n<li>Allow library authors to structure their libraries however they like.</li>\n<li>Save time for library authors by automating a lot of Xcode work not \nrelated to their libraries\' functionality.</li>\n<li>Support any source management system. (Currently supported are <code>git</code>, \n<code>svn</code>, <code>mercurial</code>, <code>bazaar</code>, and various types of archives downloaded over HTTP.)</li>\n<li>Promote a culture of distributed collaboration on pods, but also provide\nfeatures only possible with a centralised solution to foster a community.</li>\n<li>Build tools on top of the core Cocoa development system, including those \ntypically deployed to other operating systems, such as web-services.</li>\n<li>Provide opinionated and automated integration, but make it completely\noptional. You may manually integrate your CocoaPods dependencies\ninto your Xcode project as you see fit, with or without a workspace.</li>\n<li>Solve everyday problems for Cocoa and Xcode developers.</li>\n</ul>\n<h2 id=\"sponsors\">Sponsors</h2>\n<p>Lovingly sponsored by a collection of companies, see the footer of <a href=\"https://cocoapods.org\">CocoaPods.org</a> for an up-to-date list. </p>\n<h2 id=\"collaborate\">Collaborate</h2>\n<p>All CocoaPods development happens on GitHub. Contributions make for good karma and\nwe <a href=\"https://blog.cocoapods.org/starting-open-source/\">welcome new</a> contributors with joy. We take contributors seriously, and thus have a \ncontributor <a href=\"CODE_OF_CONDUCT.md\">code of conduct</a>.</p>\n<h2 id=\"links\">Links</h2>\n<p>| Link | Description |\n| :----- | :------ |\n<a href=\"https://cocoapods.org/\">CocoaPods.org</a> | Homepage and search for Pods.\n<a href=\"https://twitter.com/CocoaPods\">@CocoaPods</a> | Follow CocoaPods on Twitter to stay up to date.\n<a href=\"https://blog.cocoapods.org\">Blog</a> | The CocoaPods blog.\n<a href=\"http://groups.google.com/group/cocoapods\">Mailing List</a> | Feel free to ask any kind of question.\n<a href=\"https://guides.cocoapods.org\">Guides</a> | Everything you want to know about CocoaPods.\n<a href=\"https://github.com/CocoaPods/CocoaPods/blob/master/CHANGELOG.md\">Changelog</a> | See the changes introduced in each CocoaPods version.\n<a href=\"https://feeds.cocoapods.org/new-pods.rss\">New Pods RSS</a> | Don\'t miss any new Pods.\n<a href=\"CODE_OF_CONDUCT.md\">Code of Conduct</a> | Find out the standards we hold ourselves to.</p>\n<h2 id=\"projects\">Projects</h2>\n<p>CocoaPods is composed of the following projects:</p>\n<p>| Status | Project | Description | Info |\n| :----- | :------ | :--- | :--- |\n| <a href=\"http://travis-ci.org/CocoaPods/CocoaPods\"><img src=\"http://img.shields.io/travis/CocoaPods/CocoaPods/master.svg?style=flat\" alt=\"Build Status\" /></a> | <a href=\"https://github.com/CocoaPods/CocoaPods\">CocoaPods</a> | The CocoaPods command line tool. | <a href=\"https://guides.cocoapods.org\">guides</a>\n| <a href=\"http://travis-ci.org/CocoaPods/Core\"><img src=\"http://img.shields.io/travis/CocoaPods/Core/master.svg?style=flat\" alt=\"Build Status\" /></a> | <a href=\"https://github.com/CocoaPods/Core\">CocoaPods Core</a> | Support for working with specifications and podfiles. | <a href=\"http://docs.cocoapods.org/cocoapods_core\">docs</a>\n| <a href=\"http://travis-ci.org/CocoaPods/cocoapods-downloader\"><img src=\"http://img.shields.io/travis/CocoaPods/cocoapods-downloader/master.svg?style=flat\" alt=\"Build Status\" /></a> |<a href=\"https://github.com/CocoaPods/cocoapods-downloader\">CocoaPods Downloader</a> |  Downloaders for various source types. |  <a href=\"http://docs.cocoapods.org/cocoapods_downloader/index.html\">docs</a>\n| <a href=\"https://travis-ci.org/CocoaPods/Xcodeproj\"><img src=\"http://img.shields.io/travis/CocoaPods/Xcodeproj/master.svg?style=flat\" alt=\"Build Status\" /></a> | <a href=\"https://github.com/CocoaPods/Xcodeproj\">Xcodeproj</a> | Create and modify Xcode projects from Ruby. |  <a href=\"http://docs.cocoapods.org/xcodeproj/index.html\">docs</a>\n| <a href=\"https://travis-ci.org/CocoaPods/CLAide\"><img src=\"http://img.shields.io/travis/CocoaPods/CLAide/master.svg?style=flat\" alt=\"Build Status\" /></a> | <a href=\"https://github.com/CocoaPods/CLAide\">CLAide</a> | A small command-line interface framework.  | <a href=\"http://docs.cocoapods.org/claide/index.html\">docs</a>\n| <a href=\"https://travis-ci.org/CocoaPods/Molinillo\"><img src=\"http://img.shields.io/travis/CocoaPods/Molinillo/master.svg?style=flat\" alt=\"Build Status\" /></a> | <a href=\"https://github.com/CocoaPods/Molinillo\">Molinillo</a> | A powerful generic dependency resolver.  | <a href=\"http://www.rubydoc.info/gems/molinillo\">docs</a>\n| <a href=\"https://travis-ci.org/CocoaPods/CocoaPods-app\"><img src=\"http://img.shields.io/travis/CocoaPods/CocoaPods-app/master.svg?style=flat\" alt=\"Build Status\" /></a> | <a href=\"https://github.com/CocoaPods/CocoaPods-app\">CocoaPods.app</a> | A full-featured and standalone installation of CocoaPods.  | <a href=\"https://cocoapods.org/app\">info</a>\n|  | <a href=\"https://github.com/CocoaPods/Specs\">Master Repo </a> | Master repository of specifications. | <a href=\"http://docs.cocoapods.org/guides/contributing_to_the_master_repo.html\">guides</a></p>'),
	(62,'louisdh','cub','https://raw.githubusercontent.com/louisdh/cub/master/README.md','2018-11-07 12:30:34','<p align=\"center\">\n  <a href=\"https://github.com/louisdh/lioness\">Lioness</a> &bull;\n  <b> Cub </b> &bull;\n  <a href=\"https://github.com/louisdh/savannakit\">SavannaKit</a>\n</p>\n\n<p align=\"center\">\n<img src=\"docs/resources/readme/logo@2x.png\" alt=\"Cub Logo\" height=\"200px\">\n</p>\n\n<h1 align=\"center\">The Cub Programming Language</h1>\n\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/cub\"><img src=\"https://travis-ci.org/louisdh/cub.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/cub\"><img src=\"https://codecov.io/gh/louisdh/cub/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<img src=\"https://img.shields.io/badge/version-1.0.1-blue.svg\" style=\"max-height: 300px;\" alt=\"version 1.0.1\">\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4bc51d.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Carthage Compatible\"/></a>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/Platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS macOS tvOS watchOS\">\n<img src=\"https://img.shields.io/badge/extension-.cub-FF9C27.svg\" style=\"max-height: 300px;\" alt=\"Extension: .cub\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n\nCub is an interpreted, dynamically typed, scripting language inspired by Swift. This project includes a lexer, parser, compiler and interpreter, all written in Swift.\n\nCub is used for [OpenTerm](https://github.com/louisdh/openterm)\'s scripting feature. A language guide is available in OpenTerm and [online](https://silverfox.be/cub/guide/index.html).\nCub was derived from [Lioness](https://github.com/louisdh/lioness) (my first programming language).\n\nThe standard library (abbreviated: stdlib) contains basic utility functions, for example to convert from/to dates.\n\n## Source examples\nThe following Cub code calculates factorials recursively:\n\n```swift\nfunc factorial(x) returns {\n	\n    if x > 1 {\n        return x * factorial(x - 1)\n    }\n	\n    return 1\n}\n\na = factorial(5) // a = 120\n```\n\nThe following Cub code uses a ```do times``` loop:\n\n```swift\na = 1\nn = 10\ndo n times {\n    a += a\n}\n// a = 1024\n```\n\n*More examples can be found [here](Source%20examples).*\n\n## External functions\nAn important feature Cub has is the ability to define external functions. These functions are implemented in native code (for example Swift) and thus allows Cub to call native code.\n\nAn external function pauses the interpreter, executes the native code, and resumes the interpreter when the native code is executed.\n\nThe following example implements a print function:\n\n```swift\nlet runner = Runner(logDebug: true, logTime: true)\n		\nrunner.registerExternalFunction(name: \"print\", argumentNames: [\"input\"], returns: true) { (arguments, callback) in\n			\n	for (name, arg) in arguments {\n		print(arg)\n	}\n			\n	callback(nil)\n}\n\n```\n\nExternal functions are called like any other global functions in Cub, the print function from the example above could be called like this:\n\n```swift\nprint(\"Hello world\")\n```\n\n\n## Features\n\n* Minimalistic, yet expressive, syntax\n* No type system, language is dynamic\n* 5 basic operators: ```+```, ```-```, ```/```, ```*``` and ```^```\n	* ```^``` means \"to the power of\", e.g. ```2^10``` equals 1024\n	* all operators have a shorthand, e.g. ```+=``` for ```+```\n* Numbers\n	* All numbers are floating point \n* Booleans\n	* Can be evaluated from comparison\n	* Can be defined by literal: ```true``` or ```false``` \n* Strings\n	* Can be concatenated with the + operator \n* Arrays\n	* Can contain any type, including other arrays  \n* Functions\n	* Supports parameters, returning and recursion \n	* Can be declared inside other functions\n* Structs\n	* Can contain any type, including other structs  \n* Loops\n	* ```for```\n	* ```while```\n	* ```do times```\n	* ```repeat while```\n	* ```break```\n	* ```continue```\n* ```if``` / ```else``` / ```else if``` statements\n\n## Running\nSince the project does not rely on any dependencies, running it requires no setup. \n\n### macOS\nOpen ```Cub.xcworkspace``` (preferably in the latest non-beta version of Xcode) and run the ```macOS Example``` target. The example will run the code in ```A.cub```. The output will be printed to the console.\n\n## Installing framework\n \n### Using Swift Package Manager\n\nAdd to your `Package.swift` file\'s `dependencies` section:\n\n```swift\n.Package(url: \"https://github.com/louisdh/cub.git\",\n		         majorVersion: 1, minor: 0)\n```\n\n### Using [CocoaPods](http://cocoapods.org)\n\nAdd the following line to your ```Podfile```:\n\n```ruby\npod \'Cub\', \'~> 1.0\'\n```\n\n### Using [Carthage](https://github.com/Carthage/Carthage)\nAdd the following line to your ```Cartfile```:\n\n```ruby\ngithub \"louisdh/cub\" ~> 1.0\n```\nRun ```carthage update``` to build the framework and drag the built ```Cub.framework``` into your Xcode project.\n\n## Roadmap\n- [x] Structs\n- [x] Completion suggestions  (given an incomplete source string and insertion point)\n- [ ] Breakpoint support in interpreter\n- [x] Stdlib documentation\n- [ ] Compiler warnings\n- [ ] Compiler optimizations\n- [x] Faster Lexer (without regex)\n- [x] Support emoticons for identifier names\n- [ ] ```guard``` statement\n- [ ] A lot more unit tests\n- [x] Linux support\n\n## Xcode file template\nCub source files can easily be created with Xcode, see [XcodeTemplate.md](XcodeTemplate.md) for instructions.\n\n\n## Architecture\nA detailed explanation of the project\'s architecture can be found [here](docs/Architecture.md).\n\n## License\n\nThis project is available under the MIT license. See the LICENSE file for more info.\n','<p align=\"center\">\n  <a href=\"https://github.com/louisdh/lioness\">Lioness</a> &bull;\n  <b> Cub </b> &bull;\n  <a href=\"https://github.com/louisdh/savannakit\">SavannaKit</a>\n</p>\n<p align=\"center\">\n<img src=\"docs/resources/readme/logo@2x.png\" alt=\"Cub Logo\" height=\"200px\">\n</p>\n<h1 align=\"center\">The Cub Programming Language</h1>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/cub\"><img src=\"https://travis-ci.org/louisdh/cub.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/cub\"><img src=\"https://codecov.io/gh/louisdh/cub/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<img src=\"https://img.shields.io/badge/version-1.0.1-blue.svg\" style=\"max-height: 300px;\" alt=\"version 1.0.1\">\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4bc51d.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Carthage Compatible\"/></a>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/Platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS macOS tvOS watchOS\">\n<img src=\"https://img.shields.io/badge/extension-.cub-FF9C27.svg\" style=\"max-height: 300px;\" alt=\"Extension: .cub\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n<p>Cub is an interpreted, dynamically typed, scripting language inspired by Swift. This project includes a lexer, parser, compiler and interpreter, all written in Swift.</p>\n<p>Cub is used for <a href=\"https://github.com/louisdh/openterm\">OpenTerm</a>\'s scripting feature. A language guide is available in OpenTerm and <a href=\"https://silverfox.be/cub/guide/index.html\">online</a>.\nCub was derived from <a href=\"https://github.com/louisdh/lioness\">Lioness</a> (my first programming language).</p>\n<p>The standard library (abbreviated: stdlib) contains basic utility functions, for example to convert from/to dates.</p>\n<h2 id=\"sourceexamples\">Source examples</h2>\n<p>The following Cub code calculates factorials recursively:</p>\n<pre><code class=\"swift language-swift\">func factorial(x) returns {\n\n    if x &gt; 1 {\n        return x * factorial(x - 1)\n    }\n\n    return 1\n}\n\na = factorial(5) // a = 120\n</code></pre>\n<p>The following Cub code uses a <code>do times</code> loop:</p>\n<pre><code class=\"swift language-swift\">a = 1\nn = 10\ndo n times {\n    a += a\n}\n// a = 1024\n</code></pre>\n<p><em>More examples can be found <a href=\"Source%20examples\">here</a>.</em></p>\n<h2 id=\"externalfunctions\">External functions</h2>\n<p>An important feature Cub has is the ability to define external functions. These functions are implemented in native code (for example Swift) and thus allows Cub to call native code.</p>\n<p>An external function pauses the interpreter, executes the native code, and resumes the interpreter when the native code is executed.</p>\n<p>The following example implements a print function:</p>\n<pre><code class=\"swift language-swift\">let runner = Runner(logDebug: true, logTime: true)\n\nrunner.registerExternalFunction(name: \"print\", argumentNames: [\"input\"], returns: true) { (arguments, callback) in\n\n    for (name, arg) in arguments {\n        print(arg)\n    }\n\n    callback(nil)\n}\n</code></pre>\n<p>External functions are called like any other global functions in Cub, the print function from the example above could be called like this:</p>\n<pre><code class=\"swift language-swift\">print(\"Hello world\")\n</code></pre>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Minimalistic, yet expressive, syntax</li>\n<li>No type system, language is dynamic</li>\n<li>5 basic operators: <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code> and <code>^</code><ul>\n<li><code>^</code> means \"to the power of\", e.g. <code>2^10</code> equals 1024</li>\n<li>all operators have a shorthand, e.g. <code>+=</code> for <code>+</code></li></ul></li>\n<li>Numbers<ul>\n<li>All numbers are floating point </li></ul></li>\n<li>Booleans<ul>\n<li>Can be evaluated from comparison</li>\n<li>Can be defined by literal: <code>true</code> or <code>false</code> </li></ul></li>\n<li>Strings<ul>\n<li>Can be concatenated with the + operator </li></ul></li>\n<li>Arrays<ul>\n<li>Can contain any type, including other arrays  </li></ul></li>\n<li>Functions<ul>\n<li>Supports parameters, returning and recursion </li>\n<li>Can be declared inside other functions</li></ul></li>\n<li>Structs<ul>\n<li>Can contain any type, including other structs  </li></ul></li>\n<li>Loops<ul>\n<li><code>for</code></li>\n<li><code>while</code></li>\n<li><code>do times</code></li>\n<li><code>repeat while</code></li>\n<li><code>break</code></li>\n<li><code>continue</code></li></ul></li>\n<li><code>if</code> / <code>else</code> / <code>else if</code> statements</li>\n</ul>\n<h2 id=\"running\">Running</h2>\n<p>Since the project does not rely on any dependencies, running it requires no setup. </p>\n<h3 id=\"macos\">macOS</h3>\n<p>Open <code>Cub.xcworkspace</code> (preferably in the latest non-beta version of Xcode) and run the <code>macOS Example</code> target. The example will run the code in <code>A.cub</code>. The output will be printed to the console.</p>\n<h2 id=\"installingframework\">Installing framework</h2>\n<h3 id=\"usingswiftpackagemanager\">Using Swift Package Manager</h3>\n<p>Add to your <code>Package.swift</code> file\'s <code>dependencies</code> section:</p>\n<pre><code class=\"swift language-swift\">.Package(url: \"https://github.com/louisdh/cub.git\",\n                 majorVersion: 1, minor: 0)\n</code></pre>\n<h3 id=\"usingcocoapodshttpcocoapodsorg\">Using <a href=\"http://cocoapods.org\">CocoaPods</a></h3>\n<p>Add the following line to your <code>Podfile</code>:</p>\n<pre><code class=\"ruby language-ruby\">pod \'Cub\', \'~&gt; 1.0\'\n</code></pre>\n<h3 id=\"usingcarthagehttpsgithubcomcarthagecarthage\">Using <a href=\"https://github.com/Carthage/Carthage\">Carthage</a></h3>\n<p>Add the following line to your <code>Cartfile</code>:</p>\n<pre><code class=\"ruby language-ruby\">github \"louisdh/cub\" ~&gt; 1.0\n</code></pre>\n<p>Run <code>carthage update</code> to build the framework and drag the built <code>Cub.framework</code> into your Xcode project.</p>\n<h2 id=\"roadmap\">Roadmap</h2>\n<ul>\n<li>[x] Structs</li>\n<li>[x] Completion suggestions  (given an incomplete source string and insertion point)</li>\n<li>[ ] Breakpoint support in interpreter</li>\n<li>[x] Stdlib documentation</li>\n<li>[ ] Compiler warnings</li>\n<li>[ ] Compiler optimizations</li>\n<li>[x] Faster Lexer (without regex)</li>\n<li>[x] Support emoticons for identifier names</li>\n<li>[ ] <code>guard</code> statement</li>\n<li>[ ] A lot more unit tests</li>\n<li>[x] Linux support</li>\n</ul>\n<h2 id=\"xcodefiletemplate\">Xcode file template</h2>\n<p>Cub source files can easily be created with Xcode, see <a href=\"XcodeTemplate.md\">XcodeTemplate.md</a> for instructions.</p>\n<h2 id=\"architecture\">Architecture</h2>\n<p>A detailed explanation of the project\'s architecture can be found <a href=\"docs/Architecture.md\">here</a>.</p>\n<h2 id=\"license\">License</h2>\n<p>This project is available under the MIT license. See the LICENSE file for more info.</p>'),
	(63,'louisdh','cub-guide','https://raw.githubusercontent.com/louisdh/cub-guide/master/README.md','2018-11-07 12:30:34','# Cub guide\n\nA guide for [the Cub programming language](https://github.com/louisdh/cub).\n\n## Before running:\n```bash\nswift package generate-xcodeproj\n```','<h1 id=\"cubguide\">Cub guide</h1>\n<p>A guide for <a href=\"https://github.com/louisdh/cub\">the Cub programming language</a>.</p>\n<h2 id=\"beforerunning\">Before running:</h2>\n<pre><code class=\"bash language-bash\">swift package generate-xcodeproj\n</code></pre>'),
	(64,'louisdh','fastlane','https://raw.githubusercontent.com/louisdh/fastlane/master/README.md','2018-11-07 12:30:34','<h3 align=\"center\">\n  <img src=\"fastlane/assets/fastlane_text.png\" alt=\"fastlane Logo\" width=500 />\n</h3>\n\n[![Twitter: @FastlaneTools](https://img.shields.io/badge/contact-@FastlaneTools-blue.svg?style=flat)](https://twitter.com/FastlaneTools)\n[![License](https://img.shields.io/badge/license-MIT-green.svg?style=flat)](https://github.com/fastlane/fastlane/blob/master/LICENSE)\n[![Gem](https://img.shields.io/gem/v/fastlane.svg?style=flat)](https://rubygems.org/gems/fastlane)\n[![Build Status](https://img.shields.io/circleci/project/fastlane/fastlane/master.svg?style=flat)](https://circleci.com/gh/fastlane/fastlane)\n\n_fastlane_ is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.\n\n<hr />\n<h2 align=\"center\">\n  ✨ All fastlane docs were moved to <a href=\"https://docs.fastlane.tools/\">docs.fastlane.tools</a> ✨\n</h2>\n<hr />\n\n## Need Help?\n\nBefore submitting a new GitHub issue, please make sure to\n\n- Check out [docs.fastlane.tools](https://docs.fastlane.tools)\n- Search for [existing GitHub issues](https://github.com/fastlane/fastlane/issues)\n\nIf the above doesn\'t help, please [submit an issue](https://github.com/fastlane/fastlane/issues) on GitHub and provide information about your setup, in particular the output of the `fastlane env` command.\n\n**Note**: If you want to report a regression in _fastlane_ (something that has worked before, but broke with a new release), please mark your issue title as such using `[Regression] Your title here`. This enables us to quickly detect and fix regressions.\n\n## _fastlane_ team\n\n<table id=\'team\'>\n<tr>\n<td id=\'maksym-grebenets\'>\n<a href=\'https://github.com/mgrebenets\'>\n<img src=\'https://github.com/mgrebenets.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/mgrebenets\'>Maksym Grebenets</a></h4>\n</td>\n<td id=\'josh-holtz\'>\n<a href=\'https://github.com/joshdholtz\'>\n<img src=\'https://github.com/joshdholtz.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/joshdholtz\'>Josh Holtz</a></h4>\n</td>\n<td id=\'jérôme-lacoste\'>\n<a href=\'https://github.com/lacostej\'>\n<img src=\'https://github.com/lacostej.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/lacostej\'>Jérôme Lacoste</a></h4>\n</td>\n<td id=\'andrew-mcburney\'>\n<a href=\'https://github.com/AndrewMcBurney\'>\n<img src=\'https://github.com/AndrewMcBurney.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/armcburney\'>Andrew McBurney</a></h4>\n</td>\n<td id=\'joshua-liebowitz\'>\n<a href=\'https://github.com/taquitos\'>\n<img src=\'https://github.com/taquitos.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/taquitos\'>Joshua Liebowitz</a></h4>\n</td>\n</tr>\n<tr>\n<td id=\'helmut-januschka\'>\n<a href=\'https://github.com/hjanuschka\'>\n<img src=\'https://github.com/hjanuschka.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/hjanuschka\'>Helmut Januschka</a></h4>\n</td>\n<td id=\'iulian-onofrei\'>\n<a href=\'https://github.com/revolter\'>\n<img src=\'https://github.com/revolter.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/Revolt666\'>Iulian Onofrei</a></h4>\n</td>\n<td id=\'aaron-brager\'>\n<a href=\'https://github.com/getaaron\'>\n<img src=\'https://github.com/getaaron.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/getaaron\'>Aaron Brager</a></h4>\n</td>\n<td id=\'jorge-revuelta-h\'>\n<a href=\'https://github.com/minuscorp\'>\n<img src=\'https://github.com/minuscorp.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/minuscorp\'>Jorge Revuelta H</a></h4>\n</td>\n<td id=\'kohki-miki\'>\n<a href=\'https://github.com/giginet\'>\n<img src=\'https://github.com/giginet.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/giginet\'>Kohki Miki</a></h4>\n</td>\n</tr>\n<tr>\n<td id=\'luka-mirosevic\'>\n<a href=\'https://github.com/lmirosevic\'>\n<img src=\'https://github.com/lmirosevic.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/lmirosevic\'>Luka Mirosevic</a></h4>\n</td>\n<td id=\'manu-wallner\'>\n<a href=\'https://github.com/milch\'>\n<img src=\'https://github.com/milch.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/acrooow\'>Manu Wallner</a></h4>\n</td>\n<td id=\'olivier-halligon\'>\n<a href=\'https://github.com/AliSoftware\'>\n<img src=\'https://github.com/AliSoftware.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/aligatr\'>Olivier Halligon</a></h4>\n</td>\n<td id=\'matthew-ellis\'>\n<a href=\'https://github.com/matthewellis\'>\n<img src=\'https://github.com/matthewellis.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/mellis1995\'>Matthew Ellis</a></h4>\n</td>\n<td id=\'jan-piotrowski\'>\n<a href=\'https://github.com/janpio\'>\n<img src=\'https://github.com/janpio.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/Sujan\'>Jan Piotrowski</a></h4>\n</td>\n</tr>\n<tr>\n<td id=\'felix-krause\'>\n<a href=\'https://github.com/KrauseFx\'>\n<img src=\'https://github.com/KrauseFx.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/KrauseFx\'>Felix Krause</a></h4>\n</td>\n<td id=\'jimmy-dee\'>\n<a href=\'https://github.com/jdee\'>\n<img src=\'https://github.com/jdee.png?size=140\'>\n</a>\n<h4 align=\'center\'>Jimmy Dee</h4>\n</td>\n<td id=\'fumiya-nakamura\'>\n<a href=\'https://github.com/nafu\'>\n<img src=\'https://github.com/nafu.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/nafu003\'>Fumiya Nakamura</a></h4>\n</td>\n<td id=\'danielle-tomlinson\'>\n<a href=\'https://github.com/DanToml\'>\n<img src=\'https://github.com/DanToml.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/DanToml\'>Danielle Tomlinson</a></h4>\n</td>\n<td id=\'stefan-natchev\'>\n<a href=\'https://github.com/snatchev\'>\n<img src=\'https://github.com/snatchev.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/snatchev\'>Stefan Natchev</a></h4>\n</td>\n</tr>\n</table>\n\nSpecial thanks to all [contributors](https://github.com/fastlane/fastlane/graphs/contributors) for extending and improving _fastlane_.\n\n## Contribute to _fastlane_\n\nCheck out [CONTRIBUTING.md](CONTRIBUTING.md) for more information on how to help with _fastlane_.\n\n## Code of Conduct\n\nHelp us keep _fastlane_ open and inclusive. Please read and follow our [Code of Conduct](https://github.com/fastlane/fastlane/blob/master/CODE_OF_CONDUCT.md).\n\n## License\n\nThis project is licensed under the terms of the MIT license. See the [LICENSE](LICENSE) file.\n\n> This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.\n\n<hr />\n<h2 align=\"center\">\n  ✨ All fastlane docs were moved to <a href=\"https://docs.fastlane.tools/\">docs.fastlane.tools</a> ✨\n</h2>\n<hr />\n','<h3 align=\"center\">\n  <img src=\"fastlane/assets/fastlane_text.png\" alt=\"fastlane Logo\" width=500 />\n</h3>\n<p><a href=\"https://twitter.com/FastlaneTools\"><img src=\"https://img.shields.io/badge/contact-@FastlaneTools-blue.svg?style=flat\" alt=\"Twitter: @FastlaneTools\" /></a>\n<a href=\"https://github.com/fastlane/fastlane/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-green.svg?style=flat\" alt=\"License\" /></a>\n<a href=\"https://rubygems.org/gems/fastlane\"><img src=\"https://img.shields.io/gem/v/fastlane.svg?style=flat\" alt=\"Gem\" /></a>\n<a href=\"https://circleci.com/gh/fastlane/fastlane\"><img src=\"https://img.shields.io/circleci/project/fastlane/fastlane/master.svg?style=flat\" alt=\"Build Status\" /></a></p>\n<p><em>fastlane</em> is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.</p>\n<hr />\n<h2 align=\"center\">\n  ✨ All fastlane docs were moved to <a href=\"https://docs.fastlane.tools/\">docs.fastlane.tools</a> ✨\n</h2>\n<hr />\n<h2 id=\"needhelp\">Need Help?</h2>\n<p>Before submitting a new GitHub issue, please make sure to</p>\n<ul>\n<li>Check out <a href=\"https://docs.fastlane.tools\">docs.fastlane.tools</a></li>\n<li>Search for <a href=\"https://github.com/fastlane/fastlane/issues\">existing GitHub issues</a></li>\n</ul>\n<p>If the above doesn\'t help, please <a href=\"https://github.com/fastlane/fastlane/issues\">submit an issue</a> on GitHub and provide information about your setup, in particular the output of the <code>fastlane env</code> command.</p>\n<p><strong>Note</strong>: If you want to report a regression in <em>fastlane</em> (something that has worked before, but broke with a new release), please mark your issue title as such using <code>[Regression] Your title here</code>. This enables us to quickly detect and fix regressions.</p>\n<h2 id=\"_fastlane_team\"><em>fastlane</em> team</h2>\n<table id=\'team\'>\n<tr>\n<td id=\'maksym-grebenets\'>\n<a href=\'https://github.com/mgrebenets\'>\n<img src=\'https://github.com/mgrebenets.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/mgrebenets\'>Maksym Grebenets</a></h4>\n</td>\n<td id=\'josh-holtz\'>\n<a href=\'https://github.com/joshdholtz\'>\n<img src=\'https://github.com/joshdholtz.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/joshdholtz\'>Josh Holtz</a></h4>\n</td>\n<td id=\'jérôme-lacoste\'>\n<a href=\'https://github.com/lacostej\'>\n<img src=\'https://github.com/lacostej.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/lacostej\'>Jérôme Lacoste</a></h4>\n</td>\n<td id=\'andrew-mcburney\'>\n<a href=\'https://github.com/AndrewMcBurney\'>\n<img src=\'https://github.com/AndrewMcBurney.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/armcburney\'>Andrew McBurney</a></h4>\n</td>\n<td id=\'joshua-liebowitz\'>\n<a href=\'https://github.com/taquitos\'>\n<img src=\'https://github.com/taquitos.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/taquitos\'>Joshua Liebowitz</a></h4>\n</td>\n</tr>\n<tr>\n<td id=\'helmut-januschka\'>\n<a href=\'https://github.com/hjanuschka\'>\n<img src=\'https://github.com/hjanuschka.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/hjanuschka\'>Helmut Januschka</a></h4>\n</td>\n<td id=\'iulian-onofrei\'>\n<a href=\'https://github.com/revolter\'>\n<img src=\'https://github.com/revolter.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/Revolt666\'>Iulian Onofrei</a></h4>\n</td>\n<td id=\'aaron-brager\'>\n<a href=\'https://github.com/getaaron\'>\n<img src=\'https://github.com/getaaron.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/getaaron\'>Aaron Brager</a></h4>\n</td>\n<td id=\'jorge-revuelta-h\'>\n<a href=\'https://github.com/minuscorp\'>\n<img src=\'https://github.com/minuscorp.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/minuscorp\'>Jorge Revuelta H</a></h4>\n</td>\n<td id=\'kohki-miki\'>\n<a href=\'https://github.com/giginet\'>\n<img src=\'https://github.com/giginet.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/giginet\'>Kohki Miki</a></h4>\n</td>\n</tr>\n<tr>\n<td id=\'luka-mirosevic\'>\n<a href=\'https://github.com/lmirosevic\'>\n<img src=\'https://github.com/lmirosevic.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/lmirosevic\'>Luka Mirosevic</a></h4>\n</td>\n<td id=\'manu-wallner\'>\n<a href=\'https://github.com/milch\'>\n<img src=\'https://github.com/milch.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/acrooow\'>Manu Wallner</a></h4>\n</td>\n<td id=\'olivier-halligon\'>\n<a href=\'https://github.com/AliSoftware\'>\n<img src=\'https://github.com/AliSoftware.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/aligatr\'>Olivier Halligon</a></h4>\n</td>\n<td id=\'matthew-ellis\'>\n<a href=\'https://github.com/matthewellis\'>\n<img src=\'https://github.com/matthewellis.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/mellis1995\'>Matthew Ellis</a></h4>\n</td>\n<td id=\'jan-piotrowski\'>\n<a href=\'https://github.com/janpio\'>\n<img src=\'https://github.com/janpio.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/Sujan\'>Jan Piotrowski</a></h4>\n</td>\n</tr>\n<tr>\n<td id=\'felix-krause\'>\n<a href=\'https://github.com/KrauseFx\'>\n<img src=\'https://github.com/KrauseFx.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/KrauseFx\'>Felix Krause</a></h4>\n</td>\n<td id=\'jimmy-dee\'>\n<a href=\'https://github.com/jdee\'>\n<img src=\'https://github.com/jdee.png?size=140\'>\n</a>\n<h4 align=\'center\'>Jimmy Dee</h4>\n</td>\n<td id=\'fumiya-nakamura\'>\n<a href=\'https://github.com/nafu\'>\n<img src=\'https://github.com/nafu.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/nafu003\'>Fumiya Nakamura</a></h4>\n</td>\n<td id=\'danielle-tomlinson\'>\n<a href=\'https://github.com/DanToml\'>\n<img src=\'https://github.com/DanToml.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/DanToml\'>Danielle Tomlinson</a></h4>\n</td>\n<td id=\'stefan-natchev\'>\n<a href=\'https://github.com/snatchev\'>\n<img src=\'https://github.com/snatchev.png?size=140\'>\n</a>\n<h4 align=\'center\'><a href=\'https://twitter.com/snatchev\'>Stefan Natchev</a></h4>\n</td>\n</tr>\n</table>\n<p>Special thanks to all <a href=\"https://github.com/fastlane/fastlane/graphs/contributors\">contributors</a> for extending and improving <em>fastlane</em>.</p>\n<h2 id=\"contributeto_fastlane_\">Contribute to <em>fastlane</em></h2>\n<p>Check out <a href=\"CONTRIBUTING.md\">CONTRIBUTING.md</a> for more information on how to help with <em>fastlane</em>.</p>\n<h2 id=\"codeofconduct\">Code of Conduct</h2>\n<p>Help us keep <em>fastlane</em> open and inclusive. Please read and follow our <a href=\"https://github.com/fastlane/fastlane/blob/master/CODE_OF_CONDUCT.md\">Code of Conduct</a>.</p>\n<h2 id=\"license\">License</h2>\n<p>This project is licensed under the terms of the MIT license. See the <a href=\"LICENSE\">LICENSE</a> file.</p>\n<blockquote>\n  <p>This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.</p>\n</blockquote>\n<hr />\n<h2 align=\"center\">\n  ✨ All fastlane docs were moved to <a href=\"https://docs.fastlane.tools/\">docs.fastlane.tools</a> ✨\n</h2>\n<hr />'),
	(65,'louisdh','huekit','https://raw.githubusercontent.com/louisdh/huekit/master/README.md','2018-11-07 12:30:34','<p align=\"center\">\n<img src=\"readme-resources/hero@2x.png\" style=\"max-height: 300px;\" alt=\"HueKit for iOS\">\n</p>\n\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/huekit\"><img src=\"https://travis-ci.org/louisdh/huekit.svg?branch=master\" style=\"max-height: 300px;\" alt=\"Build Status\"/></a>\n<br>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<a href=\"https://cocoapods.org/pods/HueKit\"><img src=\"https://img.shields.io/cocoapods/v/HueKit.svg\" style=\"max-height: 300px;\" alt=\"Pod Version\"/></a>\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4bc51d.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Carthage Compatible\"/></a>\n<img src=\"https://img.shields.io/badge/platform-iOS-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n\n<p align=\"center\">\n<img src=\"readme-resources/example.gif\" style=\"max-height: 1480px;\" alt=\"HueKit for iOS\">\n</p>\n\n\n## About\nHueKit is a UI framework for iOS that provides components and utilities for building color pickers. Since each app may want a custom color picker, the design of this framework is geared towards reusability and allows for great customization.\n\n### Components\nAll components are marked `open`, so they can be subclassed. Also, all components are marked `@IBDesignable`, so they can be previewed in Interface Builder. Components that provide user interaction are subclassed from `UIControl`, you can observe a change in value by using `@IBAction`.\n\n#### ColorBarPicker\n![](readme-resources/components/ColorBarPicker.png)\n\n#### ColorBarView\n![](readme-resources/components/ColorBarView.png)\n\n#### ColorIndicatorView\n![](readme-resources/components/ColorIndicatorView.png)\n\n#### ColorSquarePicker\n![](readme-resources/components/ColorSquarePicker.png)\n\n#### ColorSquareView\n![](readme-resources/components/ColorSquareView.png)\n\n#### SourceColorView\n![](readme-resources/components/SourceColorView.png)\n\n\n## Installation\n\n### [CocoaPods](http://cocoapods.org)\n\nTo install, add the following line to your ```Podfile```:\n\n```ruby\npod \'HueKit\', \'~> 1.0\'\n```\n\n### [Carthage](https://github.com/Carthage/Carthage)\nTo install, add the following line to your ```Cartfile```:\n\n```ruby\ngithub \"louisdh/huekit\" ~> 1.0\n```\nRun ```carthage update``` to build the framework and drag the built ```HueKit.framework``` into your Xcode project.\n\n\n\n## Requirements\n\n* iOS 10.0+\n* Xcode 9.3+\n\n## Todo \n\n- [ ] Add tests\n- [ ] Add documentation\n \n## License\n\nThis project is available under the MIT license. See the LICENSE file for more info.\n','<p align=\"center\">\n<img src=\"readme-resources/hero@2x.png\" style=\"max-height: 300px;\" alt=\"HueKit for iOS\">\n</p>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/huekit\"><img src=\"https://travis-ci.org/louisdh/huekit.svg?branch=master\" style=\"max-height: 300px;\" alt=\"Build Status\"/></a>\n<br>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<a href=\"https://cocoapods.org/pods/HueKit\"><img src=\"https://img.shields.io/cocoapods/v/HueKit.svg\" style=\"max-height: 300px;\" alt=\"Pod Version\"/></a>\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4bc51d.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Carthage Compatible\"/></a>\n<img src=\"https://img.shields.io/badge/platform-iOS-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n<p align=\"center\">\n<img src=\"readme-resources/example.gif\" style=\"max-height: 1480px;\" alt=\"HueKit for iOS\">\n</p>\n<h2 id=\"about\">About</h2>\n<p>HueKit is a UI framework for iOS that provides components and utilities for building color pickers. Since each app may want a custom color picker, the design of this framework is geared towards reusability and allows for great customization.</p>\n<h3 id=\"components\">Components</h3>\n<p>All components are marked <code>open</code>, so they can be subclassed. Also, all components are marked <code>@IBDesignable</code>, so they can be previewed in Interface Builder. Components that provide user interaction are subclassed from <code>UIControl</code>, you can observe a change in value by using <code>@IBAction</code>.</p>\n<h4 id=\"colorbarpicker\">ColorBarPicker</h4>\n<p><img src=\"readme-resources/components/ColorBarPicker.png\" alt=\"\" /></p>\n<h4 id=\"colorbarview\">ColorBarView</h4>\n<p><img src=\"readme-resources/components/ColorBarView.png\" alt=\"\" /></p>\n<h4 id=\"colorindicatorview\">ColorIndicatorView</h4>\n<p><img src=\"readme-resources/components/ColorIndicatorView.png\" alt=\"\" /></p>\n<h4 id=\"colorsquarepicker\">ColorSquarePicker</h4>\n<p><img src=\"readme-resources/components/ColorSquarePicker.png\" alt=\"\" /></p>\n<h4 id=\"colorsquareview\">ColorSquareView</h4>\n<p><img src=\"readme-resources/components/ColorSquareView.png\" alt=\"\" /></p>\n<h4 id=\"sourcecolorview\">SourceColorView</h4>\n<p><img src=\"readme-resources/components/SourceColorView.png\" alt=\"\" /></p>\n<h2 id=\"installation\">Installation</h2>\n<h3 id=\"cocoapodshttpcocoapodsorg\"><a href=\"http://cocoapods.org\">CocoaPods</a></h3>\n<p>To install, add the following line to your <code>Podfile</code>:</p>\n<pre><code class=\"ruby language-ruby\">pod \'HueKit\', \'~&gt; 1.0\'\n</code></pre>\n<h3 id=\"carthagehttpsgithubcomcarthagecarthage\"><a href=\"https://github.com/Carthage/Carthage\">Carthage</a></h3>\n<p>To install, add the following line to your <code>Cartfile</code>:</p>\n<pre><code class=\"ruby language-ruby\">github \"louisdh/huekit\" ~&gt; 1.0\n</code></pre>\n<p>Run <code>carthage update</code> to build the framework and drag the built <code>HueKit.framework</code> into your Xcode project.</p>\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>iOS 10.0+</li>\n<li>Xcode 9.3+</li>\n</ul>\n<h2 id=\"todo\">Todo</h2>\n<ul>\n<li>[ ] Add tests</li>\n<li>[ ] Add documentation</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>This project is available under the MIT license. See the LICENSE file for more info.</p>'),
	(66,'louisdh','icns2png','https://raw.githubusercontent.com/louisdh/icns2png/master/README.md','2018-11-07 12:30:34','# icns2png\n\nThis is a Swift command line script that converts .icns files to .png files at various sizes. The main usage for this is to convert .icns assets that are used in a Mac app that you want to bring to iOS.\n\n## Usage\n```bash\nswift icns2png.swift\n```\n\nThe current implementation expects an \"icns\" input folder and \"png\" output folder. \n\n![](readme-assets/icns2png-example.png)','<h1 id=\"icns2png\">icns2png</h1>\n<p>This is a Swift command line script that converts .icns files to .png files at various sizes. The main usage for this is to convert .icns assets that are used in a Mac app that you want to bring to iOS.</p>\n<h2 id=\"usage\">Usage</h2>\n<pre><code class=\"bash language-bash\">swift icns2png.swift\n</code></pre>\n<p>The current implementation expects an \"icns\" input folder and \"png\" output folder. </p>\n<p><img src=\"readme-assets/icns2png-example.png\" alt=\"\" /></p>'),
	(67,'louisdh','Inkpad','https://raw.githubusercontent.com/louisdh/Inkpad/master/README.md','2018-11-07 12:30:34','Inkpad\n======\n\nInkpad is a vector illustration app designed from scratch for the iPad. It supports paths, compound paths, text, images, groups, masks, gradient fills, and an unlimited number of layers.\n\nInkpad was designed with performance in mind – it can easily handle drawings with hundreds to thousands of shapes without bogging down. Export your finished illustrations directly to your Dropbox as SVG or PDF.\n\nFeatures:\n\n* Very high performance. Select, scale and rotate hundreds of objects with zero lag.\n* Create arbitrary bezier paths with the Pen tool.\n* Create compound paths, masks and groups.\n* Create text objects.\n* Place photos from your albums.\n* Boolean operators on paths (Unite, Intersect, Exclude, Subtract Front)\n* Powerful scale and rotate tools.\n* Gradient fills with interactive editing on canvas.\n* Arbitrary stroke dash patterns.\n* Swatch library.\n* Unlimited layers per drawing.\n* Rename, rearrange, delete, hide and lock layers.\n* Adjust layer transparency.\n* Snap to grid, points, and path edges.\n* Isolate the active layer for easy editing.\n* Email drawings as SVG, PDF, PNG and JPEG.\n* Send SVG, PDF, PNG, and JPEG directly to your Dropbox.\n\nInkpad requires iOS 7. It is available on the [App Store](https://itunes.apple.com/app/id400083414).\n\nLicense\n-------\n\nInkpad is Free/Libre Open Source Software. It is distributed under the [Mozilla Public License v2.0](http://mozilla.org/MPL/2.0/).\n\nPlease do not submit unmodified (or trivially modified) versions of this application to the App Store. The license grants both rights and responsibilities. If you choose to clone and submit this application to the App Store, you are required to make this source code (and any changes that you\'ve made to it) publicly available. You must also make it clear that the source code is available and provide a link to it.\n\nI will ask Apple to pull any apps that do not comply. Please don\'t waste your time and mine.\n\nHow to Contribute\n-----------------\n\nOne of my motivations for releasing the source code for Inkpad was to make it a community project. To that end, I\'d appreciate help with bug fixes, new features, localizations, testing, and ideas for improving/simplifying existing code. Take a look at the list of [issues](https://github.com/sprang/Inkpad/issues) to find enhancements that I\'ve considered implementing. I\'m also interested in your feature ideas.\n\nIf you\'re taking on a big change, I\'d be happy to discuss design ideas or answer questions before you get too far along. Note: I will likely be picky about implementation details and UI changes.\n\nTo contribute, please follow the branching model outlined here: [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/).\n\nContributors\n------------\n\n* [Steve Sprang](https://github.com/sprang)\n* [Scott Vachalek](https://github.com/svachalek) / SVG Import\n* [Joe Ricioppo](https://github.com/joericioppo) / Initial Dropbox Integration\n* [Sam Green](https://github.com/samgreen)\n* [Alistair McMillan](https://github.com/alistairmcmillan)\n* [Oscar Rysdyk](https://github.com/32Beat)\n\nLocalizations:\n\n* [Carlo Gandolfi](https://github.com/cgand) / Italian\n* [Miguel Dussán](https://github.com/migdus) / Spanish\n* [Yannick Loriot](https://github.com/YannickL) / French\n* [Ersen Tekin](https://github.com/ersentekin) / Turkish\n* [Henry Wagler](https://github.com/number-six) / German\n* [Delfim Rodrigues](http://asebenta.wordpress.com) / Portuguese\n* Pedro Lovisoto / Brazilian Portuguese\n* [Juan Casares](http://www.usablehack.com) / Spanish\n* [Ale Muñoz](https://github.com/bomberstudios) / Spanish\n\nApp Icon:\n\n* [Matthew Rex Downham](http://www.mrexd.com/)\n','<h1 id=\"inkpad\">Inkpad</h1>\n<p>Inkpad is a vector illustration app designed from scratch for the iPad. It supports paths, compound paths, text, images, groups, masks, gradient fills, and an unlimited number of layers.</p>\n<p>Inkpad was designed with performance in mind – it can easily handle drawings with hundreds to thousands of shapes without bogging down. Export your finished illustrations directly to your Dropbox as SVG or PDF.</p>\n<p>Features:</p>\n<ul>\n<li>Very high performance. Select, scale and rotate hundreds of objects with zero lag.</li>\n<li>Create arbitrary bezier paths with the Pen tool.</li>\n<li>Create compound paths, masks and groups.</li>\n<li>Create text objects.</li>\n<li>Place photos from your albums.</li>\n<li>Boolean operators on paths (Unite, Intersect, Exclude, Subtract Front)</li>\n<li>Powerful scale and rotate tools.</li>\n<li>Gradient fills with interactive editing on canvas.</li>\n<li>Arbitrary stroke dash patterns.</li>\n<li>Swatch library.</li>\n<li>Unlimited layers per drawing.</li>\n<li>Rename, rearrange, delete, hide and lock layers.</li>\n<li>Adjust layer transparency.</li>\n<li>Snap to grid, points, and path edges.</li>\n<li>Isolate the active layer for easy editing.</li>\n<li>Email drawings as SVG, PDF, PNG and JPEG.</li>\n<li>Send SVG, PDF, PNG, and JPEG directly to your Dropbox.</li>\n</ul>\n<p>Inkpad requires iOS 7. It is available on the <a href=\"https://itunes.apple.com/app/id400083414\">App Store</a>.</p>\n<h2 id=\"license\">License</h2>\n<p>Inkpad is Free/Libre Open Source Software. It is distributed under the <a href=\"http://mozilla.org/MPL/2.0/\">Mozilla Public License v2.0</a>.</p>\n<p>Please do not submit unmodified (or trivially modified) versions of this application to the App Store. The license grants both rights and responsibilities. If you choose to clone and submit this application to the App Store, you are required to make this source code (and any changes that you\'ve made to it) publicly available. You must also make it clear that the source code is available and provide a link to it.</p>\n<p>I will ask Apple to pull any apps that do not comply. Please don\'t waste your time and mine.</p>\n<h2 id=\"howtocontribute\">How to Contribute</h2>\n<p>One of my motivations for releasing the source code for Inkpad was to make it a community project. To that end, I\'d appreciate help with bug fixes, new features, localizations, testing, and ideas for improving/simplifying existing code. Take a look at the list of <a href=\"https://github.com/sprang/Inkpad/issues\">issues</a> to find enhancements that I\'ve considered implementing. I\'m also interested in your feature ideas.</p>\n<p>If you\'re taking on a big change, I\'d be happy to discuss design ideas or answer questions before you get too far along. Note: I will likely be picky about implementation details and UI changes.</p>\n<p>To contribute, please follow the branching model outlined here: <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">A successful Git branching model</a>.</p>\n<h2 id=\"contributors\">Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/sprang\">Steve Sprang</a></li>\n<li><a href=\"https://github.com/svachalek\">Scott Vachalek</a> / SVG Import</li>\n<li><a href=\"https://github.com/joericioppo\">Joe Ricioppo</a> / Initial Dropbox Integration</li>\n<li><a href=\"https://github.com/samgreen\">Sam Green</a></li>\n<li><a href=\"https://github.com/alistairmcmillan\">Alistair McMillan</a></li>\n<li><a href=\"https://github.com/32Beat\">Oscar Rysdyk</a></li>\n</ul>\n<p>Localizations:</p>\n<ul>\n<li><a href=\"https://github.com/cgand\">Carlo Gandolfi</a> / Italian</li>\n<li><a href=\"https://github.com/migdus\">Miguel Dussán</a> / Spanish</li>\n<li><a href=\"https://github.com/YannickL\">Yannick Loriot</a> / French</li>\n<li><a href=\"https://github.com/ersentekin\">Ersen Tekin</a> / Turkish</li>\n<li><a href=\"https://github.com/number-six\">Henry Wagler</a> / German</li>\n<li><a href=\"http://asebenta.wordpress.com\">Delfim Rodrigues</a> / Portuguese</li>\n<li>Pedro Lovisoto / Brazilian Portuguese</li>\n<li><a href=\"http://www.usablehack.com\">Juan Casares</a> / Spanish</li>\n<li><a href=\"https://github.com/bomberstudios\">Ale Muñoz</a> / Spanish</li>\n</ul>\n<p>App Icon:</p>\n<ul>\n<li><a href=\"http://www.mrexd.com/\">Matthew Rex Downham</a></li>\n</ul>'),
	(68,'louisdh','InputAssistant','https://raw.githubusercontent.com/louisdh/InputAssistant/master/README.md','2018-11-07 12:30:35','# Input Assistant\n\n<p align=\"center\">\n  <a href=\"https://github.com/IMcD23/TiltedTabView\">TiltedTabView</a> &bull;\n  <a href=\"https://github.com/IMcD23/TabView\">TabView</a> &bull;\n  <b>InputAssistant</b> &bull;\n  <a href=\"https://github.com/IMcD23/Git\">Git</a>\n</p>\n\n--------\n\nThis library is a view that shows custom auto-complete suggestions for your UITextField / UITextView.\n\n[![Build Status](http://img.shields.io/travis/IMcD23/InputAssistant.svg)](https://travis-ci.org/IMcD23/InputAssistant)\n[![Version](https://img.shields.io/github/release/IMcD23/InputAssistant.svg)](https://github.com/IMcD23/InputAssistant/releases/latest)\n![Package Managers](https://img.shields.io/badge/supports-Carthage-orange.svg)\n[![Contact](https://img.shields.io/badge/contact-%40ian__mcdowell-3a8fc1.svg)](https://twitter.com/ian_mcdowell)\n\n<img src=\"Resources/Keyboard.png\" height=\"300\"> <img src=\"Resources/Keyboard_iPad.png\" height=\"300\"> \n\n# Requirements\n\n* Xcode 9 or later\n* iOS 10.0 or later\n\n# Usage\n\nThis library provides an `InputAssistantView` class, that is designed to be set as the `inputAccessoryView` of a UITextView or UITextField.\n\nIt provides three areas that you can customize.\n- Suggestions - A scrollable set of text suggestions.\n- Leading/Trailing actions - tappable buttons on either side of the suggestions.\n- Empty text - Optional text that can be displayed when there are no suggestions.\n\nUse the `InputAssistantViewDataSource` protocol that allows you to do this customization.\n\nTo react to a suggestion being tapped, conform to the `InputAssistantViewDelegate` protocol.\n\n# Installation\n\n## Carthage\nTo install InputAssistant using [Carthage](https://github.com/Carthage/Carthage), add the following line to your Cartfile:\n\n```\ngithub \"IMcD23/InputAssistant\" \"master\"\n```\n\n## Submodule\nTo install InputAssistant as a submodule into your git repository, run the following command:\n\n```\ngit submodule add -b master https://github.com/IMcD23/InputAssistant.git Path/To/InputAssistant\ngit submodule update --init --recursive\n```\n\nThen, add the `.xcodeproj` in the root of the repository into your Xcode project, and add it as a build dependency.\n\n## ibuild\nA Swift static library of this project is also available for the ibuild build system. Learn more about ibuild [here](https://github.com/IMcD23/ibuild)\n\n# Author\nCreated by [Ian McDowell](https://ianmcdowell.net)\n\n# License\nAll code in this project is available under the license specified in the LICENSE file. However, since this project also bundles code from other projects, you are subject to those projects\' licenses as well.\n','<h1 id=\"inputassistant\">Input Assistant</h1>\n<p align=\"center\">\n  <a href=\"https://github.com/IMcD23/TiltedTabView\">TiltedTabView</a> &bull;\n  <a href=\"https://github.com/IMcD23/TabView\">TabView</a> &bull;\n  <b>InputAssistant</b> &bull;\n  <a href=\"https://github.com/IMcD23/Git\">Git</a>\n</p>\n<hr />\n<p>This library is a view that shows custom auto-complete suggestions for your UITextField / UITextView.</p>\n<p><a href=\"https://travis-ci.org/IMcD23/InputAssistant\"><img src=\"http://img.shields.io/travis/IMcD23/InputAssistant.svg\" alt=\"Build Status\" /></a>\n<a href=\"https://github.com/IMcD23/InputAssistant/releases/latest\"><img src=\"https://img.shields.io/github/release/IMcD23/InputAssistant.svg\" alt=\"Version\" /></a>\n<img src=\"https://img.shields.io/badge/supports-Carthage-orange.svg\" alt=\"Package Managers\" />\n<a href=\"https://twitter.com/ian_mcdowell\"><img src=\"https://img.shields.io/badge/contact-%40ian__mcdowell-3a8fc1.svg\" alt=\"Contact\" /></a></p>\n<p><img src=\"Resources/Keyboard.png\" height=\"300\"> <img src=\"Resources/Keyboard_iPad.png\" height=\"300\"> </p>\n<h1 id=\"requirements\">Requirements</h1>\n<ul>\n<li>Xcode 9 or later</li>\n<li>iOS 10.0 or later</li>\n</ul>\n<h1 id=\"usage\">Usage</h1>\n<p>This library provides an <code>InputAssistantView</code> class, that is designed to be set as the <code>inputAccessoryView</code> of a UITextView or UITextField.</p>\n<p>It provides three areas that you can customize.</p>\n<ul>\n<li>Suggestions - A scrollable set of text suggestions.</li>\n<li>Leading/Trailing actions - tappable buttons on either side of the suggestions.</li>\n<li>Empty text - Optional text that can be displayed when there are no suggestions.</li>\n</ul>\n<p>Use the <code>InputAssistantViewDataSource</code> protocol that allows you to do this customization.</p>\n<p>To react to a suggestion being tapped, conform to the <code>InputAssistantViewDelegate</code> protocol.</p>\n<h1 id=\"installation\">Installation</h1>\n<h2 id=\"carthage\">Carthage</h2>\n<p>To install InputAssistant using <a href=\"https://github.com/Carthage/Carthage\">Carthage</a>, add the following line to your Cartfile:</p>\n<pre><code>github \"IMcD23/InputAssistant\" \"master\"\n</code></pre>\n<h2 id=\"submodule\">Submodule</h2>\n<p>To install InputAssistant as a submodule into your git repository, run the following command:</p>\n<pre><code>git submodule add -b master https://github.com/IMcD23/InputAssistant.git Path/To/InputAssistant\ngit submodule update --init --recursive\n</code></pre>\n<p>Then, add the <code>.xcodeproj</code> in the root of the repository into your Xcode project, and add it as a build dependency.</p>\n<h2 id=\"ibuild\">ibuild</h2>\n<p>A Swift static library of this project is also available for the ibuild build system. Learn more about ibuild <a href=\"https://github.com/IMcD23/ibuild\">here</a></p>\n<h1 id=\"author\">Author</h1>\n<p>Created by <a href=\"https://ianmcdowell.net\">Ian McDowell</a></p>\n<h1 id=\"license\">License</h1>\n<p>All code in this project is available under the license specified in the LICENSE file. However, since this project also bundles code from other projects, you are subject to those projects\' licenses as well.</p>'),
	(69,'louisdh','ios_system','https://raw.githubusercontent.com/louisdh/ios_system/master/README.md','2018-11-07 12:30:35','# ios_system: Drop-in replacement for system() in iOS programs\n\n\n<p align=\"center\">\n<img src=\"https://img.shields.io/badge/Platform-iOS%2011.0+-lightgrey.svg\" alt=\"Platform: iOS\">\n<a href=\"https://travis-ci.org/holzschu/ios_system\"><img src=\"https://travis-ci.org/holzschu/ios_system.svg?branch=master\" alt=\"Build Status\"/></a>\n<br>\n<a href=\"http://twitter.com/nholzschuch\"><img src=\"https://img.shields.io/badge/Twitter-@nholzschuch-blue.svg?style=flat\" alt=\"Twitter\"/></a>\n</p>\n\n\nWhen porting Unix utilities to iOS (vim, TeX, python...), sometimes the source code executes system commands, using `system()` calls. These calls are rejected at compile time, with: \n`error: \'system\' is unavailable: not available on iOS`. \n\nThis project provides a drop-in replacement for `system()`. Simply add the following lines at the beginning of you header file: \n```cpp\nextern int ios_system(char* cmd);\n#define system ios_system\n```\nlink with the `ios_system.framework`, and your calls to `system()` will be handled by this framework.\n\nThe commands available are defined in `ios_system.m`. They are dynamically loaded at run-time, and released after execution. They are configurable by changing the dynamic libraries embedded into the app. \n\nThere are, first, shell commands (`ls`, `cp`, `rm`...), archive commands (`curl`, `scp`, `sftp`, `tar`, `gzip`, `compress`...) plus a few interpreted languages (`python`, `lua`, `TeX`). Scripts written in one of the interpreted languages are also executed, if they are in the `$PATH`. \n\nFor each set of commands, we need to provide the corresponding dynamic library. Libraries for small commands are in this project. Library or Frameworks for interpreted languages are larger, and available separately: [python](https://github.com/holzschu/python_ios), [lua](https://github.com/holzschu/lua_ios) and [TeX](https://github.com/holzschu/lib-tex). Some commands (`curl`, `python`) require `OpenSSH` and `libssl2`, which you will have to download and compile separately.\n\nNetwork-based commands (nslookup, dig, host, ping, telnet) are also available as a separate dynamic library, [network_ios](https://github.com/holzschu/network_ios). Place the compiled library with the other libraries and add it to the embedded libraries of your application.\n\nThis `ios_system` framework has been successfully ported into two shells, [Blink](https://github.com/holzschu/blink) and [OpenTerm](https://github.com/louisdh/terminal) and into an editor, [iVim](https://github.com/holzschu/iVim). Each time, it provides a Unix look-and-feel (well, mostly feel). \n\n**Issues:** In iOS, you cannot write in the `~` directory, only in `~/Documents/`, `~/Library/` and `~/tmp`. Most Unix programs assume the configuration files are in `$HOME`. \nSo either you redefine `$HOME` to `~/Documents/` or you set configuration variables (using `setenv`) to some other place. This is done in the `initializeEnvironment()` function. \n\nHere\'s what I have:\n```powershell\nsetenv PATH = $PATH:~/Library/bin:~/Documents/bin\nsetenv PYTHONHOME = $HOME/Library/\nsetenv SSH_HOME = $HOME/Documents/\nsetenv CURL_HOME = $HOME/Documents/\nsetenv HGRCPATH = $HOME/Documents/.hgrc/\nsetenv SSL_CERT_FILE = $HOME/Documents/cacert.pem\n```\nYour Mileage May Vary. Note that iOS already defines `$HOME` and `$PATH`. \n\n## scp and sftp:\n\n`scp`and `sftp` are implemented by rewriting them as `curl` commands. For example, `scp user@host:~/distantfile localfile` becomes (internally) `curl scp://user@host/~/distantFile -o localFile`. This was done to keep the size of the framework as small as possible. It will work for most of the users and most of the commands. However, it has consequences:\n- `scp` from distant file to distant file probably won\'t work, only from local to distant or distant to local. \n- The flags are those from `curl`, not `scp`. Except `-q` (quiet) which I remapped to `-s` (silent). \n- The config file is `.curlrc`, not `.ssh/config`. \n- The library used internally is `libssh2`, not `OpenSSH`.\n\n\n## Installation:\n\n**The easy way:** run the script `./get_binaries.sh`. This will download the compiled versions of all existing frameworks (`ios_system.framework`, plus all the dynamic libraries, including `network_ios`). \n\n**The hard way:**\n\n- Run the script `./get_sources.sh`. This will download the latest sources form [Apple OpenSource](https://opensource.apple.com) and patch them for compatibility with iOS. \n- We need libSSH2 and OpenSSL. Either: \n    - **[Fast]** Run the script `./get_frameworks.sh` to download precompiled versions of `openSSL.framework` and `libSSH2.framework`.\n    - **[Slow]** Run the script `./get_frameworks_as_source.sh` to download the source for  `openSSL.framework` and `libSSH2.framework`, compile them, and move them to `Frameworks`. \n- Open the Xcode project `ios_system.xcodeproj` and hit build. This will create the `ios_system` framework, ready to be included in your own projects. \n- Compile the other targets as well: files, tar, curl, awk, shell, text, ssh_cmd. This will create the corresponding dynamic libraries.\n- Alternatively, type `xcodebuild -project ios_system.xcodeproj -alltargets -sdk iphoneos -configuration Debug -quiet` to build all targets.\n- If you need [python](https://github.com/holzschu/python_ios), [lua](https://github.com/holzschu/lua_ios), [TeX](https://github.com/holzschu/lib-tex) or [network_ios](https://github.com/holzschu/network_ios), download the corresponding projects and compile them. All these projects need the `ios_system` framework to compile.\n\n## Integration with your app:\n\nLink your application with the `ios_system.framework` framework, and embed (but don\'t link) the dynamic libraries corresponding to the commands you need (`libtar.dylib` if you need `tar`, `libfiles.dylib` for cp, rm, mv...).\n\n### Basic commands:\n\nThe simplest way to integrate `ios_system` into your app is to just replace all calls to `system()` with calls to `ios_system()`. If you need more control and information, the following functions are available: \n\n- `initializeEnvironment()` sets environment variables to sensible defaults. \n- `ios_executable(char* inputCmd)` returns true if `inputCmd` is one of the commands defined inside `ios_system`. \n- `NSArray* commandsAsArray()` returns an array with all the commands available, if you need them for helping users. \n- `NSString* commandsAsString()` same, but with a `NSString*`. \n- `NSString* getoptString(NSString* command)` returns a string containing all accepted flags for a given command (\"dfiPRrvW\" for \"rm\", for example). Letters are followed by \":\" if the flag cannot be combined with others. \n- `NSString* operatesOn(NSString* command)` tells you what this command expects as arguments, so you can auto-complete accordingly. Return values are \"file\", \"directory\" or \"no\". For example, \"cd\" returns \"directory\". \n- `int ios_setMiniRoot(NSString* mRoot)` lets you set the sandbox directory, so users are not exposed to files outside the sandbox. The argument is the path to a directory. It will not be possible to `cd` to directories above this one. Returns 1 if succesful, 0 if not. \n- `FILE* ios_popen(const char* inputCmd, const char* type)` opens a pipe between the current command and `inputCmd`. (drop-in replacement for `popen`). \n\n### More advance control: \n\n**replaceCommand**: `replaceCommand(NSString* commandName, int (*newFunction)(int argc, char *argv[]), bool allOccurences)` lets you replace an existing command implementation with your own, or add new commands without editing the source. \n\nSample use: `replaceCommand(@\"ls\", gnu_ls_main, true);`: Replaces all calls to `ls` to calls to `gnu_ls_main`. The last argument tells whether you want to replace only the function associated with `ls` (if `false`) or all the commands that used the function previously associated with `ls`(if true). For example, `compress` and `uncompress` are both done with the same function, `compress_main` (and the actual behaviour depends on `argv[0]`). Only you can know whether your replacement function handles both roles, or only one of them. \n\nIf the command does not already exist, your command is simply added to the list. \n\n**ios_execv(const char *path, char* const argv[])**: executes the command in `argv[0]` with the arguments `argv` (it doesn\'t use `path`). It is *not* a drop-in replacement for `execv` because it does not terminate the current process. `execv` is usually called after `fork()`, and `execv` terminates the child process. This is not possible in iOS. If `dup2` was called before `execv` to set stdin and stdout, `ios_execv` tries to do the right thing and pass these streams to the process started by `execv`. \n\n`ios_execve` also exists, but is just a pointer to `ios_execv` (we don\'t do anything with the environment for now). \n\n## Adding more commands:\n\n`ios_system` is OpenSource; you can extend it in any way you want. Keep in mind the intrinsic limitations: \n- Sandbox and API limitations still apply. Commands that require root privilege (like `traceroute`) are impossible.\n- Inside terminals we have limited interaction. Apps that require user input are unlikely to get it, or with no visual feedback. That could be solved, but it is hard.\n\nTo add a command:\n- create an issue: https://github.com/holzschu/ios_system/issues That will let others know you\'re working on it, and possibly join forces with you (that\'s the beauty of OpenSource). \n- find the source code for the command, preferrably with BSD license. [Apple OpenSource](https://opensource.apple.com) is a good place to start. Compile it first for OSX, to see if it works, and go through configuration. \n- make the following changes to the code: \n    - include `ios_error.h` (it will replace all calls to `exit` by calls to `pthread_exit`)\n    - replace calls to `warn`, `err`, `errx` and `warnx` by calls to `fprintf`, plus `pthread_exit` if needed.\n    - replace all occurences of `stdin`, `stdout`, `stderr` by `thread_stdin`, `thread_stdout`, `thread_stderr` (these are thread-local variables, taking a different value for each thread so we can pipe commands).\n    - replace all calls to `printf`, `write`,... with explicit calls to `fprintf(thread_stdout, ...)` (`ios_error.h` takes care of some of these).\n    - replace `STDIN_FILENO` with `fileno(stdin)`. Replace `STDOUT_FILENO` by calls to `fprintf` or `fwrite`; `fileno(thread_stdout)` does not always exist (it can be a stream with no files associated). Same with `stderr`. \n    - replace calls to `isatty()` by tests `(stdout == thread_stdout)`. Normally, this is true if we\'re in the iOS equivalent of a tty. \n    - make sure you initialize all variables at startup, and release all memory on exit.\n    - make all global variables thread-local with `__thread`, make sure local variables are marked with `static`. \n    - make sure your code doesn\'t use commands that don\'t work in a sandbox: `fork`, `exec`, `system`, `popen`, `isExecutableFileAtPath`, `access`... (some of these fail at compile time, others fail silently at run time). \n    - compile, edit `ios_system.m` to add your commands, and run. That\'s it. Test a lot. Side effects appear after several launches.\n    - if your command has a large code base, work out the difference in your edits and make a patch, rather than commit the entire code. See `get_sources_for_patching.sh` for an example. \n\n**Frequently asked commands:** here is a list of commands that are often requested, and my experience with them:\n- `ping`, `nslookup`, `telnet`: now provided in the [network_ios](https://github.com/holzschu/network_ios) package.\n- `traceroute` and most network analysis tools: require root privilege, so impossible inside a sandbox.\n- `unzip`: use `tar -xz`. \n- `nano`, `ed`: require user interaction, so currently impossible.\n- `vim`: like `ed`, but even more difficult (needs to access the entire screen, need to add lines to the keyboard for Escape, Tab... iVim is on the App Store, and can be accessed from inside OpenTerm using the `share` command. My fork of [iVim](https://github.com/holzschu/iVim) can launch shell commands with `:!`. It\'s easier to make an editor start commands than to make a terminal run an editor.\n- `sh`, `bash`, `zsh`: shells are hard to compile, even without the sandbox/API limitations. They also tend to take a lot of memory, which is a limited asset.\n- `git`: [WorkingCopy](https://workingcopyapp.com) does it very well, and you can transfer directories to your app, then transfer back to WorkingCopy. Also difficult to compile. \n\n\n### Licensing:\n\nAs much as possible, I used the BSD version of the tools. More precisely:\n- awk: <a href=\"https://github.com/onetrueawk/awk/blob/master/LICENSE\">OpenSource license</a>.\n- curl, scp, sftp: <a href=\"https://curl.haxx.se/docs/copyright.html\">MIT/X derivate license</a>.\n- lua: <a href=\"https://www.lua.org/license.html\">MIT License</a>.\n- python: <a href=\"https://docs.python.org/2.7/license.html\">Python license</a>.\n- libssh2: <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_(\"BSD_License_2.0\",_\"Revised_BSD_License\",_\"New_BSD_License\",_or_\"Modified_BSD_License\")\'>Revised BSD License</a> (a.k.a. 3-clause BSD license).\n- egrep, fgrep, grep, gzip, gunzip: <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_(\"Simplified_BSD_License\"_or_\"FreeBSD_License\")\'>Simplified BSD License</a> (2-clause BSD license).\n- cat, chflag, compress, cp, date, echo, env, link, ln, printenv, pwd, sed, tar, uncompress, uptime, <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_(\"BSD_License_2.0\",_\"Revised_BSD_License\",_\"New_BSD_License\",_or_\"Modified_BSD_License\")\'>Revised BSD License</a> (a.k.a. 3-clause BSD license).\n- chgrp, chksum, chmod, chown, df, du, groups, id, ls, mkdir, mv, readlink, rm, rmdir, stat, sum, touch, tr, uname, wc, whoami: <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#4-clause_license_(original_\"BSD_License\")\'>Original BSD License</a> (4-clause BSD license)\n- pdftex, luatex and all TeX-based programs: <a href=\"https://www.gnu.org/licenses/gpl.html\">GNU General Public License</a>.\n\nUsing BSD versions has consequences on the flags and how they work. For example, there are two versions of `sed`, the BSD version and the GNU version. They have roughly the same behaviour, but differ on `-i` (in place): the GNU version overwrites the file if you don\'t provide an extension, the BSD version won\'t work unless you provide the extension to use on the backup file (and will backup the input file with that extension). \n','<h1 id=\"ios_systemdropinreplacementforsysteminiosprograms\">ios_system: Drop-in replacement for system() in iOS programs</h1>\n<p align=\"center\">\n<img src=\"https://img.shields.io/badge/Platform-iOS%2011.0+-lightgrey.svg\" alt=\"Platform: iOS\">\n<a href=\"https://travis-ci.org/holzschu/ios_system\"><img src=\"https://travis-ci.org/holzschu/ios_system.svg?branch=master\" alt=\"Build Status\"/></a>\n<br>\n<a href=\"http://twitter.com/nholzschuch\"><img src=\"https://img.shields.io/badge/Twitter-@nholzschuch-blue.svg?style=flat\" alt=\"Twitter\"/></a>\n</p>\n<p>When porting Unix utilities to iOS (vim, TeX, python…), sometimes the source code executes system commands, using <code>system()</code> calls. These calls are rejected at compile time, with: \n<code>error: \'system\' is unavailable: not available on iOS</code>. </p>\n<p>This project provides a drop-in replacement for <code>system()</code>. Simply add the following lines at the beginning of you header file: </p>\n<pre><code class=\"cpp language-cpp\">extern int ios_system(char* cmd);\n#define system ios_system\n</code></pre>\n<p>link with the <code>ios_system.framework</code>, and your calls to <code>system()</code> will be handled by this framework.</p>\n<p>The commands available are defined in <code>ios_system.m</code>. They are dynamically loaded at run-time, and released after execution. They are configurable by changing the dynamic libraries embedded into the app. </p>\n<p>There are, first, shell commands (<code>ls</code>, <code>cp</code>, <code>rm</code>…), archive commands (<code>curl</code>, <code>scp</code>, <code>sftp</code>, <code>tar</code>, <code>gzip</code>, <code>compress</code>…) plus a few interpreted languages (<code>python</code>, <code>lua</code>, <code>TeX</code>). Scripts written in one of the interpreted languages are also executed, if they are in the <code>$PATH</code>. </p>\n<p>For each set of commands, we need to provide the corresponding dynamic library. Libraries for small commands are in this project. Library or Frameworks for interpreted languages are larger, and available separately: <a href=\"https://github.com/holzschu/python_ios\">python</a>, <a href=\"https://github.com/holzschu/lua_ios\">lua</a> and <a href=\"https://github.com/holzschu/lib-tex\">TeX</a>. Some commands (<code>curl</code>, <code>python</code>) require <code>OpenSSH</code> and <code>libssl2</code>, which you will have to download and compile separately.</p>\n<p>Network-based commands (nslookup, dig, host, ping, telnet) are also available as a separate dynamic library, <a href=\"https://github.com/holzschu/network_ios\">network_ios</a>. Place the compiled library with the other libraries and add it to the embedded libraries of your application.</p>\n<p>This <code>ios_system</code> framework has been successfully ported into two shells, <a href=\"https://github.com/holzschu/blink\">Blink</a> and <a href=\"https://github.com/louisdh/terminal\">OpenTerm</a> and into an editor, <a href=\"https://github.com/holzschu/iVim\">iVim</a>. Each time, it provides a Unix look-and-feel (well, mostly feel). </p>\n<p><strong>Issues:</strong> In iOS, you cannot write in the <code>~</code> directory, only in <code>~/Documents/</code>, <code>~/Library/</code> and <code>~/tmp</code>. Most Unix programs assume the configuration files are in <code>$HOME</code>. \nSo either you redefine <code>$HOME</code> to <code>~/Documents/</code> or you set configuration variables (using <code>setenv</code>) to some other place. This is done in the <code>initializeEnvironment()</code> function. </p>\n<p>Here\'s what I have:</p>\n<pre><code class=\"powershell language-powershell\">setenv PATH = $PATH:~/Library/bin:~/Documents/bin\nsetenv PYTHONHOME = $HOME/Library/\nsetenv SSH_HOME = $HOME/Documents/\nsetenv CURL_HOME = $HOME/Documents/\nsetenv HGRCPATH = $HOME/Documents/.hgrc/\nsetenv SSL_CERT_FILE = $HOME/Documents/cacert.pem\n</code></pre>\n<p>Your Mileage May Vary. Note that iOS already defines <code>$HOME</code> and <code>$PATH</code>. </p>\n<h2 id=\"scpandsftp\">scp and sftp:</h2>\n<p><code>scp</code>and <code>sftp</code> are implemented by rewriting them as <code>curl</code> commands. For example, <code>scp user@host:~/distantfile localfile</code> becomes (internally) <code>curl scp://user@host/~/distantFile -o localFile</code>. This was done to keep the size of the framework as small as possible. It will work for most of the users and most of the commands. However, it has consequences:</p>\n<ul>\n<li><code>scp</code> from distant file to distant file probably won\'t work, only from local to distant or distant to local. </li>\n<li>The flags are those from <code>curl</code>, not <code>scp</code>. Except <code>-q</code> (quiet) which I remapped to <code>-s</code> (silent). </li>\n<li>The config file is <code>.curlrc</code>, not <code>.ssh/config</code>. </li>\n<li>The library used internally is <code>libssh2</code>, not <code>OpenSSH</code>.</li>\n</ul>\n<h2 id=\"installation\">Installation:</h2>\n<p><strong>The easy way:</strong> run the script <code>./get_binaries.sh</code>. This will download the compiled versions of all existing frameworks (<code>ios_system.framework</code>, plus all the dynamic libraries, including <code>network_ios</code>). </p>\n<p><strong>The hard way:</strong></p>\n<ul>\n<li>Run the script <code>./get_sources.sh</code>. This will download the latest sources form <a href=\"https://opensource.apple.com\">Apple OpenSource</a> and patch them for compatibility with iOS. </li>\n<li>We need libSSH2 and OpenSSL. Either: <ul>\n<li><strong>[Fast]</strong> Run the script <code>./get_frameworks.sh</code> to download precompiled versions of <code>openSSL.framework</code> and <code>libSSH2.framework</code>.</li>\n<li><strong>[Slow]</strong> Run the script <code>./get_frameworks_as_source.sh</code> to download the source for  <code>openSSL.framework</code> and <code>libSSH2.framework</code>, compile them, and move them to <code>Frameworks</code>. </li></ul></li>\n<li>Open the Xcode project <code>ios_system.xcodeproj</code> and hit build. This will create the <code>ios_system</code> framework, ready to be included in your own projects. </li>\n<li>Compile the other targets as well: files, tar, curl, awk, shell, text, ssh_cmd. This will create the corresponding dynamic libraries.</li>\n<li>Alternatively, type <code>xcodebuild -project ios_system.xcodeproj -alltargets -sdk iphoneos -configuration Debug -quiet</code> to build all targets.</li>\n<li>If you need <a href=\"https://github.com/holzschu/python_ios\">python</a>, <a href=\"https://github.com/holzschu/lua_ios\">lua</a>, <a href=\"https://github.com/holzschu/lib-tex\">TeX</a> or <a href=\"https://github.com/holzschu/network_ios\">network_ios</a>, download the corresponding projects and compile them. All these projects need the <code>ios_system</code> framework to compile.</li>\n</ul>\n<h2 id=\"integrationwithyourapp\">Integration with your app:</h2>\n<p>Link your application with the <code>ios_system.framework</code> framework, and embed (but don\'t link) the dynamic libraries corresponding to the commands you need (<code>libtar.dylib</code> if you need <code>tar</code>, <code>libfiles.dylib</code> for cp, rm, mv…).</p>\n<h3 id=\"basiccommands\">Basic commands:</h3>\n<p>The simplest way to integrate <code>ios_system</code> into your app is to just replace all calls to <code>system()</code> with calls to <code>ios_system()</code>. If you need more control and information, the following functions are available: </p>\n<ul>\n<li><code>initializeEnvironment()</code> sets environment variables to sensible defaults. </li>\n<li><code>ios_executable(char* inputCmd)</code> returns true if <code>inputCmd</code> is one of the commands defined inside <code>ios_system</code>. </li>\n<li><code>NSArray* commandsAsArray()</code> returns an array with all the commands available, if you need them for helping users. </li>\n<li><code>NSString* commandsAsString()</code> same, but with a <code>NSString*</code>. </li>\n<li><code>NSString* getoptString(NSString* command)</code> returns a string containing all accepted flags for a given command (\"dfiPRrvW\" for \"rm\", for example). Letters are followed by \":\" if the flag cannot be combined with others. </li>\n<li><code>NSString* operatesOn(NSString* command)</code> tells you what this command expects as arguments, so you can auto-complete accordingly. Return values are \"file\", \"directory\" or \"no\". For example, \"cd\" returns \"directory\". </li>\n<li><code>int ios_setMiniRoot(NSString* mRoot)</code> lets you set the sandbox directory, so users are not exposed to files outside the sandbox. The argument is the path to a directory. It will not be possible to <code>cd</code> to directories above this one. Returns 1 if succesful, 0 if not. </li>\n<li><code>FILE* ios_popen(const char* inputCmd, const char* type)</code> opens a pipe between the current command and <code>inputCmd</code>. (drop-in replacement for <code>popen</code>). </li>\n</ul>\n<h3 id=\"moreadvancecontrol\">More advance control:</h3>\n<p><strong>replaceCommand</strong>: <code>replaceCommand(NSString* commandName, int (*newFunction)(int argc, char *argv[]), bool allOccurences)</code> lets you replace an existing command implementation with your own, or add new commands without editing the source. </p>\n<p>Sample use: <code>replaceCommand(@\"ls\", gnu_ls_main, true);</code>: Replaces all calls to <code>ls</code> to calls to <code>gnu_ls_main</code>. The last argument tells whether you want to replace only the function associated with <code>ls</code> (if <code>false</code>) or all the commands that used the function previously associated with <code>ls</code>(if true). For example, <code>compress</code> and <code>uncompress</code> are both done with the same function, <code>compress_main</code> (and the actual behaviour depends on <code>argv[0]</code>). Only you can know whether your replacement function handles both roles, or only one of them. </p>\n<p>If the command does not already exist, your command is simply added to the list. </p>\n<p><strong>ios_execv(const char <em>path, char</em> const argv[])</strong>: executes the command in <code>argv[0]</code> with the arguments <code>argv</code> (it doesn\'t use <code>path</code>). It is <em>not</em> a drop-in replacement for <code>execv</code> because it does not terminate the current process. <code>execv</code> is usually called after <code>fork()</code>, and <code>execv</code> terminates the child process. This is not possible in iOS. If <code>dup2</code> was called before <code>execv</code> to set stdin and stdout, <code>ios_execv</code> tries to do the right thing and pass these streams to the process started by <code>execv</code>. </p>\n<p><code>ios_execve</code> also exists, but is just a pointer to <code>ios_execv</code> (we don\'t do anything with the environment for now). </p>\n<h2 id=\"addingmorecommands\">Adding more commands:</h2>\n<p><code>ios_system</code> is OpenSource; you can extend it in any way you want. Keep in mind the intrinsic limitations: </p>\n<ul>\n<li>Sandbox and API limitations still apply. Commands that require root privilege (like <code>traceroute</code>) are impossible.</li>\n<li>Inside terminals we have limited interaction. Apps that require user input are unlikely to get it, or with no visual feedback. That could be solved, but it is hard.</li>\n</ul>\n<p>To add a command:</p>\n<ul>\n<li>create an issue: https://github.com/holzschu/ios_system/issues That will let others know you\'re working on it, and possibly join forces with you (that\'s the beauty of OpenSource). </li>\n<li>find the source code for the command, preferrably with BSD license. <a href=\"https://opensource.apple.com\">Apple OpenSource</a> is a good place to start. Compile it first for OSX, to see if it works, and go through configuration. </li>\n<li>make the following changes to the code: <ul>\n<li>include <code>ios_error.h</code> (it will replace all calls to <code>exit</code> by calls to <code>pthread_exit</code>)</li>\n<li>replace calls to <code>warn</code>, <code>err</code>, <code>errx</code> and <code>warnx</code> by calls to <code>fprintf</code>, plus <code>pthread_exit</code> if needed.</li>\n<li>replace all occurences of <code>stdin</code>, <code>stdout</code>, <code>stderr</code> by <code>thread_stdin</code>, <code>thread_stdout</code>, <code>thread_stderr</code> (these are thread-local variables, taking a different value for each thread so we can pipe commands).</li>\n<li>replace all calls to <code>printf</code>, <code>write</code>,… with explicit calls to <code>fprintf(thread_stdout, ...)</code> (<code>ios_error.h</code> takes care of some of these).</li>\n<li>replace <code>STDIN_FILENO</code> with <code>fileno(stdin)</code>. Replace <code>STDOUT_FILENO</code> by calls to <code>fprintf</code> or <code>fwrite</code>; <code>fileno(thread_stdout)</code> does not always exist (it can be a stream with no files associated). Same with <code>stderr</code>. </li>\n<li>replace calls to <code>isatty()</code> by tests <code>(stdout == thread_stdout)</code>. Normally, this is true if we\'re in the iOS equivalent of a tty. </li>\n<li>make sure you initialize all variables at startup, and release all memory on exit.</li>\n<li>make all global variables thread-local with <code>__thread</code>, make sure local variables are marked with <code>static</code>. </li>\n<li>make sure your code doesn\'t use commands that don\'t work in a sandbox: <code>fork</code>, <code>exec</code>, <code>system</code>, <code>popen</code>, <code>isExecutableFileAtPath</code>, <code>access</code>… (some of these fail at compile time, others fail silently at run time). </li>\n<li>compile, edit <code>ios_system.m</code> to add your commands, and run. That\'s it. Test a lot. Side effects appear after several launches.</li>\n<li>if your command has a large code base, work out the difference in your edits and make a patch, rather than commit the entire code. See <code>get_sources_for_patching.sh</code> for an example. </li></ul></li>\n</ul>\n<p><strong>Frequently asked commands:</strong> here is a list of commands that are often requested, and my experience with them:</p>\n<ul>\n<li><code>ping</code>, <code>nslookup</code>, <code>telnet</code>: now provided in the <a href=\"https://github.com/holzschu/network_ios\">network_ios</a> package.</li>\n<li><code>traceroute</code> and most network analysis tools: require root privilege, so impossible inside a sandbox.</li>\n<li><code>unzip</code>: use <code>tar -xz</code>. </li>\n<li><code>nano</code>, <code>ed</code>: require user interaction, so currently impossible.</li>\n<li><code>vim</code>: like <code>ed</code>, but even more difficult (needs to access the entire screen, need to add lines to the keyboard for Escape, Tab… iVim is on the App Store, and can be accessed from inside OpenTerm using the <code>share</code> command. My fork of <a href=\"https://github.com/holzschu/iVim\">iVim</a> can launch shell commands with <code>:!</code>. It\'s easier to make an editor start commands than to make a terminal run an editor.</li>\n<li><code>sh</code>, <code>bash</code>, <code>zsh</code>: shells are hard to compile, even without the sandbox/API limitations. They also tend to take a lot of memory, which is a limited asset.</li>\n<li><code>git</code>: <a href=\"https://workingcopyapp.com\">WorkingCopy</a> does it very well, and you can transfer directories to your app, then transfer back to WorkingCopy. Also difficult to compile. </li>\n</ul>\n<h3 id=\"licensing\">Licensing:</h3>\n<p>As much as possible, I used the BSD version of the tools. More precisely:</p>\n<ul>\n<li>awk: <a href=\"https://github.com/onetrueawk/awk/blob/master/LICENSE\">OpenSource license</a>.</li>\n<li>curl, scp, sftp: <a href=\"https://curl.haxx.se/docs/copyright.html\">MIT/X derivate license</a>.</li>\n<li>lua: <a href=\"https://www.lua.org/license.html\">MIT License</a>.</li>\n<li>python: <a href=\"https://docs.python.org/2.7/license.html\">Python license</a>.</li>\n<li>libssh2: <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_(\"BSD_License_2.0\",_\"Revised_BSD_License\",_\"New_BSD_License\",_or_\"Modified_BSD_License\")\'>Revised BSD License</a> (a.k.a. 3-clause BSD license).</li>\n<li>egrep, fgrep, grep, gzip, gunzip: <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_(\"Simplified_BSD_License\"_or_\"FreeBSD_License\")\'>Simplified BSD License</a> (2-clause BSD license).</li>\n<li>cat, chflag, compress, cp, date, echo, env, link, ln, printenv, pwd, sed, tar, uncompress, uptime, <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#3-clause_license_(\"BSD_License_2.0\",_\"Revised_BSD_License\",_\"New_BSD_License\",_or_\"Modified_BSD_License\")\'>Revised BSD License</a> (a.k.a. 3-clause BSD license).</li>\n<li>chgrp, chksum, chmod, chown, df, du, groups, id, ls, mkdir, mv, readlink, rm, rmdir, stat, sum, touch, tr, uname, wc, whoami: <a href=\'https://en.wikipedia.org/wiki/BSD_licenses#4-clause_license_(original_\"BSD_License\")\'>Original BSD License</a> (4-clause BSD license)</li>\n<li>pdftex, luatex and all TeX-based programs: <a href=\"https://www.gnu.org/licenses/gpl.html\">GNU General Public License</a>.</li>\n</ul>\n<p>Using BSD versions has consequences on the flags and how they work. For example, there are two versions of <code>sed</code>, the BSD version and the GNU version. They have roughly the same behaviour, but differ on <code>-i</code> (in place): the GNU version overwrites the file if you don\'t provide an extension, the BSD version won\'t work unless you provide the extension to use on the backup file (and will backup the input file with that extension). </p>'),
	(70,'louisdh','KeyCommandAlertController','https://raw.githubusercontent.com/louisdh/KeyCommandAlertController/master/README.md','2018-11-07 12:30:35','# KeyCommandAlertController\nThis project contains wrappers for ```UIAlertController``` and ```UIAlertAction``` to easily add keyboard shortcuts (known as ```key command```).\n\n![](readme-resources/example.gif)\n\nThe following example shows how the action sheet shown above is created:\n\n```swift\nlet alert = KeyCommandAlertController(title: \"Change background color\", message: nil, preferredStyle: .actionSheet)\n\nalert.popoverPresentationController?.barButtonItem = sender\n\nlet redShortcut = KeyCommandShortcut(input: \"B\", modifierFlags: .command)\nlet redAction = KeyCommandAlertAction(title: \"Blue\", style: .default, keyShortcut: redShortcut) { (action) in\n	self.makeBlue()\n}\n\nlet greenShortcut = KeyCommandShortcut(input: \"R\", modifierFlags: .command)\nlet greenAction = KeyCommandAlertAction(title: \"Red\", style: .default, keyShortcut: greenShortcut) { (action) in\n	self.makeRed()\n}\n\nlet cancelAction = KeyCommandAlertAction(title: \"Cancel\", style: .cancel)\n\nalert.addAction(redAction)\nalert.addAction(greenAction)\nalert.addAction(cancelAction)\n\npresent(alert, animated: true, completion: nil)\n```\n\n\n### TODO\n- [ ] Only show shortcuts in alert actions when external keyboard is connected','<h1 id=\"keycommandalertcontroller\">KeyCommandAlertController</h1>\n<p>This project contains wrappers for <code>UIAlertController</code> and <code>UIAlertAction</code> to easily add keyboard shortcuts (known as <code>key command</code>).</p>\n<p><img src=\"readme-resources/example.gif\" alt=\"\" /></p>\n<p>The following example shows how the action sheet shown above is created:</p>\n<pre><code class=\"swift language-swift\">let alert = KeyCommandAlertController(title: \"Change background color\", message: nil, preferredStyle: .actionSheet)\n\nalert.popoverPresentationController?.barButtonItem = sender\n\nlet redShortcut = KeyCommandShortcut(input: \"B\", modifierFlags: .command)\nlet redAction = KeyCommandAlertAction(title: \"Blue\", style: .default, keyShortcut: redShortcut) { (action) in\n    self.makeBlue()\n}\n\nlet greenShortcut = KeyCommandShortcut(input: \"R\", modifierFlags: .command)\nlet greenAction = KeyCommandAlertAction(title: \"Red\", style: .default, keyShortcut: greenShortcut) { (action) in\n    self.makeRed()\n}\n\nlet cancelAction = KeyCommandAlertAction(title: \"Cancel\", style: .cancel)\n\nalert.addAction(redAction)\nalert.addAction(greenAction)\nalert.addAction(cancelAction)\n\npresent(alert, animated: true, completion: nil)\n</code></pre>\n<h3 id=\"todo\">TODO</h3>\n<ul>\n<li>[ ] Only show shortcuts in alert actions when external keyboard is connected</li>\n</ul>'),
	(71,'louisdh','lioness','https://raw.githubusercontent.com/louisdh/lioness/master/README.md','2018-11-07 12:30:35','<p align=\"center\">\n  <b> Lioness </b> &bull;\n  <a href=\"https://github.com/louisdh/cub\">Cub</a> &bull;\n    <a href=\"https://github.com/louisdh/savannakit\">SavannaKit</a>\n</p>\n\n<p align=\"center\">\n<img src=\"docs/resources/readme/logo.png\" alt=\"Lioness Logo\" style=\"max-height: 300px\">\n</p>\n\n<h1 align=\"center\">The Lioness Programming Language</h1>\n\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/lioness\"><img src=\"https://travis-ci.org/louisdh/lioness.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/lioness\"><img src=\"https://codecov.io/gh/louisdh/lioness/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<img src=\"https://img.shields.io/badge/version-0.5.2-blue.svg\" style=\"max-height: 300px;\" alt=\"version 0.5.2\">\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4bc51d.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Carthage Compatible\"/></a>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.0.2-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/Platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS macOS tvOS watchOS\">\n<img src=\"https://img.shields.io/badge/extension-.lion-FF9C27.svg\" style=\"max-height: 300px;\" alt=\"Extension: .lion\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n\nLioness is a high-level, dynamic, programming language designed for mathematical purposes. This project includes a lexer, parser, compiler and interpreter. All of these are 100% written in Swift without dependencies. \n\nThe syntax of Lioness is inspired by Swift, and its feature set is akin to shader languages such as GLSL.\n\nThe standard library (abbreviated: stdlib) contains basic functions for number manipulation, including: max/min, ceil, floor, trigonometry, etc. However, more trivial functions, such as to calculate prime numbers, are not considered relevant for the standard library.\n\n\n## Source examples\nThe following Lioness code calculates factorials recursively:\n\n```swift\nfunc factorial(x) returns {\n	\n    if x > 1 {\n        return x * factorial(x - 1)\n    }\n	\n    return 1\n}\n\na = factorial(5) // a = 120\n```\n\nThe following Lioness code uses a ```do times``` loop:\n\n```swift\na = 1\nn = 10\ndo n times {\n    a += a\n}\n// a = 1024\n```\n\n*More examples can be found [here](Source%20examples).*\n\n## Features\n\n* Minimalistic, yet expressive, syntax\n* No type system, language is dynamic\n* 5 basic operators: ```+```, ```-```, ```/```, ```*``` and ```^```\n	* ```^``` means \"to the power of\", e.g. ```2^10``` equals 1024\n	* all operators have a shorthand, e.g. ```+=``` for ```+```\n* Numbers\n	* All numbers are floating point \n* Booleans\n	* Can be evaluated from comparison\n	* Can be defined by literal: ```true``` or ```false``` \n* Functions\n	* Supports parameters, returning and recursion \n	* Can be declared inside other functions\n* Structs\n	* Can contain **any** type, including other structs  \n* Loops\n	* ```for```\n	* ```while```\n	* ```do times```\n	* ```repeat while```\n	* ```break```\n	* ```continue```\n* ```if``` / ```else``` / ```else if``` statements\n\n## Running\nSince the project does not rely on any dependencies, running it requires no setup. \n\n### macOS\nOpen ```Lioness.xcworkspace``` (preferably in the latest non-beta version of Xcode) and run the ```macOS Example``` target. The example will run the code in ```A.lion```. The output will be printed to the console.\n\n## Installing framework\n \n### Using Swift Package Manager\n\nAdd to your `Package.swift` file\'s `dependencies` section:\n\n```swift\n.Package(url: \"https://github.com/louisdh/lioness.git\",\n		         majorVersion: 0, minor: 5)\n```\n\n### Using [CocoaPods](http://cocoapods.org)\n\nAdd the following line to your ```Podfile```:\n\n```ruby\npod \'Lioness\', \'~> 0.5\'\n```\n\n### Using [Carthage](https://github.com/Carthage/Carthage)\nAdd the following line to your ```Cartfile```:\n\n```ruby\ngithub \"louisdh/lioness\" ~> 0.5\n```\nRun ```carthage update``` to build the framework and drag the built ```Lioness.framework``` into your Xcode project.\n\n\n## Standard Library\n*Please note: Lioness is currently in beta*\n\nThe Standard Library is currently under active development. There currently is no one document with everything from the stdlib. The best place to look for what\'s available is in [the source files](Sources/Lioness/Standard%20Library/Sources/).\n\n## Roadmap\n- [x] Structs\n- [ ] Completion suggestions (given an incomplete source string and insertion point)\n- [ ] Breakpoint support in interpreter\n- [ ] Stdlib documentation (Dash?)\n- [ ] Compiler warnings\n- [ ] Compiler optimizations\n- [x] Faster Lexer (without regex)\n- [x] Support emoticons for identifier names\n- [ ] ```guard``` statement\n- [ ] A lot more unit tests\n- [x] Linux support\n\n## Xcode file template\nLioness source files can easily be created with Xcode, see [XcodeTemplate.md](XcodeTemplate.md) for instructions.\n\n\n## Architecture\nA detailed explanation of the project\'s architecture can be found [here](docs/Architecture.md).\n\n## License\n\nThis project is available under the MIT license. See the LICENSE file for more info.\n','<p align=\"center\">\n  <b> Lioness </b> &bull;\n  <a href=\"https://github.com/louisdh/cub\">Cub</a> &bull;\n    <a href=\"https://github.com/louisdh/savannakit\">SavannaKit</a>\n</p>\n<p align=\"center\">\n<img src=\"docs/resources/readme/logo.png\" alt=\"Lioness Logo\" style=\"max-height: 300px\">\n</p>\n<h1 align=\"center\">The Lioness Programming Language</h1>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/lioness\"><img src=\"https://travis-ci.org/louisdh/lioness.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/lioness\"><img src=\"https://codecov.io/gh/louisdh/lioness/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<img src=\"https://img.shields.io/badge/version-0.5.2-blue.svg\" style=\"max-height: 300px;\" alt=\"version 0.5.2\">\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4bc51d.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Carthage Compatible\"/></a>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.0.2-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/Platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS macOS tvOS watchOS\">\n<img src=\"https://img.shields.io/badge/extension-.lion-FF9C27.svg\" style=\"max-height: 300px;\" alt=\"Extension: .lion\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n<p>Lioness is a high-level, dynamic, programming language designed for mathematical purposes. This project includes a lexer, parser, compiler and interpreter. All of these are 100% written in Swift without dependencies. </p>\n<p>The syntax of Lioness is inspired by Swift, and its feature set is akin to shader languages such as GLSL.</p>\n<p>The standard library (abbreviated: stdlib) contains basic functions for number manipulation, including: max/min, ceil, floor, trigonometry, etc. However, more trivial functions, such as to calculate prime numbers, are not considered relevant for the standard library.</p>\n<h2 id=\"sourceexamples\">Source examples</h2>\n<p>The following Lioness code calculates factorials recursively:</p>\n<pre><code class=\"swift language-swift\">func factorial(x) returns {\n\n    if x &gt; 1 {\n        return x * factorial(x - 1)\n    }\n\n    return 1\n}\n\na = factorial(5) // a = 120\n</code></pre>\n<p>The following Lioness code uses a <code>do times</code> loop:</p>\n<pre><code class=\"swift language-swift\">a = 1\nn = 10\ndo n times {\n    a += a\n}\n// a = 1024\n</code></pre>\n<p><em>More examples can be found <a href=\"Source%20examples\">here</a>.</em></p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Minimalistic, yet expressive, syntax</li>\n<li>No type system, language is dynamic</li>\n<li>5 basic operators: <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code> and <code>^</code><ul>\n<li><code>^</code> means \"to the power of\", e.g. <code>2^10</code> equals 1024</li>\n<li>all operators have a shorthand, e.g. <code>+=</code> for <code>+</code></li></ul></li>\n<li>Numbers<ul>\n<li>All numbers are floating point </li></ul></li>\n<li>Booleans<ul>\n<li>Can be evaluated from comparison</li>\n<li>Can be defined by literal: <code>true</code> or <code>false</code> </li></ul></li>\n<li>Functions<ul>\n<li>Supports parameters, returning and recursion </li>\n<li>Can be declared inside other functions</li></ul></li>\n<li>Structs<ul>\n<li>Can contain <strong>any</strong> type, including other structs  </li></ul></li>\n<li>Loops<ul>\n<li><code>for</code></li>\n<li><code>while</code></li>\n<li><code>do times</code></li>\n<li><code>repeat while</code></li>\n<li><code>break</code></li>\n<li><code>continue</code></li></ul></li>\n<li><code>if</code> / <code>else</code> / <code>else if</code> statements</li>\n</ul>\n<h2 id=\"running\">Running</h2>\n<p>Since the project does not rely on any dependencies, running it requires no setup. </p>\n<h3 id=\"macos\">macOS</h3>\n<p>Open <code>Lioness.xcworkspace</code> (preferably in the latest non-beta version of Xcode) and run the <code>macOS Example</code> target. The example will run the code in <code>A.lion</code>. The output will be printed to the console.</p>\n<h2 id=\"installingframework\">Installing framework</h2>\n<h3 id=\"usingswiftpackagemanager\">Using Swift Package Manager</h3>\n<p>Add to your <code>Package.swift</code> file\'s <code>dependencies</code> section:</p>\n<pre><code class=\"swift language-swift\">.Package(url: \"https://github.com/louisdh/lioness.git\",\n                 majorVersion: 0, minor: 5)\n</code></pre>\n<h3 id=\"usingcocoapodshttpcocoapodsorg\">Using <a href=\"http://cocoapods.org\">CocoaPods</a></h3>\n<p>Add the following line to your <code>Podfile</code>:</p>\n<pre><code class=\"ruby language-ruby\">pod \'Lioness\', \'~&gt; 0.5\'\n</code></pre>\n<h3 id=\"usingcarthagehttpsgithubcomcarthagecarthage\">Using <a href=\"https://github.com/Carthage/Carthage\">Carthage</a></h3>\n<p>Add the following line to your <code>Cartfile</code>:</p>\n<pre><code class=\"ruby language-ruby\">github \"louisdh/lioness\" ~&gt; 0.5\n</code></pre>\n<p>Run <code>carthage update</code> to build the framework and drag the built <code>Lioness.framework</code> into your Xcode project.</p>\n<h2 id=\"standardlibrary\">Standard Library</h2>\n<p><em>Please note: Lioness is currently in beta</em></p>\n<p>The Standard Library is currently under active development. There currently is no one document with everything from the stdlib. The best place to look for what\'s available is in <a href=\"Sources/Lioness/Standard%20Library/Sources/\">the source files</a>.</p>\n<h2 id=\"roadmap\">Roadmap</h2>\n<ul>\n<li>[x] Structs</li>\n<li>[ ] Completion suggestions (given an incomplete source string and insertion point)</li>\n<li>[ ] Breakpoint support in interpreter</li>\n<li>[ ] Stdlib documentation (Dash?)</li>\n<li>[ ] Compiler warnings</li>\n<li>[ ] Compiler optimizations</li>\n<li>[x] Faster Lexer (without regex)</li>\n<li>[x] Support emoticons for identifier names</li>\n<li>[ ] <code>guard</code> statement</li>\n<li>[ ] A lot more unit tests</li>\n<li>[x] Linux support</li>\n</ul>\n<h2 id=\"xcodefiletemplate\">Xcode file template</h2>\n<p>Lioness source files can easily be created with Xcode, see <a href=\"XcodeTemplate.md\">XcodeTemplate.md</a> for instructions.</p>\n<h2 id=\"architecture\">Architecture</h2>\n<p>A detailed explanation of the project\'s architecture can be found <a href=\"docs/Architecture.md\">here</a>.</p>\n<h2 id=\"license\">License</h2>\n<p>This project is available under the MIT license. See the LICENSE file for more info.</p>');

INSERT INTO `readme` (`id`, `author`, `name`, `url`, `timestamp`, `content`, `content_html`)
VALUES
	(72,'louisdh','LNPopupController','https://raw.githubusercontent.com/louisdh/LNPopupController/master/README.md','2018-11-07 12:30:35','#LNPopupController\n\n<img src=\"./Supplements/Artwork.png\" width=256/>\n\n`LNPopupController` is a framework for presenting view controllers as popups of other view controllers, much like the Apple Music and Podcasts apps.\n\n[![GitHub release](https://img.shields.io/github/release/LeoNatan/LNPopupController.svg)](https://github.com/LeoNatan/LNPopupController/releases) <span class=\"badge-paypal\"><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=BR68NJEJXGWL6\" title=\"Donate to this project using PayPal\"><img src=\"https://img.shields.io/badge/paypal-donate-yellow.svg?style=flat\" alt=\"PayPal Donation Button\" /></a></span>\n\n[![GitHub stars](https://img.shields.io/github/stars/LeoNatan/LNPopupController.svg)](https://github.com/LeoNatan/LNPopupController/stargazers) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/LICENSE) [![Carthage compatible](https://img.shields.io/badge/carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n\n[![GitHub issues](https://img.shields.io/github/issues-raw/LeoNatan/LNPopupController.svg)](https://github.com/LeoNatan/LNPopupController/issues) [![GitHub closed issues](https://img.shields.io/github/issues-closed-raw/badges/shields.svg)](https://github.com/LeoNatan/LNPopupController/issues?q=is%3Aissue+is%3Aclosed) [![GitHub contributors](https://img.shields.io/github/contributors/LeoNatan/LNPopupController.svg)](https://github.com/LeoNatan/LNPopupController/graphs/contributors)\n\n<img src=\"./Supplements/open_modern_popup.gif\" width=\"320\"/> <img src=\"./Supplements/close_modern_popup.gif\" width=\"320\"/>\n\n<img src=\"./Supplements/taps.gif\" width=\"320\"/> <img src=\"./Supplements/swipes.gif\" width=\"320\"/>\n\nSee a video of the modern popup look & feel [here](https://vimeo.com/194064291) and a video of the classic popup look & feel [here](https://vimeo.com/137020302).\n\nOnce a popup bar is presented with a content view controller, the user can swipe or tap the popup at any point to present the content controller. After finishing, the user dismisses the popup by either swiping or tapping the popup close button.\n\nThe framework is intended to be very generic and work in most situations, so it is implemented as a category over `UIViewController`. Each view controller can present a popup bar, docked to a bottom view. \nFor `UITabBarController` subclasses, the default dock view is the tab bar. \nFor `UINavigationController` subclasses, the default dock view is the toolbar.\nFor other classes, the popup bar is presented at the bottom of the screen. View controller subclasses can provide their own docking views.\n\nThe framework attempts to correct the top and bottom layout guides of the container controller and its child controllers as the popup bar is presented and dismissed.\n\nThe contents of the popup bar is built dynamically using the popup item objects (instances of the `LNPopupItem` class) associated with the popup content view controllers. To change the contents of the popup bar, you must therefore configure the popup items of your view controllers.\n\nGenerally, it is recommended to present the popup bar on the outermost container controller. So if you have a view controller container in a navigation controller, which is in turn contained in a tab bar controller, it is recommended to present the popup bar on the tab bar controller.\n\nCheck the demo project for many common use cases of the framework in various scenarios. It contains examples in Swift and Objective C.\n\n###Features\n\n* Available for iOS 9 and above, as an Xcode dynamic framework\n* Good citizen in modern UIKit world\n* Modern Objective C syntax for best Swift interoperability\n\n##Adding to Your Project\n\n###Carthage\n\nAdd the following to your Cartfile:\n\n```github \"LeoNatan/LNPopupController\"```\n\n###Manual\n\nDrag the `LNPopupController.xcodeproj` project to your project, and add `LNPopupController.framework` to **Embedded Binaries** in your project target\'s **General** tab. Xcode should sort everything else on its own.\n\n###CocoaPods\n\nCocoaPods is not supported. There are many reasons for this. Instead of CocoaPods, use Carthage. You can continue using CocoaPods for for your other dependencies and Carthage for `LNPopupController`.\n\n##Using the Framework\n\n###Swift\n\nWhile the framework is written in Objective C, it uses modern Objective C syntax, so using the framework in Swift should be very easy and intuitive.\n\n###Project Integration\n\nImport the module in your project:\n\n```objective-c\n@import LNPopupController;\n```\n\n###Popup Items\n\nA popup item always reflects information about the view controller with which it is associated. The popup item should provide a title and subtitles to display when the view controller is the content controller of a popup bar. In addition, the item may contain additional buttons to display on the left and right side of the popup bar using `leftBarButtonItems` and `rightBarButtonItems`.\n\n###Managing the Popup Bar\n\nTo present the popup bar, create a content controller, update its popup item and present the popup bar.\n\n```objective-c\nDemoPopupContentViewController* demoVC = [DemoPopupContentViewController new];\ndemoVC.view.backgroundColor = [UIColor redColor];\ndemoVC.popupItem.title = @\"Hello World\";\ndemoVC.popupItem.subtitle = @\"And a subtitle!\";\ndemoVC.popupItem.progress = 0.34;\n	\n[self.tabBarController presentPopupBarWithContentViewController:demoVC animated:YES completion:nil];\n```\n\nYou can present a new content controller while the popup bar is presented and when the popup itself is open.\n\nTo open and close the popup programatically, use `openPopupAnimated:completion:` and `closePopupAnimated:completion:` respectively.\n\n```objective-c\n[self.tabBarController openPopupAnimated:YES completion:nil];\n```\n\nAlternatively, you can present the popup bar and open the popup in one animation, using `presentPopupBarWithContentViewController:openPopup:animated:completion:`.\n\n```objective-c\n[self.tabBarController presentPopupBarWithContentViewController:demoVC openPopup:YES animated:YES completion:nil];\n```\n\nTo dismiss the popup bar, use `dismissPopupBarAnimated:completion:`.\n\n```objective-c\n[self.tabBarController dismissPopupBarAnimated:YES completion:nil];\n```\n\nIf the popup is open when dismissing the popup bar, the popup content will also be dismissed.\n\n###Popup Container View Controllers\n\nAny `UIViewController` subclasses can be popup container view controllers. The popup bar is attached to a bottom docking view. By default, `UITabBarController` and `UINavigationController` subclasses return their bottom bars as docking view, while other controllers return a hidden 0pt height view on the bottom of the view. In your subclass, override `bottomDockingViewForPopupBar` and `defaultFrameForBottomDockingView` and return your view and frame accordingly. **The returned view must be attached to the bottom of the view controller\'s view, or results are undefined.**\n\n```objective-c\n- (nonnull UIView *)bottomDockingViewForPopupBar\n{\n	return self.myCoolBottomView;\n}\n\n- (CGRect)defaultFrameForBottomDockingView\n{\n	CGRect bottomViewFrame = self.myCoolBottomView.frame;\n	\n	if(self.isMyCoolBottomViewHidden)\n	{\n		bottomViewFrame.origin = CGPointMake(bottomViewFrame.origin.x, self.view.bounds.size.height);\n	}\n	else\n	{\n		bottomViewFrame.origin = CGPointMake(bottomViewFrame.origin.x, self.view.bounds.size.height - bottomViewFrame.size.height);\n	}\n	\n	return bottomViewFrame;\n}\n``` \n\n###Appearance and Behavior\n\n####Modern Look and Feel\n\n`LNPopupController` provides two distinct style of popup look and feel, one based on iOS 10 Music app look and feel, and one based on iOS 9 look and feel. Popup bar styles are arbitrarily labeled \"prominent\" for iOS 10 style popup bar and \"compact\" for iOS 9 style. Popup interaction styles are labeled \"snap\" for iOS 10 style snapping popups and \"drag\" for iOS 9 interactive popup interaction. Popup close buttons styles are labeled \"chevron\" for iOS 10 style chevron close button and \"round\" for iOS 9 style close buttons. For each, there is a \"default\" style for choosing the most suitable one for the current operating system version.\n\nThe defaults for iOS 10 are:\n* Prominent bar style\n* Snap interaction style\n* Chevron close button style\n\nThe defaults for iOS 9 are:\n* Compact bar style\n* Drag interaction style\n* Round close button style\n\nCustomizing the popup bar style is achieved by setting the popup bar\'s `barStyle` property.\n\n```swift\nnavigationController.popupBar.barStyle = .compact\n```\n\nCustomizing the popup interaction style is achieved by setting the popup presentation containing controller\'s `popupInteractionStyle` property.\n\n```swift\nnavigationController.popupInteractionStyle = .drag\n```\n\nCustomizing the popup close button style is achieved by setting the popup content view\'s `popupCloseButtonStyle` property.\n\n```swift\nnavigationController.popupContentView.popupCloseButtonStyle = .round\n```\n\nTo disable the popup close button, set the `popupCloseButtonStyle` to `LNPopupCloseButtonStyleNone` / `.none`.\n\n####Popup Bar Appearance\n\nFor navigation and tab bar controller popup containers, the style of the popup bar is determined according to the bottom bar\'s appearance. For other container controllers, the style is the default style. For each style, title and button colors will be adjusted accordingly.\n\nTo update the popup bar appearance after updating the appearance of the bottom bar of the container controller, use the `updatePopupBarAppearance` method.\n\n<img src=\"./Supplements/modern_bar_style.gif\" width=\"320\"/> <img src=\"./Supplements/bar_style.gif\" width=\"320\"/>\n\nSupplying long text for the title and/or subtitle will result in a scrolling text. Otherwise, the text will be centered.\n\n<img src=\"./Supplements/modern_no_scroll.gif\" width=\"320\"/> <img src=\"./Supplements/scoll.gif\" width=\"320\"/>\n\nThe `hidesBottomBarWhenPushed` property is supported for navigation and tab bar controllers. When set, the popup bar will transition out together with the bottom bar of the container controller. **Opening the popup while it is hidden due to `hidesBottomBarWhenPushed` is not supported and may produce undefined behavior.**\n\n<img src=\"./Supplements/hidesBottomBar_TabBar.gif\" width=\"320\"/> <img src=\"./Supplements/hidesBottomBar_Toolbar.gif\" width=\"320\"/>\n\nStatus bar management of the popup content view controller is respected and applied when appropriate.\n\n<img src=\"./Supplements/statusbar_style.gif\" width=\"320\"/> <img src=\"./Supplements/statusbar_hidden.gif\" width=\"320\"/>\n\n###Customization\n\nCustomization can be achieved through the ```LNPopupBar``` and ```LNPopupContentView``` classes.\n\n####Popup Bar Customization\n\n```LNPopupBar``` exposes API to customize the popup bar\'s appearance, either through `UIAppearance` API or directly to popup bar objects.\n\n```objective-c\n[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setTitleTextAttributes:@{NSFontAttributeName: [UIFont fontWithName:@\"Chalkduster\" size:14], NSForegroundColorAttributeName: [UIColor yellowColor]}];\n[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setSubtitleTextAttributes:@{NSFontAttributeName: [UIFont fontWithName:@\"Chalkduster\" size:12], NSForegroundColorAttributeName: [UIColor greenColor]}];\n[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setBarStyle:UIBarStyleBlack];\n[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setTintColor:[UIColor yellowColor]];\n```\n\n<img src=\"./Supplements/modern_custom.png\" width=\"320\"/> <img src=\"./Supplements/custom1.png\" width=\"320\"/>\n\n####Popup Content View and Gesture Customization\n\n```LNPopupContentView``` exposes access to the popup close button and the popup interaction gesture recognizer.\n\n**Note:** Modify the popup interaction gesture recognizer with care. It is shared between opening the popup content, by panning the popup bar up (when the popup bar is closed), and closing the popup content, by panning the popup content view (when the popup bar is open). If you disable the gesture recognizer after opening the popup, you must monitor the state of the popup and reenable the gesture recognizer once closed by the user or through code.\n\n###Accessibility\n\nThe framework supports accessibility and will honor accessibility labels, hints and values. By default, the accessibility label of the popup bar is the title and subtitle provided by the popup item.\n\n<img src=\"./Supplements/default_bar_accessibility_label.png\"/>\n\nTo modify the accessibility label and hint of the popup bar, set the `accessibilityLabel` and `accessibilityHint` properties of the `LNPopupItem` object of the popup content view controller.\n\n```objc\ndemoVC.popupItem.accessibilityLabel = NSLocalizedString(@\"Custom popup bar accessibility label\", @\"\");\ndemoVC.popupItem.accessibilityHint = NSLocalizedString(@\"Custom popup bar accessibility hint\", @\"\");\n```\n\nTo add accessibility labels and hints to buttons, set the `accessibilityLabel` and `accessibilityHint` properties of the `UIBarButtonItem` objects.\n\n```objc\nUIBarButtonItem* upNext = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@\"next\"] style:UIBarButtonItemStylePlain target:nil action:NULL];\nupNext.accessibilityLabel = NSLocalizedString(@\"Up Next\", @\"\");\nupNext.accessibilityHint = NSLocalizedString(@\"Double Tap to Show Up Next List\", @\"\");\n```\nTo modify the accessibility label and hint of the popup close button, set the `accessibilityLabel` and `accessibilityHint` properties of the `LNPopupCloseButton` object of the popup container view controller.\n\n```objc\ntargetVC.popupContentView.popupCloseButton.accessibilityLabel = NSLocalizedString(@\"Custom popup button accessibility label\", @\"\");\ntargetVC.popupContentView.popupCloseButton.accessibilityHint = NSLocalizedString(@\"Custom popup button accessibility hint\", @\"\");\n```\n\nTo modify the accessibility label and value of the popup bar progress view, set the `accessibilityProgressLabel` and `accessibilityProgressValue` properties of the `LNPopupItem` object of the popup content view controller.\n\n```swift\ndemoVC.popupItem.accessibilityImageLabel = NSLocalizedString(\"Custom image label\", comment: \"\")\ndemoVC.popupItem.accessibilityProgressLabel = NSLocalizedString(\"Custom accessibility progress label\", comment: \"\")\ndemoVC.popupItem.accessibilityProgressValue = \"\\(accessibilityDateComponentsFormatter.stringFromTimeInterval(NSTimeInterval(popupItem.progress) * totalTime)!) \\(NSLocalizedString(\"of\", comment: \"\")) \\(accessibilityDateComponentsFormatter.stringFromTimeInterval(totalTime)!)\"\n```\n\n##Known Limitations\n\n* Navigation controller\'s `setToolbarHidden:` and `setToolbarHidden:animated:` are not supported.\n* Manually hiding tab bars is not supported by the framework or by Apple. **Do not hide the tab bar using `tabBar.hidden = YES`.**\n\n##Acknowledgements\n\nThe framework uses:\n* [MarqueeLabel](https://github.com/cbpowell/MarqueeLabel) Copyright (c) 2011-2015 Charles Powell\n\nAdditionally, the demo project uses:\n\n* [LoremIpsum](https://github.com/lukaskubanek/LoremIpsum) Copyright (c) 2013 Lukas Kubanek\n* [COSTouchVisualizer](https://github.com/conopsys/COSTouchVisualizer) Copyright (c) 2014 Joe Blau\n','<h1 id=\"lnpopupcontroller\">LNPopupController</h1>\n<p><img src=\"./Supplements/Artwork.png\" width=256/></p>\n<p><code>LNPopupController</code> is a framework for presenting view controllers as popups of other view controllers, much like the Apple Music and Podcasts apps.</p>\n<p><a href=\"https://github.com/LeoNatan/LNPopupController/releases\"><img src=\"https://img.shields.io/github/release/LeoNatan/LNPopupController.svg\" alt=\"GitHub release\" /></a> <span class=\"badge-paypal\"><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=BR68NJEJXGWL6\" title=\"Donate to this project using PayPal\"><img src=\"https://img.shields.io/badge/paypal-donate-yellow.svg?style=flat\" alt=\"PayPal Donation Button\" /></a></span></p>\n<p><a href=\"https://github.com/LeoNatan/LNPopupController/stargazers\"><img src=\"https://img.shields.io/github/stars/LeoNatan/LNPopupController.svg\" alt=\"GitHub stars\" /></a> <a href=\"https://raw.githubusercontent.com/LeoNatan/LNPopupController/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"GitHub license\" /></a> <a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage compatible\" /></a></p>\n<p><a href=\"https://github.com/LeoNatan/LNPopupController/issues\"><img src=\"https://img.shields.io/github/issues-raw/LeoNatan/LNPopupController.svg\" alt=\"GitHub issues\" /></a> <a href=\"https://github.com/LeoNatan/LNPopupController/issues?q=is%3Aissue+is%3Aclosed\"><img src=\"https://img.shields.io/github/issues-closed-raw/badges/shields.svg\" alt=\"GitHub closed issues\" /></a> <a href=\"https://github.com/LeoNatan/LNPopupController/graphs/contributors\"><img src=\"https://img.shields.io/github/contributors/LeoNatan/LNPopupController.svg\" alt=\"GitHub contributors\" /></a></p>\n<p><img src=\"./Supplements/open_modern_popup.gif\" width=\"320\"/> <img src=\"./Supplements/close_modern_popup.gif\" width=\"320\"/></p>\n<p><img src=\"./Supplements/taps.gif\" width=\"320\"/> <img src=\"./Supplements/swipes.gif\" width=\"320\"/></p>\n<p>See a video of the modern popup look &amp; feel <a href=\"https://vimeo.com/194064291\">here</a> and a video of the classic popup look &amp; feel <a href=\"https://vimeo.com/137020302\">here</a>.</p>\n<p>Once a popup bar is presented with a content view controller, the user can swipe or tap the popup at any point to present the content controller. After finishing, the user dismisses the popup by either swiping or tapping the popup close button.</p>\n<p>The framework is intended to be very generic and work in most situations, so it is implemented as a category over <code>UIViewController</code>. Each view controller can present a popup bar, docked to a bottom view. \nFor <code>UITabBarController</code> subclasses, the default dock view is the tab bar. \nFor <code>UINavigationController</code> subclasses, the default dock view is the toolbar.\nFor other classes, the popup bar is presented at the bottom of the screen. View controller subclasses can provide their own docking views.</p>\n<p>The framework attempts to correct the top and bottom layout guides of the container controller and its child controllers as the popup bar is presented and dismissed.</p>\n<p>The contents of the popup bar is built dynamically using the popup item objects (instances of the <code>LNPopupItem</code> class) associated with the popup content view controllers. To change the contents of the popup bar, you must therefore configure the popup items of your view controllers.</p>\n<p>Generally, it is recommended to present the popup bar on the outermost container controller. So if you have a view controller container in a navigation controller, which is in turn contained in a tab bar controller, it is recommended to present the popup bar on the tab bar controller.</p>\n<p>Check the demo project for many common use cases of the framework in various scenarios. It contains examples in Swift and Objective C.</p>\n<h3 id=\"features\">Features</h3>\n<ul>\n<li>Available for iOS 9 and above, as an Xcode dynamic framework</li>\n<li>Good citizen in modern UIKit world</li>\n<li>Modern Objective C syntax for best Swift interoperability</li>\n</ul>\n<h2 id=\"addingtoyourproject\">Adding to Your Project</h2>\n<h3 id=\"carthage\">Carthage</h3>\n<p>Add the following to your Cartfile:</p>\n<p><code>github \"LeoNatan/LNPopupController\"</code></p>\n<h3 id=\"manual\">Manual</h3>\n<p>Drag the <code>LNPopupController.xcodeproj</code> project to your project, and add <code>LNPopupController.framework</code> to <strong>Embedded Binaries</strong> in your project target\'s <strong>General</strong> tab. Xcode should sort everything else on its own.</p>\n<h3 id=\"cocoapods\">CocoaPods</h3>\n<p>CocoaPods is not supported. There are many reasons for this. Instead of CocoaPods, use Carthage. You can continue using CocoaPods for for your other dependencies and Carthage for <code>LNPopupController</code>.</p>\n<h2 id=\"usingtheframework\">Using the Framework</h2>\n<h3 id=\"swift\">Swift</h3>\n<p>While the framework is written in Objective C, it uses modern Objective C syntax, so using the framework in Swift should be very easy and intuitive.</p>\n<h3 id=\"projectintegration\">Project Integration</h3>\n<p>Import the module in your project:</p>\n<pre><code class=\"objective-c language-objective-c\">@import LNPopupController;\n</code></pre>\n<h3 id=\"popupitems\">Popup Items</h3>\n<p>A popup item always reflects information about the view controller with which it is associated. The popup item should provide a title and subtitles to display when the view controller is the content controller of a popup bar. In addition, the item may contain additional buttons to display on the left and right side of the popup bar using <code>leftBarButtonItems</code> and <code>rightBarButtonItems</code>.</p>\n<h3 id=\"managingthepopupbar\">Managing the Popup Bar</h3>\n<p>To present the popup bar, create a content controller, update its popup item and present the popup bar.</p>\n<pre><code class=\"objective-c language-objective-c\">DemoPopupContentViewController* demoVC = [DemoPopupContentViewController new];\ndemoVC.view.backgroundColor = [UIColor redColor];\ndemoVC.popupItem.title = @\"Hello World\";\ndemoVC.popupItem.subtitle = @\"And a subtitle!\";\ndemoVC.popupItem.progress = 0.34;\n\n[self.tabBarController presentPopupBarWithContentViewController:demoVC animated:YES completion:nil];\n</code></pre>\n<p>You can present a new content controller while the popup bar is presented and when the popup itself is open.</p>\n<p>To open and close the popup programatically, use <code>openPopupAnimated:completion:</code> and <code>closePopupAnimated:completion:</code> respectively.</p>\n<pre><code class=\"objective-c language-objective-c\">[self.tabBarController openPopupAnimated:YES completion:nil];\n</code></pre>\n<p>Alternatively, you can present the popup bar and open the popup in one animation, using <code>presentPopupBarWithContentViewController:openPopup:animated:completion:</code>.</p>\n<pre><code class=\"objective-c language-objective-c\">[self.tabBarController presentPopupBarWithContentViewController:demoVC openPopup:YES animated:YES completion:nil];\n</code></pre>\n<p>To dismiss the popup bar, use <code>dismissPopupBarAnimated:completion:</code>.</p>\n<pre><code class=\"objective-c language-objective-c\">[self.tabBarController dismissPopupBarAnimated:YES completion:nil];\n</code></pre>\n<p>If the popup is open when dismissing the popup bar, the popup content will also be dismissed.</p>\n<h3 id=\"popupcontainerviewcontrollers\">Popup Container View Controllers</h3>\n<p>Any <code>UIViewController</code> subclasses can be popup container view controllers. The popup bar is attached to a bottom docking view. By default, <code>UITabBarController</code> and <code>UINavigationController</code> subclasses return their bottom bars as docking view, while other controllers return a hidden 0pt height view on the bottom of the view. In your subclass, override <code>bottomDockingViewForPopupBar</code> and <code>defaultFrameForBottomDockingView</code> and return your view and frame accordingly. <strong>The returned view must be attached to the bottom of the view controller\'s view, or results are undefined.</strong></p>\n<pre><code class=\"objective-c language-objective-c\">- (nonnull UIView *)bottomDockingViewForPopupBar\n{\n    return self.myCoolBottomView;\n}\n\n- (CGRect)defaultFrameForBottomDockingView\n{\n    CGRect bottomViewFrame = self.myCoolBottomView.frame;\n\n    if(self.isMyCoolBottomViewHidden)\n    {\n        bottomViewFrame.origin = CGPointMake(bottomViewFrame.origin.x, self.view.bounds.size.height);\n    }\n    else\n    {\n        bottomViewFrame.origin = CGPointMake(bottomViewFrame.origin.x, self.view.bounds.size.height - bottomViewFrame.size.height);\n    }\n\n    return bottomViewFrame;\n}\n</code></pre>\n<h3 id=\"appearanceandbehavior\">Appearance and Behavior</h3>\n<h4 id=\"modernlookandfeel\">Modern Look and Feel</h4>\n<p><code>LNPopupController</code> provides two distinct style of popup look and feel, one based on iOS 10 Music app look and feel, and one based on iOS 9 look and feel. Popup bar styles are arbitrarily labeled \"prominent\" for iOS 10 style popup bar and \"compact\" for iOS 9 style. Popup interaction styles are labeled \"snap\" for iOS 10 style snapping popups and \"drag\" for iOS 9 interactive popup interaction. Popup close buttons styles are labeled \"chevron\" for iOS 10 style chevron close button and \"round\" for iOS 9 style close buttons. For each, there is a \"default\" style for choosing the most suitable one for the current operating system version.</p>\n<p>The defaults for iOS 10 are:</p>\n<ul>\n<li>Prominent bar style</li>\n<li>Snap interaction style</li>\n<li>Chevron close button style</li>\n</ul>\n<p>The defaults for iOS 9 are:</p>\n<ul>\n<li>Compact bar style</li>\n<li>Drag interaction style</li>\n<li>Round close button style</li>\n</ul>\n<p>Customizing the popup bar style is achieved by setting the popup bar\'s <code>barStyle</code> property.</p>\n<pre><code class=\"swift language-swift\">navigationController.popupBar.barStyle = .compact\n</code></pre>\n<p>Customizing the popup interaction style is achieved by setting the popup presentation containing controller\'s <code>popupInteractionStyle</code> property.</p>\n<pre><code class=\"swift language-swift\">navigationController.popupInteractionStyle = .drag\n</code></pre>\n<p>Customizing the popup close button style is achieved by setting the popup content view\'s <code>popupCloseButtonStyle</code> property.</p>\n<pre><code class=\"swift language-swift\">navigationController.popupContentView.popupCloseButtonStyle = .round\n</code></pre>\n<p>To disable the popup close button, set the <code>popupCloseButtonStyle</code> to <code>LNPopupCloseButtonStyleNone</code> / <code>.none</code>.</p>\n<h4 id=\"popupbarappearance\">Popup Bar Appearance</h4>\n<p>For navigation and tab bar controller popup containers, the style of the popup bar is determined according to the bottom bar\'s appearance. For other container controllers, the style is the default style. For each style, title and button colors will be adjusted accordingly.</p>\n<p>To update the popup bar appearance after updating the appearance of the bottom bar of the container controller, use the <code>updatePopupBarAppearance</code> method.</p>\n<p><img src=\"./Supplements/modern_bar_style.gif\" width=\"320\"/> <img src=\"./Supplements/bar_style.gif\" width=\"320\"/></p>\n<p>Supplying long text for the title and/or subtitle will result in a scrolling text. Otherwise, the text will be centered.</p>\n<p><img src=\"./Supplements/modern_no_scroll.gif\" width=\"320\"/> <img src=\"./Supplements/scoll.gif\" width=\"320\"/></p>\n<p>The <code>hidesBottomBarWhenPushed</code> property is supported for navigation and tab bar controllers. When set, the popup bar will transition out together with the bottom bar of the container controller. <strong>Opening the popup while it is hidden due to <code>hidesBottomBarWhenPushed</code> is not supported and may produce undefined behavior.</strong></p>\n<p><img src=\"./Supplements/hidesBottomBar_TabBar.gif\" width=\"320\"/> <img src=\"./Supplements/hidesBottomBar_Toolbar.gif\" width=\"320\"/></p>\n<p>Status bar management of the popup content view controller is respected and applied when appropriate.</p>\n<p><img src=\"./Supplements/statusbar_style.gif\" width=\"320\"/> <img src=\"./Supplements/statusbar_hidden.gif\" width=\"320\"/></p>\n<h3 id=\"customization\">Customization</h3>\n<p>Customization can be achieved through the <code>LNPopupBar</code> and <code>LNPopupContentView</code> classes.</p>\n<h4 id=\"popupbarcustomization\">Popup Bar Customization</h4>\n<p><code>LNPopupBar</code> exposes API to customize the popup bar\'s appearance, either through <code>UIAppearance</code> API or directly to popup bar objects.</p>\n<pre><code class=\"objective-c language-objective-c\">[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setTitleTextAttributes:@{NSFontAttributeName: [UIFont fontWithName:@\"Chalkduster\" size:14], NSForegroundColorAttributeName: [UIColor yellowColor]}];\n[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setSubtitleTextAttributes:@{NSFontAttributeName: [UIFont fontWithName:@\"Chalkduster\" size:12], NSForegroundColorAttributeName: [UIColor greenColor]}];\n[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setBarStyle:UIBarStyleBlack];\n[[LNPopupBar appearanceWhenContainedInInstancesOfClasses:@[[UINavigationController class]]] setTintColor:[UIColor yellowColor]];\n</code></pre>\n<p><img src=\"./Supplements/modern_custom.png\" width=\"320\"/> <img src=\"./Supplements/custom1.png\" width=\"320\"/></p>\n<h4 id=\"popupcontentviewandgesturecustomization\">Popup Content View and Gesture Customization</h4>\n<p><code>LNPopupContentView</code> exposes access to the popup close button and the popup interaction gesture recognizer.</p>\n<p><strong>Note:</strong> Modify the popup interaction gesture recognizer with care. It is shared between opening the popup content, by panning the popup bar up (when the popup bar is closed), and closing the popup content, by panning the popup content view (when the popup bar is open). If you disable the gesture recognizer after opening the popup, you must monitor the state of the popup and reenable the gesture recognizer once closed by the user or through code.</p>\n<h3 id=\"accessibility\">Accessibility</h3>\n<p>The framework supports accessibility and will honor accessibility labels, hints and values. By default, the accessibility label of the popup bar is the title and subtitle provided by the popup item.</p>\n<p><img src=\"./Supplements/default_bar_accessibility_label.png\"/></p>\n<p>To modify the accessibility label and hint of the popup bar, set the <code>accessibilityLabel</code> and <code>accessibilityHint</code> properties of the <code>LNPopupItem</code> object of the popup content view controller.</p>\n<pre><code class=\"objc language-objc\">demoVC.popupItem.accessibilityLabel = NSLocalizedString(@\"Custom popup bar accessibility label\", @\"\");\ndemoVC.popupItem.accessibilityHint = NSLocalizedString(@\"Custom popup bar accessibility hint\", @\"\");\n</code></pre>\n<p>To add accessibility labels and hints to buttons, set the <code>accessibilityLabel</code> and <code>accessibilityHint</code> properties of the <code>UIBarButtonItem</code> objects.</p>\n<pre><code class=\"objc language-objc\">UIBarButtonItem* upNext = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@\"next\"] style:UIBarButtonItemStylePlain target:nil action:NULL];\nupNext.accessibilityLabel = NSLocalizedString(@\"Up Next\", @\"\");\nupNext.accessibilityHint = NSLocalizedString(@\"Double Tap to Show Up Next List\", @\"\");\n</code></pre>\n<p>To modify the accessibility label and hint of the popup close button, set the <code>accessibilityLabel</code> and <code>accessibilityHint</code> properties of the <code>LNPopupCloseButton</code> object of the popup container view controller.</p>\n<pre><code class=\"objc language-objc\">targetVC.popupContentView.popupCloseButton.accessibilityLabel = NSLocalizedString(@\"Custom popup button accessibility label\", @\"\");\ntargetVC.popupContentView.popupCloseButton.accessibilityHint = NSLocalizedString(@\"Custom popup button accessibility hint\", @\"\");\n</code></pre>\n<p>To modify the accessibility label and value of the popup bar progress view, set the <code>accessibilityProgressLabel</code> and <code>accessibilityProgressValue</code> properties of the <code>LNPopupItem</code> object of the popup content view controller.</p>\n<pre><code class=\"swift language-swift\">demoVC.popupItem.accessibilityImageLabel = NSLocalizedString(\"Custom image label\", comment: \"\")\ndemoVC.popupItem.accessibilityProgressLabel = NSLocalizedString(\"Custom accessibility progress label\", comment: \"\")\ndemoVC.popupItem.accessibilityProgressValue = \"\\(accessibilityDateComponentsFormatter.stringFromTimeInterval(NSTimeInterval(popupItem.progress) * totalTime)!) \\(NSLocalizedString(\"of\", comment: \"\")) \\(accessibilityDateComponentsFormatter.stringFromTimeInterval(totalTime)!)\"\n</code></pre>\n<h2 id=\"knownlimitations\">Known Limitations</h2>\n<ul>\n<li>Navigation controller\'s <code>setToolbarHidden:</code> and <code>setToolbarHidden:animated:</code> are not supported.</li>\n<li>Manually hiding tab bars is not supported by the framework or by Apple. <strong>Do not hide the tab bar using <code>tabBar.hidden = YES</code>.</strong></li>\n</ul>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>The framework uses:</p>\n<ul>\n<li><a href=\"https://github.com/cbpowell/MarqueeLabel\">MarqueeLabel</a> Copyright (c) 2011-2015 Charles Powell</li>\n</ul>\n<p>Additionally, the demo project uses:</p>\n<ul>\n<li><a href=\"https://github.com/lukaskubanek/LoremIpsum\">LoremIpsum</a> Copyright (c) 2013 Lukas Kubanek</li>\n<li><a href=\"https://github.com/conopsys/COSTouchVisualizer\">COSTouchVisualizer</a> Copyright (c) 2014 Joe Blau</li>\n</ul>'),
	(73,'louisdh','lottie-ios','https://raw.githubusercontent.com/louisdh/lottie-ios/master/README.md','2018-11-07 12:30:35','# Lottie for iOS, MacOS (and [Android](https://github.com/airbnb/lottie-android) and [React Native](https://github.com/airbnb/lottie-react-native))\n\n### Table of Contents\n- [Introduction](#introduction)\n- [Installing Lottie](#installing-lottie)\n- [iOS Sample App](#ios-sample-app)\n- [MacOS Sample App](#macos-sample-app)\n- [Objective C Examples](#objective-c-examples)\n- [Swift Examples](#swift-examples)\n- [Debugging Lottie](#debugging)\n- [iOS View Controller Transitioning](#ios-view-controller-transitioning)\n- [Changing Animations At Runtime](#changing-animations-at-runtime)\n- [Supported After Effects Features](#supported-after-effects-features)\n- [Currently Unsupported After Effects Features](#currently-unsupported-after-effects-features)\n- [Community Contributions](#community-contributions)\n- [Alternatives](#alternatives)\n- [Why is it called Lottie?](#why-is-it-called-lottie)\n- [Contributing](#contributing)\n- [Issues or feature requests?](#issues-or-feature-requests)\n\n\n## Introduction\n\nLottie is a mobile library for Android and iOS that parses [Adobe After Effects](http://www.adobe.com/products/aftereffects.html) animations exported as json with [bodymovin](https://github.com/bodymovin/bodymovin) and renders the vector animations natively on mobile and through React Native!\n\nFor the first time, designers can create **and ship** beautiful animations without an engineer painstakingly recreating it by hand.\nSince the animation is backed by JSON they are extremely small in size but can be large in complexity!\nAnimations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed.\nLottie can play or loop just a portion of the animation as well, the possibilities are endless!\nAnimations can even be ***changed at runtime*** in various ways! Change the color, position or any keyframable value!\nLottie also supports native UIViewController Transitions out of the box!\n\nHere is just a small sampling of the power of Lottie\n\n![Example1](_Gifs/Examples1.gif)\n![Example2](_Gifs/Examples2.gif)\n\n<img src=\"_Gifs/Community 2_3.gif\" />\n\n![Example3](_Gifs/Examples3.gif)\n\n![Abcs](_Gifs/Examples4.gif)\n\n## Installing Lottie\n\n### Github Repo\nYou can pull the [Lottie Github Repo](https://github.com/airbnb/lottie-ios/) and include the Lottie.xcodeproj to build a dynamic or static library.\n\n### Cocoapods\nGet [Cocoapods](https://cocoapods.org/)\nAdd the pod to your podfile\n```\npod \'lottie-ios\'\n```\nrun\n```\npod install\n```\n\nAfter installing the cocoapod into your project import Lottie with\nObjective C\n`#import <Lottie/Lottie.h>` \nSwift\n`import Lottie`\n\n### Carthage\nGet [Carthage](https://github.com/Carthage/Carthage)\n\nAdd Lottie to your Cartfile\n```\ngithub \"airbnb/lottie-ios\" \"master\"\n```\nrun\n```\ncarthage update\n```\n\nIn your application targets “General” tab under the “Linked Frameworks and Libraries” section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that `carthage update` produced.\n\n## iOS Sample App\n\nClone this repo and try out [the Sample App](https://github.com/airbnb/lottie-ios/tree/master/Example)\nThe repo can build a MacOS Example and an iOS Example\n\nThe iOS Example App demos several of the features of Lottie\n\n![Example 1](_Gifs/iosexample1.png)![Example 2](_Gifs/iosexample2.png)\n![Example 3](_Gifs/iosexample3.png)\n\nThe animation Explorer allows you to scrub, play, loop, and resize animations.\nAnimations can be loaded from the app bundle or from [Lottie Files](http://www.lottiefiles.com) using the built in QR Code reader.\n\n## MacOS Sample App\n\nClone this repo and try out [the Sample App](https://github.com/airbnb/lottie-ios/tree/master/Example)\nThe repo can build a MacOS Example and an iOS Example\n\n![Lottie Viewer](_Gifs/macexample.png)\n\nThe Lottie Viewer for MacOS allows you to drag and drop JSON files to open, play, scrub and loop animations. This app is backed by the same animation code as the iOS app, so you will get an accurate representation of Mac and iOS animations.\n\n\n## Objective C Examples\n\n\nLottie animations can be loaded from bundled JSON or from a URL\nTo bundle JSON just add it and any images that the animation requires to your target in xcode.\n\n```objective-c\nLOTAnimationView *animation = [LOTAnimationView animationNamed:@\"Lottie\"];\n[self.view addSubview:animation];\n[animation playWithCompletion:^(BOOL animationFinished) {\n// Do Something\n}];\n```\n\nIf you are working with multiple bundles you can use.\n\n```objective-c\nLOTAnimationView *animation = [LOTAnimationView animationNamed:@\"Lottie\" inBundle:[NSBundle YOUR_BUNDLE]];\n[self.view addSubview:animation];\n[animation playWithCompletion:^(BOOL animationFinished) {\n// Do Something\n}];\n```\n\nOr you can load it programmatically from a NSURL\n```objective-c\nLOTAnimationView *animation = [[LOTAnimationView alloc] initWithContentsOfURL:[NSURL URLWithString:URL]];\n[self.view addSubview:animation];\n```\n\nLottie supports the iOS `UIViewContentModes` aspectFit, aspectFill and scaleFill\n\nYou can also set the animation progress interactively.\n```objective-c\nCGPoint translation = [gesture getTranslationInView:self.view];\nCGFloat progress = translation.y / self.view.bounds.size.height;\nanimationView.animationProgress = progress;\n```\n\nOr you can play just a portion of the animation:\n```objective-c\n[lottieAnimation playFromProgress:0.25 toProgress:0.5 withCompletion:^(BOOL animationFinished) {\n// Do Something\n}];\n```\n## Swift Examples\n\nLottie animations can be loaded from bundled JSON or from a URL\nTo bundle JSON just add it and any images that the animation requires to your target in xcode.\n\n```swift\nlet animationView = LOTAnimationView(name: \"LottieLogo\")\nself.view.addSubview(animationView)\nanimationView.play{ (finished) in\n      // Do Something\n}\n```\n\nIf your animation is in another bundle you can use\n```swift\nlet animationView = LOTAnimationView(name: \"LottieLogo\" bundle:yourBundle)\nself.view.addSubview(animationView)\nanimationView.play()\n```\n\nOr you can load it asynchronously from a URL\n```swift\nlet animationView = LOTAnimationView(contentsOf: WebURL)\nself.view.addSubview(animationView)\nanimationView.play()\n```\n\nYou can also set the animation progress interactively.\n```swift\nlet translation = gesture.getTranslationInView(self.view)\nlet progress = translation.y / self.view.bounds.size.height;\nanimationView.animationProgress = progress\n```\n\nOr you can play just a portion of the animation:\n```swift\nanimationView.play(fromProgress: 0.25, toProgress: 0.5, withCompletion: nil)\n```\n\n## iOS View Controller Transitioning\n\nLottie comes with a `UIViewController` animation-controller for making custom viewController transitions!\n\n![Transition1](_Gifs/transitionMasked.gif)\n![Transition2](_Gifs/transitionPosition.gif)\n\nJust become the delegate for a transition\n\n```objective-c\n- (void)_showTransitionA {\n  ToAnimationViewController *vc = [[ToAnimationViewController alloc] init];\n  vc.transitioningDelegate = self;\n  [self presentViewController:vc animated:YES completion:NULL];\n}\n```\n\nAnd implement the delegate methods with a `LOTAnimationTransitionController`\n\n```objective-c\n#pragma mark -- View Controller Transitioning\n\n- (id<UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented\npresentingController:(UIViewController *)presenting\nsourceController:(UIViewController *)source {\nLOTAnimationTransitionController *animationController = [[LOTAnimationTransitionController alloc] initWithAnimationNamed:@\"vcTransition1\"\nfromLayerNamed:@\"outLayer\"\ntoLayerNamed:@\"inLayer\"\napplyAnimationTransform:NO];\nreturn animationController;\n}\n\n- (id<UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed {\nLOTAnimationTransitionController *animationController = [[LOTAnimationTransitionController alloc] initWithAnimationNamed:@\"vcTransition2\"\nfromLayerNamed:@\"outLayer\"\ntoLayerNamed:@\"inLayer\"\napplyAnimationTransform:NO];\nreturn animationController;\n}\n\n```\n\nBy setting `applyAnimationTransform` to YES you can make the Lottie animation move the from and to view controllers. They will be positioned at the origin of the layer. When set to NO Lottie just masks the view controller with the specified layer while resepecting z order.\n\n## Debugging\nLottie has a couple of debugging features to know about. \nWhen an animation is loaded unsupported features are logged out in the console with their function names.\n\nIf you checkout LOTHelpers.h you will see two debug flags. `ENABLE_DEBUG_LOGGING` and `ENABLE_DEBUG_SHAPES`. \n`ENABLE_DEBUG_LOGGING` increases the verbosity of Lottie Logging. It logs anytime an animation node is set during animation. If your animation if not working, turn this on and play your animation. The console log might give you some clues as to whats going on.\n\n`ENABLE_DEBUG_SHAPES` Draws a colored square for the anchor-point of every layer and shape. This is helpful to see if anything is on screen.\n\n### Keypaths\n\nLOTAnimationView provides `- (void)logHierarchyKeypaths` which will recursively log all settable keypaths for the animation. This is helpful for changing animationations at runtime.\n\n## Changing Animations At Runtime\n\nLottie can do more than just play beautiful animations. Lottie allows you to **change** animations at runtime.\n\n### Say we want to create 4 toggle switches.\n![Toggle](_Gifs/switch_Normal.gif)\nIts easy to create the four switches and play them:\n```swift\nlet animationView = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView)\nanimationView.frame.origin.x = 40\nanimationView.frame.origin.y = 20\nanimationView.autoReverseAnimation = true\nanimationView.loopAnimation = true\nanimationView.play()\n\nlet animationView2 = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView2)\nanimationView2.frame.origin.x = 40\nanimationView2.frame.origin.y = animationView.frame.maxY + 4\nanimationView2.autoReverseAnimation = true\nanimationView2.loopAnimation = true\nanimationView2.play()\n\nlet animationView3 = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView3)\nanimationView3.frame.origin.x = 40\nanimationView3.frame.origin.y = animationView2.frame.maxY + 4\nanimationView3.autoReverseAnimation = true\nanimationView3.loopAnimation = true\nanimationView3.play()\n\nlet animationView4 = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView4)\nanimationView4.frame.origin.x = 40\nanimationView4.frame.origin.y = animationView3.frame.maxY + 4\nanimationView4.autoReverseAnimation = true\nanimationView4.loopAnimation = true\nanimationView4.play()\n\n```\n### Now lets change their colors\n![Recolored Toggle](_Gifs/switch_BgColors.gif)\n```swift\nanimationView2.setValue(UIColor.green, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\nanimationView3.setValue(UIColor.red, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\nanimationView4.setValue(UIColor.orange, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\n```\n\n```objective-c\n[animationView2 setValue:[UIColor greenColor]\n              forKeypath:@\"BG-On.Group 1.Fill 1.Color\"\n                 atFrame:@0];\n```\nThe keyPath is a dot separated path of layer and property names from After Effects.\nLOTAnimationView provides `- (void)logHierarchyKeypaths` which will recursively log all settable keypaths for the animation.\n![Key Path](_Gifs/aftereffectskeypath.png)\n\"BG-On.Group 1.Fill 1.Color\"\n\n### Now lets change a couple of properties\n![Multiple Colors](_Gifs/switch_MultipleBgs.gif)\n```swift\nanimationView2.setValue(UIColor.green, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\nanimationView2.setValue(UIColor.red, forKeypath: \"BG-Off.Group 1.Fill 1.Color\", atFrame: 0)\n```\n\nLottie allows you to change **any** property that is animatable in After Effects. If a keyframe does not exist, a linear keyframe is created for you. If a keyframe does exist then just its data is replaced.\n\n\n## Supported After Effects Features\n\n### Keyframe Interpolation\n\n---\n\n* Linear Interpolation\n* Bezier Interpolation\n* Hold Interpolation\n* Rove Across Time\n* Spatial Bezier\n\n### Solids\n\n---\n\n* Transform Anchor Point\n* Transform Position\n* Transform Scale\n* Transform Rotation\n* Transform Opacity\n\n### Masks\n\n---\n\n* Path\n* Opacity\n* Multiple Masks (additive, subtractive and intersection)\n\n### Track Mattes\n\n---\n\n* Alpha Matte\n\n### Parenting\n\n---\n\n* Multiple Parenting\n* Nulls\n\n### Shape Layers\n\n---\n\n* Anchor Point\n* Position\n* Scale\n* Rotation\n* Opacity\n* Path\n* Group Transforms (Anchor point, position, scale etc)\n* Rectangle (All properties)\n* Eclipse (All properties)\n* Multiple paths in one group\n* Even-Odd winding paths\n* Reverse Fill Rule\n\n#### Stroke (shape layer)\n\n---\n\n* Stroke Color\n* Stroke Opacity\n* Stroke Width\n* Line Cap\n* Dashes (Now Animated!)\n\n#### Fill (shape layer)\n\n---\n\n* Fill Color\n* Fill Opacity\n\n#### Trim Paths (shape layer)\n\n---\n\n* Trim Paths Start\n* Trim Paths End\n* Trim Paths Offset\n\n### Repeaters\n\n---\n\n* Supports repeater transforms\n* Offset currently not supported.\n\n### Gradients\n\n---\n\n* Support for Linear Gradients\n* Support for Radial Gradients\n\n### Polystar and Polygon\n\n---\n\n* Supported! Theres a known bug if the roundness is greater than 100 percent.\n\n#### Layer Features\n\n---\n\n* Precomps\n* Image Layers\n* Shape Layers\n* Null Layers\n* Solid Layers\n* Parenting Layers\n* Alpha Matte Layers\n\n## Currently Unsupported After Effects Features\n\n* Merge Shapes\n* Trim Shapes Individually feature of Trim Paths\n* Expressions\n* 3d Layer support\n* Time remapping / Layer Reverse\n* Layer Blend Modes\n* Layer Effects\n\n\n## Community Contributions\n * [Xamarin bindings](https://github.com/martijn00/LottieXamarin)\n * [NativeScript bindings](https://github.com/bradmartin/nativescript-lottie)\n * [Appcelerator Titanium bindings](https://github.com/m1ga/ti.animation)\n * MacOS Support added by [Alex Pawlowski](https://github.com/pawlowskialex)\n\n## Alternatives\n1. Build animations by hand. Building animations by hand is a huge time commitment for design and engineering across Android and iOS. It\'s often hard or even impossible to justify spending so much time to get an animation right.\n2. [Facebook Keyframes](https://github.com/facebookincubator/Keyframes). Keyframes is a wonderful new library from Facebook that they built for reactions. However, Keyframes doesn\'t support some of Lottie\'s features such as masks, mattes, trim paths, dash patterns, and more.\n2. Gifs. Gifs are more than double the size of a bodymovin JSON and are rendered at a fixed size that can\'t be scaled up to match large and high density screens.\n3. Png sequences. Png sequences are even worse than gifs in that their file sizes are often 30-50x the size of the bodymovin json and also can\'t be scaled up.\n\n## Why is it called Lottie?\nLottie is named after a German film director and the foremost pioneer of silhouette animation. Her best known films are The Adventures of Prince Achmed (1926) – the oldest surviving feature-length animated film, preceding Walt Disney\'s feature-length Snow White and the Seven Dwarfs (1937) by over ten years\n[The art of Lotte Reineger](https://www.youtube.com/watch?v=LvU55CUw5Ck&feature=youtu.be)\n\n## Contributing\nContributors are more than welcome. Just upload a PR with a description of your changes.\n\nIf you would like to add more JSON files feel free to do so!\n\n## Issues or feature requests?\nFile github issues for anything that is unexpectedly broken. If an After Effects file is not working, please attach it to your issue. Debugging without the original file is much more difficult. Lottie is developed and maintained by [Brandon Withrow](mailto:brandon.withrow@airbnb.com). Feel free to reach out via email or [Twitter](https://twitter.com/theWithra)\n\n## Roadmap (In no particular order)\n- Add support for interactive animated transitions\n- Animation Breakpoints/Seekpoints\n','<h1 id=\"lottieforiosmacosandandroidhttpsgithubcomairbnblottieandroidandreactnativehttpsgithubcomairbnblottiereactnative\">Lottie for iOS, MacOS (and <a href=\"https://github.com/airbnb/lottie-android\">Android</a> and <a href=\"https://github.com/airbnb/lottie-react-native\">React Native</a>)</h1>\n<h3 id=\"tableofcontents\">Table of Contents</h3>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#installing-lottie\">Installing Lottie</a></li>\n<li><a href=\"#ios-sample-app\">iOS Sample App</a></li>\n<li><a href=\"#macos-sample-app\">MacOS Sample App</a></li>\n<li><a href=\"#objective-c-examples\">Objective C Examples</a></li>\n<li><a href=\"#swift-examples\">Swift Examples</a></li>\n<li><a href=\"#debugging\">Debugging Lottie</a></li>\n<li><a href=\"#ios-view-controller-transitioning\">iOS View Controller Transitioning</a></li>\n<li><a href=\"#changing-animations-at-runtime\">Changing Animations At Runtime</a></li>\n<li><a href=\"#supported-after-effects-features\">Supported After Effects Features</a></li>\n<li><a href=\"#currently-unsupported-after-effects-features\">Currently Unsupported After Effects Features</a></li>\n<li><a href=\"#community-contributions\">Community Contributions</a></li>\n<li><a href=\"#alternatives\">Alternatives</a></li>\n<li><a href=\"#why-is-it-called-lottie\">Why is it called Lottie?</a></li>\n<li><a href=\"#contributing\">Contributing</a></li>\n<li><a href=\"#issues-or-feature-requests\">Issues or feature requests?</a></li>\n</ul>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Lottie is a mobile library for Android and iOS that parses <a href=\"http://www.adobe.com/products/aftereffects.html\">Adobe After Effects</a> animations exported as json with <a href=\"https://github.com/bodymovin/bodymovin\">bodymovin</a> and renders the vector animations natively on mobile and through React Native!</p>\n<p>For the first time, designers can create <strong>and ship</strong> beautiful animations without an engineer painstakingly recreating it by hand.\nSince the animation is backed by JSON they are extremely small in size but can be large in complexity!\nAnimations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed.\nLottie can play or loop just a portion of the animation as well, the possibilities are endless!\nAnimations can even be <strong><em>changed at runtime</em></strong> in various ways! Change the color, position or any keyframable value!\nLottie also supports native UIViewController Transitions out of the box!</p>\n<p>Here is just a small sampling of the power of Lottie</p>\n<p><img src=\"_Gifs/Examples1.gif\" alt=\"Example1\" />\n<img src=\"_Gifs/Examples2.gif\" alt=\"Example2\" /></p>\n<p><img src=\"_Gifs/Community 2_3.gif\" /></p>\n<p><img src=\"_Gifs/Examples3.gif\" alt=\"Example3\" /></p>\n<p><img src=\"_Gifs/Examples4.gif\" alt=\"Abcs\" /></p>\n<h2 id=\"installinglottie\">Installing Lottie</h2>\n<h3 id=\"githubrepo\">Github Repo</h3>\n<p>You can pull the <a href=\"https://github.com/airbnb/lottie-ios/\">Lottie Github Repo</a> and include the Lottie.xcodeproj to build a dynamic or static library.</p>\n<h3 id=\"cocoapods\">Cocoapods</h3>\n<p>Get <a href=\"https://cocoapods.org/\">Cocoapods</a>\nAdd the pod to your podfile</p>\n<pre><code>pod \'lottie-ios\'\n</code></pre>\n<p>run</p>\n<pre><code>pod install\n</code></pre>\n<p>After installing the cocoapod into your project import Lottie with\nObjective C\n<code>#import &lt;Lottie/Lottie.h&gt;</code> \nSwift\n<code>import Lottie</code></p>\n<h3 id=\"carthage\">Carthage</h3>\n<p>Get <a href=\"https://github.com/Carthage/Carthage\">Carthage</a></p>\n<p>Add Lottie to your Cartfile</p>\n<pre><code>github \"airbnb/lottie-ios\" \"master\"\n</code></pre>\n<p>run</p>\n<pre><code>carthage update\n</code></pre>\n<p>In your application targets “General” tab under the “Linked Frameworks and Libraries” section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that <code>carthage update</code> produced.</p>\n<h2 id=\"iossampleapp\">iOS Sample App</h2>\n<p>Clone this repo and try out <a href=\"https://github.com/airbnb/lottie-ios/tree/master/Example\">the Sample App</a>\nThe repo can build a MacOS Example and an iOS Example</p>\n<p>The iOS Example App demos several of the features of Lottie</p>\n<p><img src=\"_Gifs/iosexample1.png\" alt=\"Example 1\" /><img src=\"_Gifs/iosexample2.png\" alt=\"Example 2\" />\n<img src=\"_Gifs/iosexample3.png\" alt=\"Example 3\" /></p>\n<p>The animation Explorer allows you to scrub, play, loop, and resize animations.\nAnimations can be loaded from the app bundle or from <a href=\"http://www.lottiefiles.com\">Lottie Files</a> using the built in QR Code reader.</p>\n<h2 id=\"macossampleapp\">MacOS Sample App</h2>\n<p>Clone this repo and try out <a href=\"https://github.com/airbnb/lottie-ios/tree/master/Example\">the Sample App</a>\nThe repo can build a MacOS Example and an iOS Example</p>\n<p><img src=\"_Gifs/macexample.png\" alt=\"Lottie Viewer\" /></p>\n<p>The Lottie Viewer for MacOS allows you to drag and drop JSON files to open, play, scrub and loop animations. This app is backed by the same animation code as the iOS app, so you will get an accurate representation of Mac and iOS animations.</p>\n<h2 id=\"objectivecexamples\">Objective C Examples</h2>\n<p>Lottie animations can be loaded from bundled JSON or from a URL\nTo bundle JSON just add it and any images that the animation requires to your target in xcode.</p>\n<pre><code class=\"objective-c language-objective-c\">LOTAnimationView *animation = [LOTAnimationView animationNamed:@\"Lottie\"];\n[self.view addSubview:animation];\n[animation playWithCompletion:^(BOOL animationFinished) {\n// Do Something\n}];\n</code></pre>\n<p>If you are working with multiple bundles you can use.</p>\n<pre><code class=\"objective-c language-objective-c\">LOTAnimationView *animation = [LOTAnimationView animationNamed:@\"Lottie\" inBundle:[NSBundle YOUR_BUNDLE]];\n[self.view addSubview:animation];\n[animation playWithCompletion:^(BOOL animationFinished) {\n// Do Something\n}];\n</code></pre>\n<p>Or you can load it programmatically from a NSURL</p>\n<pre><code class=\"objective-c language-objective-c\">LOTAnimationView *animation = [[LOTAnimationView alloc] initWithContentsOfURL:[NSURL URLWithString:URL]];\n[self.view addSubview:animation];\n</code></pre>\n<p>Lottie supports the iOS <code>UIViewContentModes</code> aspectFit, aspectFill and scaleFill</p>\n<p>You can also set the animation progress interactively.</p>\n<pre><code class=\"objective-c language-objective-c\">CGPoint translation = [gesture getTranslationInView:self.view];\nCGFloat progress = translation.y / self.view.bounds.size.height;\nanimationView.animationProgress = progress;\n</code></pre>\n<p>Or you can play just a portion of the animation:</p>\n<pre><code class=\"objective-c language-objective-c\">[lottieAnimation playFromProgress:0.25 toProgress:0.5 withCompletion:^(BOOL animationFinished) {\n// Do Something\n}];\n</code></pre>\n<h2 id=\"swiftexamples\">Swift Examples</h2>\n<p>Lottie animations can be loaded from bundled JSON or from a URL\nTo bundle JSON just add it and any images that the animation requires to your target in xcode.</p>\n<pre><code class=\"swift language-swift\">let animationView = LOTAnimationView(name: \"LottieLogo\")\nself.view.addSubview(animationView)\nanimationView.play{ (finished) in\n      // Do Something\n}\n</code></pre>\n<p>If your animation is in another bundle you can use</p>\n<pre><code class=\"swift language-swift\">let animationView = LOTAnimationView(name: \"LottieLogo\" bundle:yourBundle)\nself.view.addSubview(animationView)\nanimationView.play()\n</code></pre>\n<p>Or you can load it asynchronously from a URL</p>\n<pre><code class=\"swift language-swift\">let animationView = LOTAnimationView(contentsOf: WebURL)\nself.view.addSubview(animationView)\nanimationView.play()\n</code></pre>\n<p>You can also set the animation progress interactively.</p>\n<pre><code class=\"swift language-swift\">let translation = gesture.getTranslationInView(self.view)\nlet progress = translation.y / self.view.bounds.size.height;\nanimationView.animationProgress = progress\n</code></pre>\n<p>Or you can play just a portion of the animation:</p>\n<pre><code class=\"swift language-swift\">animationView.play(fromProgress: 0.25, toProgress: 0.5, withCompletion: nil)\n</code></pre>\n<h2 id=\"iosviewcontrollertransitioning\">iOS View Controller Transitioning</h2>\n<p>Lottie comes with a <code>UIViewController</code> animation-controller for making custom viewController transitions!</p>\n<p><img src=\"_Gifs/transitionMasked.gif\" alt=\"Transition1\" />\n<img src=\"_Gifs/transitionPosition.gif\" alt=\"Transition2\" /></p>\n<p>Just become the delegate for a transition</p>\n<pre><code class=\"objective-c language-objective-c\">- (void)_showTransitionA {\n  ToAnimationViewController *vc = [[ToAnimationViewController alloc] init];\n  vc.transitioningDelegate = self;\n  [self presentViewController:vc animated:YES completion:NULL];\n}\n</code></pre>\n<p>And implement the delegate methods with a <code>LOTAnimationTransitionController</code></p>\n<pre><code class=\"objective-c language-objective-c\">#pragma mark -- View Controller Transitioning\n\n- (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented\npresentingController:(UIViewController *)presenting\nsourceController:(UIViewController *)source {\nLOTAnimationTransitionController *animationController = [[LOTAnimationTransitionController alloc] initWithAnimationNamed:@\"vcTransition1\"\nfromLayerNamed:@\"outLayer\"\ntoLayerNamed:@\"inLayer\"\napplyAnimationTransform:NO];\nreturn animationController;\n}\n\n- (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed {\nLOTAnimationTransitionController *animationController = [[LOTAnimationTransitionController alloc] initWithAnimationNamed:@\"vcTransition2\"\nfromLayerNamed:@\"outLayer\"\ntoLayerNamed:@\"inLayer\"\napplyAnimationTransform:NO];\nreturn animationController;\n}\n</code></pre>\n<p>By setting <code>applyAnimationTransform</code> to YES you can make the Lottie animation move the from and to view controllers. They will be positioned at the origin of the layer. When set to NO Lottie just masks the view controller with the specified layer while resepecting z order.</p>\n<h2 id=\"debugging\">Debugging</h2>\n<p>Lottie has a couple of debugging features to know about. \nWhen an animation is loaded unsupported features are logged out in the console with their function names.</p>\n<p>If you checkout LOTHelpers.h you will see two debug flags. <code>ENABLE_DEBUG_LOGGING</code> and <code>ENABLE_DEBUG_SHAPES</code>. \n<code>ENABLE_DEBUG_LOGGING</code> increases the verbosity of Lottie Logging. It logs anytime an animation node is set during animation. If your animation if not working, turn this on and play your animation. The console log might give you some clues as to whats going on.</p>\n<p><code>ENABLE_DEBUG_SHAPES</code> Draws a colored square for the anchor-point of every layer and shape. This is helpful to see if anything is on screen.</p>\n<h3 id=\"keypaths\">Keypaths</h3>\n<p>LOTAnimationView provides <code>- (void)logHierarchyKeypaths</code> which will recursively log all settable keypaths for the animation. This is helpful for changing animationations at runtime.</p>\n<h2 id=\"changinganimationsatruntime\">Changing Animations At Runtime</h2>\n<p>Lottie can do more than just play beautiful animations. Lottie allows you to <strong>change</strong> animations at runtime.</p>\n<h3 id=\"saywewanttocreate4toggleswitches\">Say we want to create 4 toggle switches.</h3>\n<p><img src=\"_Gifs/switch_Normal.gif\" alt=\"Toggle\" />\nIts easy to create the four switches and play them:</p>\n<pre><code class=\"swift language-swift\">let animationView = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView)\nanimationView.frame.origin.x = 40\nanimationView.frame.origin.y = 20\nanimationView.autoReverseAnimation = true\nanimationView.loopAnimation = true\nanimationView.play()\n\nlet animationView2 = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView2)\nanimationView2.frame.origin.x = 40\nanimationView2.frame.origin.y = animationView.frame.maxY + 4\nanimationView2.autoReverseAnimation = true\nanimationView2.loopAnimation = true\nanimationView2.play()\n\nlet animationView3 = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView3)\nanimationView3.frame.origin.x = 40\nanimationView3.frame.origin.y = animationView2.frame.maxY + 4\nanimationView3.autoReverseAnimation = true\nanimationView3.loopAnimation = true\nanimationView3.play()\n\nlet animationView4 = LOTAnimationView(name: \"toggle\");\nself.view.addSubview(animationView4)\nanimationView4.frame.origin.x = 40\nanimationView4.frame.origin.y = animationView3.frame.maxY + 4\nanimationView4.autoReverseAnimation = true\nanimationView4.loopAnimation = true\nanimationView4.play()\n</code></pre>\n<h3 id=\"nowletschangetheircolors\">Now lets change their colors</h3>\n<p><img src=\"_Gifs/switch_BgColors.gif\" alt=\"Recolored Toggle\" /></p>\n<pre><code class=\"swift language-swift\">animationView2.setValue(UIColor.green, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\nanimationView3.setValue(UIColor.red, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\nanimationView4.setValue(UIColor.orange, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\n</code></pre>\n<pre><code class=\"objective-c language-objective-c\">[animationView2 setValue:[UIColor greenColor]\n              forKeypath:@\"BG-On.Group 1.Fill 1.Color\"\n                 atFrame:@0];\n</code></pre>\n<p>The keyPath is a dot separated path of layer and property names from After Effects.\nLOTAnimationView provides <code>- (void)logHierarchyKeypaths</code> which will recursively log all settable keypaths for the animation.\n<img src=\"_Gifs/aftereffectskeypath.png\" alt=\"Key Path\" />\n\"BG-On.Group 1.Fill 1.Color\"</p>\n<h3 id=\"nowletschangeacoupleofproperties\">Now lets change a couple of properties</h3>\n<p><img src=\"_Gifs/switch_MultipleBgs.gif\" alt=\"Multiple Colors\" /></p>\n<pre><code class=\"swift language-swift\">animationView2.setValue(UIColor.green, forKeypath: \"BG-On.Group 1.Fill 1.Color\", atFrame: 0)\nanimationView2.setValue(UIColor.red, forKeypath: \"BG-Off.Group 1.Fill 1.Color\", atFrame: 0)\n</code></pre>\n<p>Lottie allows you to change <strong>any</strong> property that is animatable in After Effects. If a keyframe does not exist, a linear keyframe is created for you. If a keyframe does exist then just its data is replaced.</p>\n<h2 id=\"supportedaftereffectsfeatures\">Supported After Effects Features</h2>\n<h3 id=\"keyframeinterpolation\">Keyframe Interpolation</h3>\n<hr />\n<ul>\n<li>Linear Interpolation</li>\n<li>Bezier Interpolation</li>\n<li>Hold Interpolation</li>\n<li>Rove Across Time</li>\n<li>Spatial Bezier</li>\n</ul>\n<h3 id=\"solids\">Solids</h3>\n<hr />\n<ul>\n<li>Transform Anchor Point</li>\n<li>Transform Position</li>\n<li>Transform Scale</li>\n<li>Transform Rotation</li>\n<li>Transform Opacity</li>\n</ul>\n<h3 id=\"masks\">Masks</h3>\n<hr />\n<ul>\n<li>Path</li>\n<li>Opacity</li>\n<li>Multiple Masks (additive, subtractive and intersection)</li>\n</ul>\n<h3 id=\"trackmattes\">Track Mattes</h3>\n<hr />\n<ul>\n<li>Alpha Matte</li>\n</ul>\n<h3 id=\"parenting\">Parenting</h3>\n<hr />\n<ul>\n<li>Multiple Parenting</li>\n<li>Nulls</li>\n</ul>\n<h3 id=\"shapelayers\">Shape Layers</h3>\n<hr />\n<ul>\n<li>Anchor Point</li>\n<li>Position</li>\n<li>Scale</li>\n<li>Rotation</li>\n<li>Opacity</li>\n<li>Path</li>\n<li>Group Transforms (Anchor point, position, scale etc)</li>\n<li>Rectangle (All properties)</li>\n<li>Eclipse (All properties)</li>\n<li>Multiple paths in one group</li>\n<li>Even-Odd winding paths</li>\n<li>Reverse Fill Rule</li>\n</ul>\n<h4 id=\"strokeshapelayer\">Stroke (shape layer)</h4>\n<hr />\n<ul>\n<li>Stroke Color</li>\n<li>Stroke Opacity</li>\n<li>Stroke Width</li>\n<li>Line Cap</li>\n<li>Dashes (Now Animated!)</li>\n</ul>\n<h4 id=\"fillshapelayer\">Fill (shape layer)</h4>\n<hr />\n<ul>\n<li>Fill Color</li>\n<li>Fill Opacity</li>\n</ul>\n<h4 id=\"trimpathsshapelayer\">Trim Paths (shape layer)</h4>\n<hr />\n<ul>\n<li>Trim Paths Start</li>\n<li>Trim Paths End</li>\n<li>Trim Paths Offset</li>\n</ul>\n<h3 id=\"repeaters\">Repeaters</h3>\n<hr />\n<ul>\n<li>Supports repeater transforms</li>\n<li>Offset currently not supported.</li>\n</ul>\n<h3 id=\"gradients\">Gradients</h3>\n<hr />\n<ul>\n<li>Support for Linear Gradients</li>\n<li>Support for Radial Gradients</li>\n</ul>\n<h3 id=\"polystarandpolygon\">Polystar and Polygon</h3>\n<hr />\n<ul>\n<li>Supported! Theres a known bug if the roundness is greater than 100 percent.</li>\n</ul>\n<h4 id=\"layerfeatures\">Layer Features</h4>\n<hr />\n<ul>\n<li>Precomps</li>\n<li>Image Layers</li>\n<li>Shape Layers</li>\n<li>Null Layers</li>\n<li>Solid Layers</li>\n<li>Parenting Layers</li>\n<li>Alpha Matte Layers</li>\n</ul>\n<h2 id=\"currentlyunsupportedaftereffectsfeatures\">Currently Unsupported After Effects Features</h2>\n<ul>\n<li>Merge Shapes</li>\n<li>Trim Shapes Individually feature of Trim Paths</li>\n<li>Expressions</li>\n<li>3d Layer support</li>\n<li>Time remapping / Layer Reverse</li>\n<li>Layer Blend Modes</li>\n<li>Layer Effects</li>\n</ul>\n<h2 id=\"communitycontributions\">Community Contributions</h2>\n<ul>\n<li><a href=\"https://github.com/martijn00/LottieXamarin\">Xamarin bindings</a></li>\n<li><a href=\"https://github.com/bradmartin/nativescript-lottie\">NativeScript bindings</a></li>\n<li><a href=\"https://github.com/m1ga/ti.animation\">Appcelerator Titanium bindings</a></li>\n<li>MacOS Support added by <a href=\"https://github.com/pawlowskialex\">Alex Pawlowski</a></li>\n</ul>\n<h2 id=\"alternatives\">Alternatives</h2>\n<ol>\n<li>Build animations by hand. Building animations by hand is a huge time commitment for design and engineering across Android and iOS. It\'s often hard or even impossible to justify spending so much time to get an animation right.</li>\n<li><a href=\"https://github.com/facebookincubator/Keyframes\">Facebook Keyframes</a>. Keyframes is a wonderful new library from Facebook that they built for reactions. However, Keyframes doesn\'t support some of Lottie\'s features such as masks, mattes, trim paths, dash patterns, and more.</li>\n<li>Gifs. Gifs are more than double the size of a bodymovin JSON and are rendered at a fixed size that can\'t be scaled up to match large and high density screens.</li>\n<li>Png sequences. Png sequences are even worse than gifs in that their file sizes are often 30-50x the size of the bodymovin json and also can\'t be scaled up.</li>\n</ol>\n<h2 id=\"whyisitcalledlottie\">Why is it called Lottie?</h2>\n<p>Lottie is named after a German film director and the foremost pioneer of silhouette animation. Her best known films are The Adventures of Prince Achmed (1926) – the oldest surviving feature-length animated film, preceding Walt Disney\'s feature-length Snow White and the Seven Dwarfs (1937) by over ten years\n<a href=\"https://www.youtube.com/watch?v=LvU55CUw5Ck&feature=youtu.be\">The art of Lotte Reineger</a></p>\n<h2 id=\"contributing\">Contributing</h2>\n<p>Contributors are more than welcome. Just upload a PR with a description of your changes.</p>\n<p>If you would like to add more JSON files feel free to do so!</p>\n<h2 id=\"issuesorfeaturerequests\">Issues or feature requests?</h2>\n<p>File github issues for anything that is unexpectedly broken. If an After Effects file is not working, please attach it to your issue. Debugging without the original file is much more difficult. Lottie is developed and maintained by <a href=\"mailto:brandon.withrow@airbnb.com\">Brandon Withrow</a>. Feel free to reach out via email or <a href=\"https://twitter.com/theWithra\">Twitter</a></p>\n<h2 id=\"roadmapinnoparticularorder\">Roadmap (In no particular order)</h2>\n<ul>\n<li>Add support for interactive animated transitions</li>\n<li>Animation Breakpoints/Seekpoints</li>\n</ul>'),
	(74,'louisdh','markdown-table-gen','https://raw.githubusercontent.com/louisdh/markdown-table-gen/master/README.md','2018-11-07 12:30:35','# Markdown Table Generator\n<p>\n<a href=\"https://travis-ci.org/louisdh/markdown-table-gen\"><img src=\"https://travis-ci.org/louisdh/markdown-table-gen.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/markdown-table-gen\"><img src=\"https://codecov.io/gh/louisdh/markdown-table-gen/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/Platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS macOS tvOS watchOS\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n\nThis is a little script written in Swift that generates a Markdown table from an array of strings for a given number of columns.\n\n## Example\n\n```swift\nlet data = [\"Here\'s\", \"To\", \"The\", \"Crazy\", \"Ones\"]\n\nprint(markdownTable(for: data, numberOfColumns: 4))\n```\n\n```	\n|        |        |        |        |\n| ------ | ------ | ------ | ------ |\n| Here\'s | To     | The    | Crazy  |\n| Ones   |        |        |        |\n```						\n\n|        |        |        |        |\n| ------ | ------ | ------ | ------ |\n| Here\'s | To     | The    | Crazy  |\n| Ones   |        |        |        |\n\n\n## License\n\nThis project is available under the MIT license. See the LICENSE file for more info.\n','<h1 id=\"markdowntablegenerator\">Markdown Table Generator</h1>\n<p>\n<a href=\"https://travis-ci.org/louisdh/markdown-table-gen\"><img src=\"https://travis-ci.org/louisdh/markdown-table-gen.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/markdown-table-gen\"><img src=\"https://codecov.io/gh/louisdh/markdown-table-gen/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/Platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS%20%7C%20Linux-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: iOS macOS tvOS watchOS\">\n<br>\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n<a href=\"https://paypal.me/louisdhauwe\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg?style=flat\" alt=\"Donate via PayPal\"/></a>\n</p>\n<p>This is a little script written in Swift that generates a Markdown table from an array of strings for a given number of columns.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"swift language-swift\">let data = [\"Here\'s\", \"To\", \"The\", \"Crazy\", \"Ones\"]\n\nprint(markdownTable(for: data, numberOfColumns: 4))\n</code></pre>\n<pre><code>|        |        |        |        |\n| ------ | ------ | ------ | ------ |\n| Here\'s | To     | The    | Crazy  |\n| Ones   |        |        |        |\n</code></pre>\n<pre><code>                    \n</code></pre>\n<p>|        |        |        |        |\n| ------ | ------ | ------ | ------ |\n| Here\'s | To     | The    | Crazy  |\n| Ones   |        |        |        |</p>\n<h2 id=\"license\">License</h2>\n<p>This project is available under the MIT license. See the LICENSE file for more info.</p>'),
	(75,'louisdh','microcontroller-kit','https://raw.githubusercontent.com/louisdh/microcontroller-kit/master/README.md','2018-11-07 12:30:35','<p align=\"center\">\n<img src=\"readme-resources/hero.png\" style=\"max-height: 300px;\" alt=\"MicrocontrollerKit\">\n</p>\n\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/microcontroller-kit\"><img src=\"https://travis-ci.org/louisdh/microcontroller-kit.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codeclimate.com/github/louisdh/microcontroller-kit\"><img src=\"https://codeclimate.com/github/louisdh/microcontroller-kit/badges/gpa.svg\" style=\"max-height: 300px;\" alt=\"Code Climate\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/microcontroller-kit\"><img src=\"https://codecov.io/gh/louisdh/microcontroller-kit/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/platform-macOS-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: macOS\">\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n</p>\n\n\n## About\nMicrocontrollerKit is a Swift framework containing basic value types, operators and functions for tinkering with microcontrollers in software.\n\n### Seven-segment display\nIn the macOS example, 2 nibbles are created and added. Its sum is given to a `SevenSegmentDisplay`, which has a textual representation using emoticons.\n![](readme-resources/seven-segment-example_.png)\n\n## Requirements\n* Xcode 9.3+\n\n## License\n\nThis project is available under the MIT license. See the LICENSE file for more info.\n','<p align=\"center\">\n<img src=\"readme-resources/hero.png\" style=\"max-height: 300px;\" alt=\"MicrocontrollerKit\">\n</p>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/louisdh/microcontroller-kit\"><img src=\"https://travis-ci.org/louisdh/microcontroller-kit.svg?branch=master\" alt=\"Travis build status\"/></a>\n<a href=\"https://codeclimate.com/github/louisdh/microcontroller-kit\"><img src=\"https://codeclimate.com/github/louisdh/microcontroller-kit/badges/gpa.svg\" style=\"max-height: 300px;\" alt=\"Code Climate\"/></a>\n<a href=\"https://codecov.io/gh/louisdh/microcontroller-kit\"><img src=\"https://codecov.io/gh/louisdh/microcontroller-kit/branch/master/graph/badge.svg\" alt=\"Codecov\"/></a>\n<br>\n<a href=\"https://developer.apple.com/swift/\"><img src=\"https://img.shields.io/badge/Swift-4.1-orange.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Swift\"/></a>\n<img src=\"https://img.shields.io/badge/platform-macOS-lightgrey.svg\" style=\"max-height: 300px;\" alt=\"Platform: macOS\">\n<a href=\"http://twitter.com/LouisDhauwe\"><img src=\"https://img.shields.io/badge/Twitter-@LouisDhauwe-blue.svg?style=flat\" style=\"max-height: 300px;\" alt=\"Twitter\"/></a>\n</p>\n<h2 id=\"about\">About</h2>\n<p>MicrocontrollerKit is a Swift framework containing basic value types, operators and functions for tinkering with microcontrollers in software.</p>\n<h3 id=\"sevensegmentdisplay\">Seven-segment display</h3>\n<p>In the macOS example, 2 nibbles are created and added. Its sum is given to a <code>SevenSegmentDisplay</code>, which has a textual representation using emoticons.\n<img src=\"readme-resources/seven-segment-example_.png\" alt=\"\" /></p>\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n<li>Xcode 9.3+</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>This project is available under the MIT license. See the LICENSE file for more info.</p>'),
	(76,'louisdh','network_ios','https://raw.githubusercontent.com/louisdh/network_ios/master/README.md','2018-11-07 12:30:35','# network_ios: network related commands for ios_system\n\n\n<p align=\"center\">\n<img src=\"https://img.shields.io/badge/Platform-iOS%2011.0+-lightgrey.svg\" alt=\"Platform: iOS\">\n<a href=\"https://travis-ci.org/holzschu/network_ios\"><img src=\"https://travis-ci.org/holzschu/network_ios.svg?branch=master\" alt=\"Build Status\"/></a>\n<br>\n<a href=\"http://twitter.com/nholzschuch\"><img src=\"https://img.shields.io/badge/Twitter-@nholzschuch-blue.svg?style=flat\" alt=\"Twitter\"/></a>\n</p>\n\n[ios_system](https://github.com/holzschu/ios_system) is a replacement for `system()` that is compatible with AppStore rules and the iOS programming API. Commands are provided as dynamic libraries and loaded as they are required by the user. \n\n[ios_system](https://github.com/holzschu/ios_system) itself contains basic commands, operating on files (ls, mv, rm, tar, curl, grep...) More advanced commands are provided separately. `network_ios` is one of these extensions. To use it, just compile it and add it to the list of embedded libraries in your app (on top of all the libraries generated by [ios_system](https://github.com/holzschu/ios_system), of course). There is no change to make to ios_system: if the `libnetwork_ios.dylib` is present, it will execute the commands. Otherwise, it won\'t (but that\'s hardly surprising). \n\nCommands available in this package: \n- ping\n- nc (netcat)\n- nslookup\n- host\n- dig\n- telnet\n\nIf you run them inside [OpenTerm](https://github.com/louisdh/terminal), the interactive versions work. I can\'t speak for other applications. \n\n## How to compile:\n\n- run the script `sh ./get_frameworks.sh`. This will download the `ios_system` framework.\n- open `network_ios.xcodeproj` and compile\n- place `libnetwork_ios.dylib` along with the other libraries generated by `ios_system`. \n','<h1 id=\"network_iosnetworkrelatedcommandsforios_system\">network<em>ios: network related commands for ios</em>system</h1>\n<p align=\"center\">\n<img src=\"https://img.shields.io/badge/Platform-iOS%2011.0+-lightgrey.svg\" alt=\"Platform: iOS\">\n<a href=\"https://travis-ci.org/holzschu/network_ios\"><img src=\"https://travis-ci.org/holzschu/network_ios.svg?branch=master\" alt=\"Build Status\"/></a>\n<br>\n<a href=\"http://twitter.com/nholzschuch\"><img src=\"https://img.shields.io/badge/Twitter-@nholzschuch-blue.svg?style=flat\" alt=\"Twitter\"/></a>\n</p>\n<p><a href=\"https://github.com/holzschu/ios_system\">ios_system</a> is a replacement for <code>system()</code> that is compatible with AppStore rules and the iOS programming API. Commands are provided as dynamic libraries and loaded as they are required by the user. </p>\n<p><a href=\"https://github.com/holzschu/ios_system\">ios<em>system</a> itself contains basic commands, operating on files (ls, mv, rm, tar, curl, grep…) More advanced commands are provided separately. <code>network_ios</code> is one of these extensions. To use it, just compile it and add it to the list of embedded libraries in your app (on top of all the libraries generated by <a href=\"https://github.com/holzschu/ios_system\">ios</em>system</a>, of course). There is no change to make to ios_system: if the <code>libnetwork_ios.dylib</code> is present, it will execute the commands. Otherwise, it won\'t (but that\'s hardly surprising). </p>\n<p>Commands available in this package: </p>\n<ul>\n<li>ping</li>\n<li>nc (netcat)</li>\n<li>nslookup</li>\n<li>host</li>\n<li>dig</li>\n<li>telnet</li>\n</ul>\n<p>If you run them inside <a href=\"https://github.com/louisdh/terminal\">OpenTerm</a>, the interactive versions work. I can\'t speak for other applications. </p>\n<h2 id=\"howtocompile\">How to compile:</h2>\n<ul>\n<li>run the script <code>sh ./get_frameworks.sh</code>. This will download the <code>ios_system</code> framework.</li>\n<li>open <code>network_ios.xcodeproj</code> and compile</li>\n<li>place <code>libnetwork_ios.dylib</code> along with the other libraries generated by <code>ios_system</code>. </li>\n</ul>');

/*!40000 ALTER TABLE `readme` ENABLE KEYS */;
UNLOCK TABLES;



/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
